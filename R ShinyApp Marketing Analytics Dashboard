#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(dplyr)
library(stringr)
library(tidytext)
library(Rcpp)
library(plotly)
library(shiny)
library(shinydashboard)
library(pdftools)
library(shapeR)
library(tidyverse)
library(textshape)
library(textreadr)
library(tidytext)
library(tidyr)
library(scales)
library(ggplot2)
library(textdata)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
library(tm)
library(NLP)
library(topicmodels)
library(reshape2)
library(quanteda)
library(readr)
library(readxl)
library(data.table)
library(lubridate)
library(gt)
library(glue)
library(DT)


## User Interface
ui <- dashboardPage(skin = "blue",
                    dashboardHeader(title = "Data Analytics"),
                    
                    dashboardSidebar(
                        sidebarMenu(
                            menuItem("Overview", tabName = "Overview", icon = icon("far fa-ellipsis-v")),
                            menuItem("Ad Campaigns", tabName = "AdCampaigns", icon = icon("fas fa-chart-bar")),
                            menuItem("Email Campaigns", tabName = "EmailCampaigns", icon = icon("fas fa-envelope-open-text")),
                            menuItem("User Activity", tabName = "UserActivity", icon = icon("fas fa-user-tag")),
                            menuItem("Site Sessions", tabName = "Sessions", icon = icon("fas fa-chalkboard-teacher"))#,
                            # menuItem("Budget Quiz", tabName = "BudgetQuiz", icon = icon("fab fa-wpforms")),
                            # menuItem("Clean Counts", tabName = "CleanCounts", icon = icon("fas fa-sort-amount-up")),
                            # menuItem("Investors", tabName = "Investors", icon = icon("fas fa-users"))
                            
                        )
                    ),
                    
                    dashboardBody(
                        tabItems(
                            tabItem(tabName = "Overview",
                                    h1(strong("Content Overview",align="center",style = "font-family: 'times'; font-si16pt")),
                                    h3(p("The scope of this ShinyApp dashboard is to present Campaign Performance, User Website Behavior, and Website Performance reports, in a centralized manner, to provide actionable insights for Marketing, UX/UI, and Product Development decision-making. ", style = "font-family: 'times'; font-si16pt")),
                                    h4("The dahboard reports presented were analyzed on a weekly basis to synthesize them into a report with", strong("key insights"), "and recommendations."),
                                    h4(p("Data was collected from various sources (Facebook Ads, HubSpot CRM, Azure databases), consolidated into insightful cross-platform reports, and analyzed for actionable and strategic recommendations.")),
                                    br(),
                                    box(
                                        width = 16, solidHeader = TRUE, status = "primary",
                                        h4(strong("Note:"), "several variables in the raw data have been altered to protect private company information."),
                                        h4(strong("Note:"), "the word 'Asset' is used throughout these dashboards to represent the different resources companies can use to help users convert (i.e. forms, quizzes, rewards programs)."),
                                        h4(strong("Note:"), "the graphs in this ShinyApp dashboard are interactive (i.e. rescale, segment, zoom, select).")
                                        
                                    ),
                                    
                                    box(
                                        width = 16, solidHeader = TRUE, status = "primary",
                                        h2(strong("Report Types",align="left",style = "font-family: 'times'; font-si16pt")),
                                        h3(strong("Ad Campaigns Dashboard:", style = "font-family: 'times'; font-si16pt")),
                                        h4("- Overall Ad Campaign Return on Investment",style = "font-family: 'times'; font-si16pt"),
                                        h4("- Cost-Per-Conversion Reports",style = "font-family: 'times'; font-si16pt"),
                                        h4("- Ad Campaign Performance by Channel",style = "font-family: 'times'; font-si16pt"),
                                        h4("- Ad Campaign Performance by Device",style = "font-family: 'times'; font-si16pt"),
                                        h4("- Ad Campaign Performance by Age Group",style = "font-family: 'times'; font-si16pt"),
                                        h3(strong("Email Campaigns Dashboard:", style = "font-family: 'times'; font-si16pt")),
                                        h4("- Email Campaign Performance based on Company Benchmarks",style = "font-family: 'times'; font-si16pt", "(average Open and Click-Through Rates)"),
                                        h3(strong("User Website Activity Dashboard:", style = "font-family: 'times'; font-si16pt")),
                                        h4("- Key Metrics and Conversion Reports",style = "font-family: 'times'; font-si16pt"),
                                        h4("- User Feedback Reports",style = "font-family: 'times'; font-si16pt"),
                                        h4("- User Shopping Behavior Reports",style = "font-family: 'times'; font-si16pt"),
                                        h3(strong("Website Sessions Dashboard:", style = "font-family: 'times'; font-si16pt")),
                                        h4("- Website Session Sourcing",style = "font-family: 'times'; font-si16pt"),
                                        h4("- New vs Returning Sessions",style = "font-family: 'times'; font-si16pt")),
                                    ),
                            
                            tabItem(tabName = "AdCampaigns",
                                    h1(strong("Ad Campaigns Dashboard",align="center",style = "font-family: 'times'; font-si16pt")),
                                    h3(p("The following tabs provide reports on the overall performance of Ad Campaigns, their cost-per-conversion, best performing platforms/placements, devices, and age groups.", style = "font-family: 'times'; font-si16pt")),
                                    tabBox(
                                        id = "tabset2", height = "1000px", width = "500px",
                                        tabPanel("Campaign Performance Reports", 
                                                 fluidRow(
                                                     
                                                     box(
                                                         title = "Amount Spent vs Unique Link Clicks", width = 12, solidHeader = TRUE, status = "primary",
                                                         plotlyOutput("scatter_link_clicks")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Dollar Spent to Unique Link Clicks Ratio", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("For every dollar spent, we get x amount of clicks."),
                                                         verbatimTextOutput("lclikcs_to_spent_ratio")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Dollar Spent per Ad Conversions Ratio", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("For every dollar spent, we get x amount of ad conversions."),
                                                         h5(strong("Ad Conversion:"), "the completion of the actions for which the ads are meant for."),
                                                         verbatimTextOutput("spent_to_conversion_ratio")  
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Signup Conversions by Campaign", width = 12, solidHeader = TRUE, status = "primary",
                                                         plotlyOutput("bar_campaign_signup_conversions")
                                                         
                                                     ))
                                        ),
                                        
                                        tabPanel("Cost-Per-Conversion Reports",
                                                 fluidRow(
                                                     box(
                                                         title = "Average Cost-Per-Conversion Ratios & Ad-Click-to-Conversion Percents", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Average Cost-Per-Conversion and Ad-Click-to-Conversion for each of the main ad campaigns."),
                                                         tableOutput("cpc_ad_to_link_click_ratio_table")
                                                     ),
                                                     
                                                     box(
                                                         title = "Ad Campaign Conversion Tables", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Weekly", strong("Ad Campaign Tables:"), "including conversion data from 4 key active campaigns."),
                                                         
                                                         selectInput("cpc_report_type", "Select table:",
                                                                     choices = c("Overall Ad Campaign Performance Report"="Overall",
                                                                                 "Asset 1 Ad Campaigns Report"="Venue Quiz CPC Table",
                                                                                 "Asset 2 Ad Campaigns Report"="Style Quiz CPC Table",
                                                                                 "Asset 3 Ad Campaigns Report"="Budget Quiz CPC Table",
                                                                                 "Support Service Ad Campaigns Report"="WPC CPC table")),
                                                         
                                                         tableOutput("cost_per_conversion_tables")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Weekly Asset Conversions", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("The following report provides context into which asset conversions are performing better week-over-week."),
                                                         tableOutput("non_signup_vs_signup_conversion_tables")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Common Hours for New Unique Sessions", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("The following report provides context into what are most common hours for new users arriving at our site."),
                                                         plotlyOutput("create_date_per_hour")
                                                         
                                                     ))
                                        ),
                                        
                                        tabPanel("Platform/Placement Reports",
                                                 fluidRow(
                                                     box(
                                                         title = "Click Through Rate by Platform", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Platforms can include Facebook, Google, Pinterest, among others."),
                                                         plotlyOutput("facebook_platform_ctr_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Click Through Rate by Placement", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Placements can include feed, stories, marketplace, among others."),
                                                         plotlyOutput("facebook_placement_ctr_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 1 Conversions by Platform", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common platforms for sourcing conversions of the company asset 1."),
                                                         plotlyOutput("bar_platform_style_quiz_conversions")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 2 Conversions by Platform", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common platforms for sourcing conversions of the company asset 2."),
                                                         plotlyOutput("bar_platform_budget_quiz_conversions")
                                                     ))
                                        ),
                                        
                                        tabPanel("Device Reports",
                                                 fluidRow(
                                                     box(
                                                         title = "Click Through Rate by Device", width = 12, solidHeader = TRUE, status = "primary",
                                                         h4("Device types can include mobile applications, mobile web, desktop, among others."),
                                                         plotlyOutput("facebook_device_ctr_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 1 Conversions by Device", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common device types for sourcing conversions of the company asset 1."),
                                                         plotlyOutput("style_quiz_device_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 2 Conversions by Device", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common device types for sourcing conversions of the company asset 2."),
                                                         plotlyOutput("budget_quiz_device_pie")
                                                     ))
                                        ),
                                        
                                        tabPanel("Age Group Reports",
                                                 fluidRow(
                                                     box(
                                                         title = "Click Through Rate by Age Group", width = 12, solidHeader = TRUE, status = "primary",
                                                         plotlyOutput("facebook_age_ctr_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 1 Conversions by Age Group", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common age groups for sourcing conversions of the company asset 1."),
                                                         plotlyOutput("facebook_age_style_quiz_pie")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 2 Conversions by Age Group", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Most common age groups for sourcing conversions of the company asset 2."),
                                                         plotlyOutput("facebook_age_budget_quiz_pie")
                                                     ))
                                        )
                                        
                                    )),
                            
                            
                            tabItem(tabName = "EmailCampaigns",
                                    h1(strong("Email Campaigns Dashboard", align="center",style = "font-family: 'times'; font-si16pt")),
                                    h3(p("The following reports provide context into which email campaigns are better-performing for asset conversions, by comparing their Open Rates vs Click-Through-Rates.", style = "font-family: 'times'; font-si16pt")),
                                    tabBox(
                                        id = "tabset3", height = "1000px", width = "500px",
                                        tabPanel("Email Outreach Reports",
                                                 fluidRow(
                                                     
                                                     box(
                                                         title = "Average Open Rate & Click-Through-Rate by Email Campaign", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Average open rate and click-through-rate by", strong("active"), "email campaign."),
                                                         tableOutput("email_avg_open_rate_ctr")
                                                     ),
                                                     
                                                     box(
                                                         title = "Email Campaign Open Rates & Click-Through-Rates", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("The following graphs display the open rates and CTRs by email campaign, along with their email delivery counts."),
                                                         selectInput(inputId = "emailDataset",
                                                                     label = "Select graph:",
                                                                     choices = c("Asset 1 Email Campaign"="venue_results_df",
                                                                                 "Asset 2 Email Campaign"="budget_results_df",
                                                                                 "Asset 3 Email Campaign 1"="all_style_result_email1_df",
                                                                                 "Asset 3 Email Campaign 2"="all_style_result_email2_df",
                                                                                 "Support Service Email Campaign"="wpc_email_data_df",
                                                                                 "Asset Retargeting Email Campaign"="only_budget_style_email_data_df")),
                                                         plotlyOutput("email_open_rate_ctr_plots")
                                                     ))
                                                 
                                        )
                                    )),
                            
                            
                            tabItem(tabName = "UserActivity",
                                    h1(strong("User Website Activity Dashboard", align="center",style = "font-family: 'times'; font-si16pt")),
                                    h3(p("The following tabs contain reports that provide context on the user website behavior, asset conversion feedback, and user shopping behavior.", style = "font-family: 'times'; font-si16pt")),
                                    tabBox(
                                        id = "tabset4", height = "1000px", width = "500px", 
                                        
                                        tabPanel("User Website Behavior",
                                                 
                                                 box(
                                                     width = 14, solidHeader = TRUE, status = "primary",
                                                     h4(strong("Note:"),"These reports help cohort users based on key actions and conversions such as signing up, being an active shopper, or simply browsing the site and adding account details."),
                                                     h4("Each of these actions represent different intents that facilitate cohorting."),
                                                     
                                                 ),
                                                 
                                                 box(
                                                     width = 14, solidHeader = TRUE, status = "primary",
                                                     h3(strong("Terminology:"), style = "font-family: 'times'; font-si16pt"),
                                                     h4(p(strong("Signed Up User:"), "any user who arrived at the company website and has signed up.", style = "font-family: 'times'; font-si16pt")),
                                                     h4(p(strong("Non-Signup User:"), "any user who arrived at the company website but has", strong("NOT"), "signed up.", style = "font-family: 'times'; font-si16pt")),
                                                     h4(p(strong("Active User:"), "any user who arrived at the company website and has added products/services to their cart.", style = "font-family: 'times'; font-si16pt")),
                                                     h4(p(strong("Inactive User:"), "any user who arrived at the company website but has", strong("NOT"), "added products/services to their cart.", style = "font-family: 'times'; font-si16pt")),
                                                     
                                                     
                                                 ),
                                                 
                                                 
                                                 fluidRow(
                                                     box(
                                                         title = "Signup Conversion Percent", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Percentage of users that arrived at the company site and have signed up."),
                                                         verbatimTextOutput("signup_conversion_percent")
                                                     ),
                                                     
                                                     box(
                                                         title = "Non-Signup Users Percent", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Percentage of users that arrived at the company site but have", strong("NOT"), "signed up."),
                                                         verbatimTextOutput("anonymous_users_percent")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Active Signed Up Users", width =6, solidHeader = TRUE, status = "primary",
                                                         h5("Percentage of signed up users who have added products/services to their cart."),
                                                         verbatimTextOutput("signup_actively_shopping_percent")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Active Non-Signup Users", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Percentage of users who have", strong("NOT"), "signed up but have added products/services to their cart."),
                                                         verbatimTextOutput("anonymous_actively_shopping_percent")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         width = 12, solidHeader = TRUE, status = "primary",
                                                         h4(strong("Note:"), "given that an average of 58% of users that visit the company website are inactive (have", strong("NOT"), "added products to their carts), further analysis was done on other key activities such as filling account details or making filter selections."),
                                                         h4("These actions were considered significant since they provide user information that can be used for email outreach."),
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Commonly Filled Account Details/Filter", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Most commonly filled account details or filter selections from users who have", strong("NOT"), "added vendors to their cart."),
                                                         selectInput(inputId = "accountDetailDataset",
                                                                     label = "Select graph:",
                                                                     choices = c("Signed Up Users"="missing.values_inactive_signup_some_eDetails",
                                                                                 "Non-Signup Users"="missing.values_inactive_anonymous_some_eDetails")),
                                                         plotlyOutput("account_detail_filter_graphs")
                                                     ),
                                                     
                                                     box(
                                                         title = "Key Correlations", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Correlations between key asset conversions and purchases", strong("(which company assets are more likely to lead to a purchase?)")),
                                                         tableOutput("asset_correlations")
                                                     ))
                                                 
                                        ),
                                        
                                        
                                        
                                        
                                        tabPanel("Asset Feedback",
                                                 fluidRow(
                                                     box(
                                                         width = 12, solidHeader = TRUE, status = "primary",
                                                         h4(strong("Note:"), "these reports provide an example on how feedback for a company asset was analyzed to gauge the user's satisfaction and agreeableness."),
                                                         h4("In this scenario, Asset 1 represents a quiz that assigns a different result depending on selections. These results affect how users interact with the company website.")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 1 Feedback", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Most common user responses on the user aggreeableness with their Asset 1 result."),
                                                         plotlyOutput("bar_style_feedback_responses")
                                                     ),
                                                     
                                                     box(
                                                         title = "Feedback Responses by Asset 1 Result", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Most common user responses on their aggreeableness with their result by Asset 1 result."),
                                                         plotlyOutput("style_quiz_feedback_by_style")
                                                     ),
                                                     
                                                     box(
                                                         title = "Asset 1 Results Count", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Count of the most common Asset 1 results."),
                                                         plotlyOutput("bar_style_result_count_feedback")
                                                         
                                                     ))
                                        ),
                                        
                                        
                                        
                                        tabPanel("User Shopping Behavior",
                                                 fluidRow(
                                                     
                                                     box(
                                                         title = "Total Dollar Value of Product/Service Purhcases", width = 6, solidHeader = TRUE, status = "primary",
                                                         verbatimTextOutput("total_value_product_purchases")
                                                     ),
                                                     
                                                     box(
                                                         title = "Average Dollar Value of Product/Service Purhcases", width = 6, solidHeader = TRUE, status = "primary",
                                                         verbatimTextOutput("avg_value_product_purchases")
                                                     ),
                                                     
                                                     box(
                                                         title = "Total Dollar Value of Potential Purchases", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Total dollar amount of the products/services that have been added to cart."),
                                                         verbatimTextOutput("total_budget_value")
                                                     ),
                                                     
                                                     box(
                                                         title = "Average Dollar Value of Potential Purchases", width = 6, solidHeader = TRUE, status = "primary",
                                                         h5("Average dollar amount of the products/services that have been added to cart."),
                                                         verbatimTextOutput("average_budget_value")
                                                     ),
                                                     
                                                     box(
                                                         title = "Monthly Purchase Growth/Loss", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Monthly breakdown of the percent growth/loss for puchases."),
                                                         tableOutput("monthly_total_value_vendors_added_2020")
                                                     ))
                                                 
                                        )
                                        
                                    )),
                            
                            
                            tabItem(tabName = "Sessions",
                                    h1(strong("Website Sessions Dashboard", align="center",style = "font-family: 'times'; font-si16pt")),
                                    h3(p("This dashboard uses website sessions data to provide reports on new vs returning sessions, common session sources, and session growth/loss.", style = "font-family: 'times'; font-si16pt")),
                                    tabBox(
                                        id = "tabset5", height = "1000px", width = "500px",
                                        tabPanel("Website Session Reports",
                                                 fluidRow(
                                                     
                                                     box(
                                                         title = "Unique Sessions Count", width = 4, solidHeader = TRUE, status = "primary",
                                                         h5("Cumulative count of unique webiste sessions."),
                                                         tableOutput("unique_sessions_count")
                                                     ),
                                                     
                                                     box(
                                                         title = "New Unique Sessions Count", width = 4, solidHeader = TRUE, status = "primary",
                                                         h5("Cumulative count of new unique webiste sessions."),
                                                         tableOutput("new_unique_sessions_count")
                                                     ),
                                                     
                                                     box(
                                                         title = "Returning Unique Sessions Count", width = 4, solidHeader = TRUE, status = "primary",
                                                         h5("Cumulative count of returning unique webiste sessions."),
                                                         tableOutput("returning_unique_sessions_count")
                                                     ),
                                                     
                                                     box(title = "Website Unique Session Sources - New Unique Site Visit Sessions ", width = 6, solidHeader = TRUE, status = "primary",
                                                         h4("Common sources for new unique sessions."),
                                                         plotlyOutput("pie_new_sessions_sourcing_post_Aug24")
                                                         
                                                     ),
                                                     
                                                     box(title = "Website Unique Session Sources - Returning Unique Site Visit Sessions ", width = 6, solidHeader = TRUE, status = "primary",
                                                         h4("Common sources for returning unique sessions."),
                                                         plotlyOutput("pie_returning_sessions_sourcing_post_Aug24")
                                                         
                                                     ),
                                                     
                                                     box(
                                                         title = "Monthly Unique Sessions", width = 12, solidHeader = TRUE, status = "primary",
                                                         h5("Monthly breakdown of the percent growth/loss of new and returning unique site sessions."),
                                                         tableOutput("monthly_unique_sessions_table_2020")
                                                     ))
                                                 
                                        )
                                    ))
                            
                        )))


# Server
server <- shinyServer(function(input, output, session){ 
    
    ################
    # Global Code #
    ################
    
    
    ##############################################################################################################################################
    
    #########################
    # Reading Facebook Data #
    #########################
    
    #Reading EH's Facebook data 
    facebook_data_platform <- read_excel("Campaign-Platform-Aug-24-2020-Nov-15-2020.xlsx")
    #converting data table to a dataframe
    facebook_platform_df <- data.frame(facebook_data_platform)
    
    
    #reading the data for the most recent week - Nov 16 - 22
    facebook_platform_Nov16toNov22 <- read_excel("Campaign-Platform-Nov-16-2020-Nov-22-2020.xlsx")
    #converting the table to a dataframe 
    facebook_platform_Nov16toNov22_df <- data.frame(facebook_platform_Nov16toNov22)
    
    
    #using unioin to bind the rows of the facebook_platform_df (historic data) facebook_platform_new_df (new data)
    facebook_platform_df <- union_all(facebook_platform_Nov16toNov22_df, facebook_platform_df)
    
    
    #reading the data for the most recent week - Nov 23 - 29
    facebook_platform_Nov23toNov29 <- read_excel("Campaign-Platform-Nov-23-2020-Nov-29-2020.xlsx")
    #converting the table to a dataframe 
    facebook_platform_Nov23toNov29_df <- data.frame(facebook_platform_Nov23toNov29)
    
    
    #using unioin to bind the rows of the facebook_platform_df (historic data) facebook_platform_new_df (new data)
    facebook_platform_df <- union_all(facebook_platform_Nov23toNov29_df, facebook_platform_df)
    
    
    #reading the data for the most recent week - Nov 30 - Dec 06
    facebook_platform_Nov30toDec06 <- read_excel("Campaign-Platform-Nov-30-2020-Dec-06-2020.xlsx")
    #converting the table to a dataframe 
    facebook_platform_Nov30toDec06_df <- data.frame(facebook_platform_Nov30toDec06)
    
    
    #using unioin to bind the rows of the facebook_platform_df (historic data) facebook_platform_Nov30toDec06_df (new data)
    facebook_platform_df <- union_all(facebook_platform_Nov30toDec06_df, facebook_platform_df)
    
    
    
    ################
    ################
    ################
    
    #using for loop to change the names of the ad campaigns to make them generic 
    for (i in 1:nrow(facebook_platform_df)){
        if (grepl("Style", facebook_platform_df$Campaign.Name[i])){
            facebook_platform_df$Campaign.Name..[i] <- "Asset 1 Ad Campaigns"}
        else if (grepl("Budget", facebook_platform_df$Campaign.Name[i])){
            facebook_platform_df$Campaign.Name..[i] <- "Asset 2 Ad Campaigns"}
        else if (grepl("Venue", facebook_platform_df$Campaign.Name[i])){
            facebook_platform_df$Campaign.Name..[i] <- "Asset 3 Ad Campaigns"}
        else if (grepl("Planning", facebook_platform_df$Campaign.Name[i])){
            facebook_platform_df$Campaign.Name..[i] <- "Support Service Ad Campaigns"}
        else {facebook_platform_df$Campaign.Name..[i] <- "Other"}
    }
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(facebook_platform_df)){
        if (grepl("facebook", facebook_platform_df$Platform[i])){
            facebook_platform_df$Platform_generic[i] <- "Platform 1"}
        else if (grepl("instagram", facebook_platform_df$Platform[i])){
            facebook_platform_df$Platform_generic[i] <- "Platform 2"}
        else if (grepl("audience_network", facebook_platform_df$Platform[i])){
            facebook_platform_df$Platform_generic[i] <- "Platform 3"}
        else {facebook_platform_df$Platform_generic[i] <- "Other"}
    }
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(facebook_platform_df)){
        if (grepl("feed", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 1"}
        else if (grepl("instagram_stories", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 2"}
        else if (grepl("video_feeds", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 3"}
        else if (grepl("instream_video", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 4"}
        else if (grepl("marketplace", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 5"}
        else if (grepl("rewarded_video", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 6"}
        else if (grepl("facebook_stories", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 7"}
        else if (grepl("facebook_groups_feed", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 8"}
        else if (grepl("instagram_explore", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 9"}
        else if (grepl("an_classic", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 10"}
        else if (grepl("right_hand_column", facebook_platform_df$Placement[i])){
            facebook_platform_df$Placement_generic[i] <- "Placement 11"}
        else {facebook_platform_df$Placement_generic[i] <- "Other"}
    }
    
    
    ################
    ################
    ################
    
    #using for loop to change the device of the ad campaigns to make them generic 
    for (i in 1:nrow(facebook_platform_df)){
        if (grepl("mobile_app", facebook_platform_df$Device.Platform[i])){
            facebook_platform_df$Device_generic[i] <- "Device 1"}
        else if (grepl("mobile_web", facebook_platform_df$Device.Platform[i])){
            facebook_platform_df$Device_generic[i] <- "Device 2"}
        else if (grepl("desktop", facebook_platform_df$Device.Platform[i])){
            facebook_platform_df$Device_generic[i] <- "Device 3"}
        else {facebook_platform_df$Device_generic[i] <- "Other"}
    }
    
    ################################
    # Reading Facebook Gender Data #
    ################################
    
    
    #Reading EH's Facebook Platform and Placement data 
    facebook_data_gender <- read_excel("Campaign-Gender-Aug-24-2020-Nov-15-2020.xlsx")
    #converting data table to a dataframe
    facebook_gender_df <- data.frame(facebook_data_gender)
    
    
    #reading the data for the most recent week - Nov 16 - 22
    facebook_gender_Nov16toNov22 <- read_excel("Campaign-Gender-Nov-16-2020-Nov-22-2020.xlsx")
    #converting the table to a dataframe 
    facebook_gender_Nov16toNov22_df <- data.frame(facebook_gender_Nov16toNov22)
    
    #using unioin to bind the rows of the facebook_gender_df (historic data) facebook_gender_new_df (new data)
    facebook_gender_df <- union_all(facebook_gender_Nov16toNov22_df, facebook_gender_df)
    
    
    #reading the data for the most recent week - Nov 23 - 29
    facebook_gender_Nov23toNov29 <- read_excel("Campaign-Gender-Nov-23-2020-Nov-29-2020.xlsx")
    #converting the table to a dataframe 
    facebook_gender_Nov23toNov29_df <- data.frame(facebook_gender_Nov23toNov29)
    
    #using unioin to bind the rows of the facebook_gender_df (historic data) facebook_gender_new_df (new data)
    facebook_gender_df <- union_all(facebook_gender_Nov23toNov29_df, facebook_gender_df)
    
    
    #reading the data for the most recent week - Nov 30 - Dec 06
    facebook_gender_Nov30toDec06 <- read_excel("Campaign-Gender-Nov-30-2020-Dec-06-2020.xlsx")
    #converting the table to a dataframe 
    facebook_gender_Nov30toDec06_df <- data.frame(facebook_gender_Nov30toDec06)
    
    #using unioin to bind the rows of the facebook_gender_df (historic data) facebook_gender_Nov30toDec06_df (new data)
    facebook_gender_df <- union_all(facebook_gender_Nov30toDec06_df, facebook_gender_df)
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(facebook_gender_df)){
        if (grepl("25-34", facebook_gender_df$Age[i])){
            facebook_gender_df$Age_generic[i] <- "Age Group 1"}
        else if (grepl("18-24", facebook_gender_df$Age[i])){
            facebook_gender_df$Age_generic[i] <- "Age Group 2"}
        else if (grepl("35-44", facebook_gender_df$Age[i])){
            facebook_gender_df$Age_generic[i] <- "Age Group 3"}
        else {facebook_gender_df$Age_generic[i] <- "Other"}
    }
    
    
    
    ###########################
    # Reding HubSpot CRM Data #
    ###########################
    
    #Reading EH's HubSpot data 
    contact_data_hs <- read_excel("hubspot-contacts-2020-11-15.xlsx")
    #converting data table to a dataframe
    contact_data_hs_df <- data.frame(contact_data_hs)
    
    
    
    #reading the data for the most recent week - Nov 16 - 22
    contact_data_hs_Nov16toNov22 <- read_excel("hubspot-contacts-Nov-16-2020-to-Nov-22-2020.xlsx")
    #converting the table to a dataframe 
    contact_data_hs_Nov16toNov22_df <- data.frame(contact_data_hs_Nov16toNov22)
    
    #using unioin to bind the rows of the contact_data_hs_df (historic data) contact_data_hs_new_df (new data)
    contact_data_hs_df <- union_all(contact_data_hs_Nov16toNov22_df, contact_data_hs_df)
    
    
    
    #reading the data for the most recent week - Nov 23 - 29
    contact_data_hs_Nov23toNov29 <- read_excel("hubspot-contacts-Nov-23-2020-to-Nov-29-2020.xlsx")
    #converting the table to a dataframe 
    contact_data_hs_Nov23toNov29_df <- data.frame(contact_data_hs_Nov23toNov29)
    
    #using unioin to bind the rows of the contact_data_hs_df (historic data) contact_data_hs_new_df (new data)
    contact_data_hs_df <- union_all(contact_data_hs_Nov23toNov29_df, contact_data_hs_df)
    
    
    
    #reading the data for the most recent week - Nov 30 - Dec 06
    contact_data_hs_Nov30toDec06 <- read_excel("hubspot-contacts-Nov-30-2020-to-Dec-06-2020.xlsx")
    #converting the table to a dataframe 
    contact_data_hs_Nov30toDec06_df <- data.frame(contact_data_hs_Nov30toDec06)
    
    #using unioin to bind the rows of the contact_data_hs_df (historic data) contact_data_hs_new_df (new data)
    contact_data_hs_df <- union_all(contact_data_hs_Nov30toDec06_df, contact_data_hs_df)
    
    #subsetting to drop NA values for Asset 1 result 
    asset_1_contact_data_hs_df <- subset(contact_data_hs_df, !is.na(contact_data_hs_df$Style.type))
    
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(asset_1_contact_data_hs_df)){
        if (grepl("really", asset_1_contact_data_hs_df$Did.we.get.your.wedding.style.right.[i])){
            asset_1_contact_data_hs_df$Asset.feedback[i] <- "Neutral"}
        else if (grepl("No", asset_1_contact_data_hs_df$Did.we.get.your.wedding.style.right.[i])){
            asset_1_contact_data_hs_df$Asset.feedback[i] <- "Disagree"}
        else if (grepl("Yes", asset_1_contact_data_hs_df$Did.we.get.your.wedding.style.right.[i])){
            asset_1_contact_data_hs_df$Asset.feedback[i] <- "Agree"}
        else {asset_1_contact_data_hs_df$Asset.feedback[i] <- "Other"}
    }
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(asset_1_contact_data_hs_df)){
        if (asset_1_contact_data_hs_df$Style.type[i] == "Cool, Bold and Classic"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 1"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Dynamic, Rustic and Warm"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 2"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Fun, Eclectic and Vibrant"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 3"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Soft, Light and Timeless"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 4"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Modern, Simple and Subdued"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 5"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Modern with Eclectic Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 6"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Modern with Warm Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 7"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Rustic with Classic Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 8"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Timeless with Modern Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 9"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Timeless with Traditional Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 10"}
        else if (asset_1_contact_data_hs_df$Style.type[i] == "Vibrant with Cultural Influence"){
            asset_1_contact_data_hs_df$Asset.result[i] <- "Asset Result 11"}
        else {asset_1_contact_data_hs_df$Asset.result[i] <- "Other"}
    }
    
    
    #subsetting to drop NA values for Asset 1 result 
    asset_1_feedback_contact_data_hs_df <- subset(asset_1_contact_data_hs_df, asset_1_contact_data_hs_df$Asset.feedback != "Other")
    
    
    
    ############################
    # Reding HubSpot Deal Data #
    ############################
    
    #reading HubSpot's deal data 
    deal_data_hs <- read_excel("hubspot-deals-2020-11-15.xlsx")
    #converting the table to a dataframe
    deal_data_hs_df <- data.frame(deal_data_hs)
    #dropping na rows in the User.Type column 
    deal_data_hs_df <- subset(deal_data_hs_df, !is.na(deal_data_hs_df$User.Type))
    
    
    #reading the data for the most recent week - Nov 16 - 22
    deal_data_hs_Nov16toNov22 <- read_excel("hubspot-deals-Nov-16-2020-to-Nov-22-2020.xlsx")
    #converting the table to a dataframe 
    deal_data_hs_Nov16toNov22_df <- data.frame(deal_data_hs_Nov16toNov22)
    
    #using unioin to bind the rows of the deal_data_hs_df (historic data) deal_data_hs_new_df (new data)
    deal_data_hs_df <- union_all(deal_data_hs_Nov16toNov22_df, deal_data_hs_df)
    
    
    #reading the data for the most recent week - Nov 23 - 29
    deal_data_hs_Nov23toNov29 <- read_excel("hubspot-deals-Nov-23-2020-to-Nov-29-2020.xlsx")
    #converting the table to a dataframe 
    deal_data_hs_Nov23toNov29_df <- data.frame(deal_data_hs_Nov23toNov29)
    
    #using unioin to bind the rows of the deal_data_hs_df (historic data) deal_data_hs_new_df (new data)
    deal_data_hs_df <- union_all(deal_data_hs_Nov23toNov29_df, deal_data_hs_df)
    
    
    #reading the data for the most recent week - Nov 30 - Dec 06
    deal_data_hs_Nov30toDec06 <- read_excel("hubspot-deals-Nov-30-2020-to-Dec-06-2020.xlsx")
    #converting the table to a dataframe 
    deal_data_hs_Nov30toDec06_df <- data.frame(deal_data_hs_Nov30toDec06)
    
    #using unioin to bind the rows of the deal_data_hs_df (historic data) deal_data_hs_new_df (new data)
    deal_data_hs_df <- union_all(deal_data_hs_Nov30toDec06_df, deal_data_hs_df)
    
    
    
    
    ###########################################################################################################################################
    
    
    ##############################################################
    # Editing the Facebook Campaign Names to make them anonymous #
    ##############################################################
    
    #########################
    # Editing Facebook Data #
    #########################
    
    
    ####################################
    # Overall Campaign Performance Tab #
    ####################################
    
    #getting the total amount spent on ads 
    total_ad_spent_sum <- sum(facebook_platform_df$Amount.Spent..USD.)
    
    #using for loop to create new facebook.conversion binary column to place a 1 if a facebook conversion was done and a 0 if no conversion was made 
    #Completion of the Style Quiz, Budget Quiz, or Venue Quiz were taken into account as conversions 
    for (i in 1:nrow(contact_data_hs_df)){
        if (!is.na(contact_data_hs_df$Style.type[i])){
            contact_data_hs_df$Ad.Conversion[i] <- 1}
        
        else if (!is.na(contact_data_hs_df$Total.Budget[i])){
            contact_data_hs_df$Ad.Conversion[i] <- 1}
        
        else if (!is.na(contact_data_hs_df$Venue.Quiz.Results.Score[i])){
            contact_data_hs_df$Ad.Conversion[i] <- 1}
        
        else {contact_data_hs_df$Ad.Conversion[i] <- 0}
    }
    
    #getting the total sum of conversions 
    ad_conversions_sum <- sum(contact_data_hs_df$Ad.Conversion, na.rm = TRUE)
    
    #calculating the ratio of conversions per dollar spent 
    spent_to_conversion_ratio <- paste((total_ad_spent_sum/total_ad_spent_sum),":", round(ad_conversions_sum/total_ad_spent_sum, 3))
    
    
    ###########################
    # Cost-Per-Conversion Tab #
    ###########################
    
    #subsetting the facebook dataframe to create a new with only the active campaigns 
    facebook_platform_active_df <- subset(facebook_platform_df, facebook_platform_df$ActiveCampaigns != "Inactive Campaigns")
    #filter(facebook_platform_df, grepl("active", Delivery.Status))
    
    
    #subsetting the facebook dataframe to only include the campaign name, amount spent per campaign, and date 
    facebook_cpc_vars <- c("Campaign.Name..", "Campaign.Name", "Day", "Amount.Spent..USD.", "Results", "Cost.per.Result",
                           "Unique.Link.Clicks", "Cost.per.Unique.Link.Click")
    
    #this dataframe will be then concatenated with the style quiz conversions data from HubSpot
    facebook_cpc <- facebook_platform_df[facebook_cpc_vars]
    
    #arranging the conatacts in descending order to subset the date range of the week of 7th to th3 14th of September
    facebook_cpc <- facebook_cpc %>% arrange(desc(Day))
    
    #converting Day column to a date format
    facebook_cpc$Day <- as.Date(facebook_cpc$Day)
    
    
    
    ##############################################################################################################################################
    
    #slicing the dataframe to only include records from the week of the Nov 30 to Dec 02
    facebook_cpc_week_Nov30toDec02 <- facebook_cpc %>%
        filter(Day >= '2020-11-30' & Day <= '2020-12-02')
    
    #subsetting the week facebook data for only style quiz ads 
    facebook_cpc_week_Nov30toDec02_style <- filter(facebook_cpc_week_Nov30toDec02, grepl("Style", Campaign.Name))
    
    #subsetting the week facebook data for only budget quiz ads 
    facebook_cpc_week_Nov30toDec02_budget <- filter(facebook_cpc_week_Nov30toDec02, grepl("Budget", Campaign.Name))
    
    #subsetting the week facebook data for only venue quiz ads 
    facebook_cpc_week_Nov30toDec02_venue <- filter(facebook_cpc_week_Nov30toDec02, grepl("Venue", Campaign.Name))

    
    
    
    #slicing the dataframe to only include records from the week of the Nov 23 to Nov 29
    facebook_cpc_week_Nov23toNov29 <- facebook_cpc %>%
        filter(Day >= '2020-11-23' & Day <= '2020-11-29')
    
    #subsetting the week facebook data for only style quiz ads 
    facebook_cpc_week_Nov23toNov29_style <- filter(facebook_cpc_week_Nov23toNov29, grepl("Style", Campaign.Name))
    
    #subsetting the week facebook data for only budget quiz ads 
    facebook_cpc_week_Nov23toNov29_budget <- filter(facebook_cpc_week_Nov23toNov29, grepl("Budget", Campaign.Name))
    
    #subsetting the week facebook data for only venue quiz ads 
    facebook_cpc_week_Nov23toNov29_venue <- filter(facebook_cpc_week_Nov23toNov29, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 16 to Nov 22
    facebook_cpc_week_Nov16toNov22 <- facebook_cpc %>%
        filter(Day >= '2020-11-16' & Day <= '2020-11-22')
    
    #subsetting the week facebook data for only style quiz ads 
    facebook_cpc_week_Nov16toNov22_style <- filter(facebook_cpc_week_Nov16toNov22, grepl("Style", Campaign.Name))
    
    #subsetting the week facebook data for only budget quiz ads 
    facebook_cpc_week_Nov16toNov22_budget <- filter(facebook_cpc_week_Nov16toNov22, grepl("Budget", Campaign.Name))
    
    #subsetting the week facebook data for only venue quiz ads 
    facebook_cpc_week_Nov16toNov22_venue <- filter(facebook_cpc_week_Nov16toNov22, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 09 to Nov 15
    facebook_cpc_week_Nov09toNov15 <- facebook_cpc %>%
        filter(Day >= '2020-11-09' & Day <= '2020-11-15')
    
    #subsetting the week of Nov 02 to Nov 08 facebook data for only style quiz ads 
    facebook_cpc_week_Nov09toNov15_style <- filter(facebook_cpc_week_Nov09toNov15, grepl("Style", Campaign.Name))
    
    #subsetting the week of  Nov 02 to Nov 08 facebook data for only budget quiz ads 
    facebook_cpc_week_Nov09toNov15_budget <- filter(facebook_cpc_week_Nov09toNov15, grepl("Budget", Campaign.Name))
    
    #subsetting the week of  Nov 02 to Nov 08 facebook data for only venue quiz ads 
    facebook_cpc_week_Nov09toNov15_venue <- filter(facebook_cpc_week_Nov09toNov15, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 02 to Nov 08
    facebook_cpc_week_Nov02toNov08 <- facebook_cpc %>%
        filter(Day >= '2020-11-02' & Day <= '2020-11-08')
    
    #subsetting the week of Nov 02 to Nov 08 facebook data for only style quiz ads 
    facebook_cpc_week_Nov02toNov08_style <- filter(facebook_cpc_week_Nov02toNov08, grepl("Style", Campaign.Name))
    facebook_cpc_week_Nov02toNov08_style <- filter(facebook_cpc_week_Nov02toNov08_style, !grepl("Budget quiz_V4_Retarget_Style_Competers", Campaign.Name))
    
    #subsetting the week of  Nov 02 to Nov 08 facebook data for only budget quiz ads 
    facebook_cpc_week_Nov02toNov08_budget <- filter(facebook_cpc_week_Nov02toNov08, grepl("Budget", Campaign.Name))
    
    #subsetting the week of  Nov 02 to Nov 08 facebook data for only venue quiz ads 
    facebook_cpc_week_Nov02toNov08_venue <- filter(facebook_cpc_week_Nov02toNov08, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 26 to Nov 01
    facebook_cpc_week_Oct26toNov01 <- facebook_cpc %>%
        filter(Day >= '2020-10-26' & Day <= '2020-11-01')
    
    #subsetting the week of Oct 26 to Nov 01 facebook data for only style quiz ads 
    facebook_cpc_week_Oct26toNov01_style <- filter(facebook_cpc_week_Oct26toNov01, grepl("Style", Campaign.Name))
    facebook_cpc_week_Oct26toNov01_style <- filter(facebook_cpc_week_Oct26toNov01_style, !grepl("Budget quiz_V4_Retarget_Style_Competers", Campaign.Name))
    
    #subsetting the week of  Oct 26 to Nov 01 facebook data for only budget quiz ads 
    facebook_cpc_week_Oct26toNov01_budget <- filter(facebook_cpc_week_Oct26toNov01, grepl("Budget", Campaign.Name))
    
    #subsetting the week of  Oct 26 to Nov 01 facebook data for only venue quiz ads 
    facebook_cpc_week_Oct26toNov01_venue <- filter(facebook_cpc_week_Oct26toNov01, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 19 to Oct 25
    facebook_cpc_week_Oct19toOct25 <- facebook_cpc %>%
        filter(Day >= '2020-10-19' & Day <= '2020-10-25')
    
    #subsetting the week of oct 19 to 25 facebook data for only style quiz ads 
    facebook_cpc_week_Oct19toOct25_style <- filter(facebook_cpc_week_Oct19toOct25, grepl("Style", Campaign.Name))
    facebook_cpc_week_Oct19toOct25_style <- filter(facebook_cpc_week_Oct19toOct25_style, !grepl("Budget quiz_V4_Retarget_Style_Competers", Campaign.Name))
    
    #subsetting the week of  Oct 19 to Oct 25 facebook data for only budget quiz ads 
    facebook_cpc_week_Oct19toOct25_budget <- filter(facebook_cpc_week_Oct19toOct25, grepl("Budget", Campaign.Name))
    
    #subsetting the week of  Oct 19 to Oct 25 facebook data for only venue quiz ads 
    facebook_cpc_week_Oct19toOct25_venue <- filter(facebook_cpc_week_Oct19toOct25, grepl("Venue", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 12 to Oct 18
    facebook_cpc_week_Oct12toOct18 <- facebook_cpc %>%
        filter(Day >= '2020-10-12' & Day <= '2020-10-18')
    
    #subsetting the week of oct 12 to 18 facebook data for only style quiz ads 
    facebook_cpc_week_Oct12toOct18_style <- filter(facebook_cpc_week_Oct12toOct18, grepl("Style", Campaign.Name))
    facebook_cpc_week_Oct12toOct18_style <- filter(facebook_cpc_week_Oct12toOct18_style, !grepl("Budget quiz_V4_Retarget_Style_Competers", Campaign.Name))
    
    #subsetting the week of  Oct 12 to Oct 18 facebook data for only budget quiz ads 
    facebook_cpc_week_Oct12toOct18_budget <- filter(facebook_cpc_week_Oct12toOct18, grepl("Budget", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 05 to Oct 11
    facebook_cpc_week_Oct05toOct11 <- facebook_cpc %>%
        filter(Day >= '2020-10-05' & Day <= '2020-10-11')
    
    #subsetting the week of Oct 05 to Oct 11 facebook data for only style quiz ads 
    facebook_cpc_week_Oct05toOct11_style <- filter(facebook_cpc_week_Oct05toOct11, grepl("Style", Campaign.Name))
    facebook_cpc_week_Oct05toOct11_style <- filter(facebook_cpc_week_Oct05toOct11_style, !grepl("Budget quiz_V4_Retarget_Style_Competers", Campaign.Name))
    
    #subsetting the week of Oct 05 to Oct 11 facebook data for only budget quiz ads 
    facebook_cpc_week_Oct05toOct11_budget <- filter(facebook_cpc_week_Oct05toOct11, grepl("Budget", Campaign.Name))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Sep 28th to Oct 04
    facebook_cpc_week_sep28tooct04 <- facebook_cpc %>%
        filter(Day >= '2020-09-28' & Day <= '2020-10-04')
    
    #subsetting the week of sep 28 to oct 04 facebook data for only style quiz ads 
    facebook_cpc_week_sep28tooct04_style <- filter(facebook_cpc_week_sep28tooct04, grepl("Style", Campaign.Name))
    
    #subsetting the week of sep 28 to oct 04 facebook data for only budget quiz ads 
    facebook_cpc_week_sep28tooct04_budget <- filter(facebook_cpc_week_sep28tooct04, grepl("Budget", Campaign.Name))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the 21th to the 27th of September
    facebook_cpc_week_sep21to27 <- facebook_cpc %>%
        filter(Day >= '2020-09-21' & Day <= '2020-09-27')
    
    #subsetting the week 21 to 27 facebook data for only style quiz ads 
    facebook_cpc_week_sep21to27_style <- filter(facebook_cpc_week_sep21to27, grepl("Style", Campaign.Name))
    
    #subsetting the week 21 to 27 facebook data for only budget quiz ads 
    facebook_cpc_week_sep21to27_budget <- filter(facebook_cpc_week_sep21to27, grepl("Budget", Campaign.Name))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the 14th to the 20th of September
    facebook_cpc_week_sep14to20 <- facebook_cpc %>%
        filter(Day >= '2020-09-14' & Day <= '2020-09-20')
    
    #subsetting the week 14 to 20 facebook data for only style quiz ads 
    facebook_cpc_week_sep14to20_style <- filter(facebook_cpc_week_sep14to20, grepl("Style", Campaign.Name))
    
    #subsetting the week 14 to 20 facebook data for only budget quiz ads 
    facebook_cpc_week_sep14to20_budget <- filter(facebook_cpc_week_sep14to20, grepl("Budget", Campaign.Name))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the 7th to the 13th of September
    facebook_cpc_week7to13 <- facebook_cpc %>%
        filter(Day >= '2020-09-07' & Day <= '2020-09-13')
    
    #subsetting the week 7 to 13 facebook data for only style quiz ads 
    facebook_cpc_week7to13_style <- filter(facebook_cpc_week7to13, grepl("Style", Campaign.Name))
    
    #subsetting the week 7 to 13 facebook data for only budget quiz ads 
    facebook_cpc_week7to13_budget <- filter(facebook_cpc_week7to13, grepl("Budget", Campaign.Name))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the August 31st to September 6th 
    facebook_cpc_week31to6 <- facebook_cpc %>%
        filter(Day >= '2020-08-31' & Day <= '2020-09-06')
    
    #subsetting the week of august 31 to Sep 06 facebook data for only style quiz ads 
    facebook_cpc_week31to6_style <- filter(facebook_cpc_week31to6, grepl("Style", Campaign.Name))
    
    #subsetting the week of august 31 to Sep 06 facebook data for only budget quiz ads 
    facebook_cpc_week31to6_budget <- filter(facebook_cpc_week31to6, grepl("Budget", Campaign.Name))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the August 24 to August 30
    facebook_cpc_week24to30 <- facebook_cpc %>%
        filter(Day >= '2020-08-24' & Day <= '2020-08-30')
    
    #subsetting the week 7 to 14 facebook data for only style quiz ads 
    facebook_cpc_week24to30_style <- filter(facebook_cpc_week24to30, grepl("Style", Campaign.Name))
    
    #subsetting the week 7 to 14 facebook data for only budget quiz ads 
    facebook_cpc_week24to30_budget <- filter(facebook_cpc_week24to30, grepl("Budget", Campaign.Name))
    
    
    
    ##############################################################################################################################################
    
    ####################
    # Editing CRM Data #
    ###################
    
    #omitting all rows with NAs for User Type
    online_contacts_hs_df <- contact_data_hs_df[!is.na(contact_data_hs_df$User.Type),]
    
    
    #subsetting the HS contacts dataframe to only include cpc variables
    contacts_cpc_vars <- c("Create.Date", "User.Type", "Style.type",
                           "Total.Budget", "First.Name", "Last.Name",
                           "Venue.Quiz.Results.Score")
    
    #saving the dataframe with onlt the required columns 
    contacts_cpc <- contact_data_hs_df[contacts_cpc_vars]
    
    #arranging the conatacts in descending order
    contacts_cpc <- contacts_cpc %>% arrange(desc(Create.Date))
    
    
    #splitting the Create.Date column into two to be able to subset the using date ranges 
    contacts_cpc_split <- str_split_fixed(contacts_cpc$Create.Date, " ", 2)
    
    #concatenating the split columns with the contacts_cpc dataframe
    contacts_cpc <- cbind(contacts_cpc, contacts_cpc_split)
    
    #Renaming the split columns as Date and Time 
    names(contacts_cpc)[names(contacts_cpc)==1] <- "Date"
    names(contacts_cpc)[names(contacts_cpc)==2] <- "Time"
    
    #converting Date column to a date format
    contacts_cpc$Date <- as.Date(contacts_cpc$Date)
    
    
    ##############################################################################################################################################
    
    #slicing the dataframe to only include records from the week of the Nov 30 to Dec 02
    contacts_cpc_week_Nov30toDec02 <- contacts_cpc %>%
        filter(Date >= '2020-11-30' & Date <= '2020-12-02')
    
    #slicing the dataframe to only include records from the week of the Nov 23 to Nov 29
    contacts_cpc_week_Nov23toNov29 <- contacts_cpc %>%
        filter(Date >= '2020-11-23' & Date <= '2020-11-29')
    
    #slicing the dataframe to only include records from the week of the Nov 16 to Nov 22
    contacts_cpc_week_Nov16toNov22 <- contacts_cpc %>%
        filter(Date >= '2020-11-16' & Date <= '2020-11-22')
    
    #slicing the dataframe to only include records from the week of the Nov 09 to Nov 15
    contacts_cpc_week_Nov09toNov15 <- contacts_cpc %>%
        filter(Date >= '2020-11-09' & Date <= '2020-11-15')
    
    #slicing the dataframe to only include records from the week of the Nov 02 to Nov 08
    contacts_cpc_week_Nov02toNov08 <- contacts_cpc %>%
        filter(Date >= '2020-11-02' & Date <= '2020-11-08')
    
    #slicing the dataframe to only include records from the week of the Oct 26 to Nov 01
    contacts_cpc_week_Oct26toNov01 <- contacts_cpc %>%
        filter(Date >= '2020-10-26' & Date <= '2020-11-01')
    
    #slicing the dataframe to only include records from the week of the Oct 19 to Oct 25
    contacts_cpc_week_Oct19toOct25 <- contacts_cpc %>%
        filter(Date >= '2020-10-19' & Date <= '2020-10-25')
    
    #slicing the dataframe to only include records from the week of the Oct 12 to Oct 18
    contacts_cpc_week_Oct12toOct18 <- contacts_cpc %>%
        filter(Date >= '2020-10-12' & Date <= '2020-10-18')
    
    #slicing the dataframe to only include records from the week of the Oct 05 to Oct 11
    contacts_cpc_week_Oct12toOct18 <- contacts_cpc %>%
        filter(Date >= '2020-10-12' & Date <= '2020-10-18')
    
    #slicing the dataframe to only include records from the week of the Oct 05 to Oct 11
    contacts_cpc_week_Oct05toOct11 <- contacts_cpc %>%
        filter(Date >= '2020-10-05' & Date <= '2020-10-11')
    
    #slicing the dataframe to only include records from the week of the Sep 28th to tOct 04
    contacts_cpc_week_sep28tooct04 <- contacts_cpc %>%
        filter(Date >= '2020-09-28' & Date <= '2020-10-04')
    
    #slicing the dataframe to only include records from the week of the 21th to the 27th of September
    contacts_cpc_week_sep21to27 <- contacts_cpc %>%
        filter(Date >= '2020-09-21' & Date <= '2020-09-27')
    
    #slicing the dataframe to only include records from the week of the 14th to the 20th of September
    contacts_cpc_week_sep14to20 <- contacts_cpc %>%
        filter(Date >= '2020-09-14' & Date <= '2020-09-20')
    
    #slicing the dataframe to only include records from the week of the 7th to the 13th of September
    contacts_cpc_week7to13 <- contacts_cpc %>%
        filter(Date >= '2020-09-07' & Date <= '2020-09-13')
    
    #slicing the dataframe to only include records from the week of the August 31st to September 6th 
    contacts_cpc_week31to6 <- contacts_cpc %>%
        filter(Date >= '2020-08-31' & Date <= '2020-09-06')
    
    #slicing the dataframe to only include records from the week of the August 24 to August 30
    contacts_cpc_week24to30 <- contacts_cpc %>%
        filter(Date >= '2020-08-24' & Date <= '2020-08-30')
    
    
    
    
    ##############################################################################################################################################
    
    #####################
    # Editing Deal Data #
    #####################
    
    #subsetting the HS deals dataframe to only include cpc variables
    deal_cpc_vars <- c("Create.Date", "Deal.Name", "User.Type",
                       "Style.type1", "Total.Budget..Bridge.",
                       "Venue.Quiz.Results.Score")
    
    ##saving the dataframe with only the required columns 
    deals_cpc <- deal_data_hs_df[deal_cpc_vars]
    
    #splitting the Create.Date column into two to be able to subset the using date ranges 
    deals_cpc_split <- str_split_fixed(deals_cpc$Create.Date, " ", 2)
    
    #concatenating the split columns with the deals_cpc dataframe
    deals_cpc <- cbind(deals_cpc, deals_cpc_split)
    
    #Renaming the split columns as Date and Time 
    names(deals_cpc)[names(deals_cpc)==1] <- "Date"
    names(deals_cpc)[names(deals_cpc)==2] <- "Time"
    
    #converting Date column to a date format
    deals_cpc$Date <- as.Date(deals_cpc$Date)
    
    #arranging the conatacts in descending order
    deals_cpc <- deals_cpc %>% arrange(desc(Date))
    
    
    ##############################################################################################################################################
    
    #slicing the dataframe to only include records from the week of the Nov 30 to Dec 02
    deals_cpc_week_Nov30toDec02 <- deals_cpc %>%
        filter(Date >= '2020-11-30' & Date <= '2020-12-02')
    
    #slicing the dataframe to only include records from the week of the Nov 23 to Nov 29
    deals_cpc_week_Nov23toNov29 <- deals_cpc %>%
        filter(Date >= '2020-11-23' & Date <= '2020-11-29')
    
    #slicing the dataframe to only include records from the week of the Nov 16 to Nov 22
    deals_cpc_week_Nov16toNov22 <- deals_cpc %>%
        filter(Date >= '2020-11-16' & Date <= '2020-11-22')
    
    #slicing the dataframe to only include records from the week of the Nov 09 to Nov 15
    deals_cpc_week_Nov09toNov15 <- deals_cpc %>%
        filter(Date >= '2020-11-09' & Date <= '2020-11-15')
    
    
    #slicing the dataframe to only include records from the week of the Nov 02 to Nov 08
    deals_cpc_week_Nov02toNov08 <- deals_cpc %>%
        filter(Date >= '2020-11-02' & Date <= '2020-11-08')
    
    
    #slicing the dataframe to only include records from the week of the Oct 26 to Nov 01
    deals_cpc_week_Oct26toNov01 <- deals_cpc %>%
        filter(Date >= '2020-10-26' & Date <= '2020-11-01')
    
    
    #slicing the dataframe to only include records from the week of the Oct 19 to Oct 25
    deals_cpc_week_Oct19toOct25 <- deals_cpc %>%
        filter(Date >= '2020-10-19' & Date <= '2020-10-25')
    
    #slicing the dataframe to only include records from the week of the Oct 12 to Oct 18
    deals_cpc_week_Oct12toOct18 <- deals_cpc %>%
        filter(Date >= '2020-10-12' & Date <= '2020-10-18')
    
    
    #slicing the dataframe to only include records from the week of the Oct 05 to Oct 11
    deals_cpc_week_Oct05toOct11 <- deals_cpc %>%
        filter(Date >= '2020-10-05' & Date <= '2020-10-11')
    
    #slicing the dataframe to only include records from the week of the Sep 28th to Oct 04
    deals_cpc_week_sep28tooct04 <- deals_cpc %>%
        filter(Date >= '2020-09-28' & Date <= '2020-10-04')
    
    #slicing the dataframe to only include records from the week of the 21th to the 27th of September
    deals_cpc_week_sep21to27 <- deals_cpc %>%
        filter(Date >= '2020-09-21' & Date <= '2020-09-27')
    
    #slicing the dataframe to only include records from the week of the 14th to the 20th of September
    deals_cpc_week_sep14to20 <- deals_cpc %>%
        filter(Date >= '2020-09-14' & Date <= '2020-09-20')
    
    #slicing the dataframe to only include records from the week of the 7th to the 13th of September
    deals_cpc_week7to13 <- deals_cpc %>%
        filter(Date >= '2020-09-07' & Date <= '2020-09-13')
    
    #slicing the dataframe to only include records from the week of the August 31st to September 6th 
    deals_cpc_week31to6 <- deals_cpc %>%
        filter(Date >= '2020-08-31' & Date <= '2020-09-06')
    
    #slicing the dataframe to only include records from the week of the August 24 to August 30
    deals_cpc_week24to30 <- deals_cpc %>%
        filter(Date >= '2020-08-24' & Date <= '2020-08-30')
    
    
    ##############################################################################################################################################
    
    
    ##################################
    # Venue Quiz Cost-Per-Conversion #
    ##################################
    
    #calculating the cost per venue quiz conversion ratio - week Nov 30 to Dec 02
    amount_spent_sum_week_Nov30toDec02_venue <- round(sum(facebook_cpc_week_Nov30toDec02_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Nov30toDec02 <- sum(!is.na(contacts_cpc_week_Nov30toDec02$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Nov30toDec02 <- paste(round(amount_spent_sum_week_Nov30toDec02_venue/venue_quiz_sum_week_Nov30toDec02, 2),":", (venue_quiz_sum_week_Nov30toDec02/venue_quiz_sum_week_Nov30toDec02))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Nov30toDec02 <- sum(facebook_cpc_week_Nov30toDec02_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Nov30toDec02 <- round(sum(facebook_cpc_week_Nov30toDec02_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Nov30toDec02 <- scales::percent((venue_quiz_sum_week_Nov30toDec02/venue_link_clicks_Nov30toDec02), accuracy = 1)
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Nov 23 to Nov 29
    amount_spent_sum_week_Nov23toNov29_venue <- round(sum(facebook_cpc_week_Nov23toNov29_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Nov23toNov29 <- sum(!is.na(contacts_cpc_week_Nov23toNov29$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Nov23toNov29 <- paste(round(amount_spent_sum_week_Nov23toNov29_venue/venue_quiz_sum_week_Nov23toNov29, 2),":", (venue_quiz_sum_week_Nov23toNov29/venue_quiz_sum_week_Nov23toNov29))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Nov23toNov29 <- sum(facebook_cpc_week_Nov23toNov29_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Nov23toNov29 <- round(sum(facebook_cpc_week_Nov23toNov29_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Nov23toNov29 <- scales::percent((venue_quiz_sum_week_Nov23toNov29/venue_link_clicks_Nov23toNov29), accuracy = 1)
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Nov 16 to Nov 22
    amount_spent_sum_week_Nov16toNov22_venue <- round(sum(facebook_cpc_week_Nov16toNov22_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Nov16toNov22 <- sum(!is.na(contacts_cpc_week_Nov16toNov22$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Nov16toNov22 <- paste(round(amount_spent_sum_week_Nov16toNov22_venue/venue_quiz_sum_week_Nov16toNov22, 2),":", (venue_quiz_sum_week_Nov16toNov22/venue_quiz_sum_week_Nov16toNov22))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Nov16toNov22 <- sum(facebook_cpc_week_Nov16toNov22_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Nov16toNov22 <- round(sum(facebook_cpc_week_Nov16toNov22_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Nov16toNov22 <- scales::percent((venue_quiz_sum_week_Nov16toNov22/venue_link_clicks_Nov16toNov22), accuracy = 1)
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Nov 09 to Nov 15
    amount_spent_sum_week_Nov09toNov15_venue <- round(sum(facebook_cpc_week_Nov09toNov15_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Nov09toNov15 <- sum(!is.na(contacts_cpc_week_Nov09toNov15$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Nov09toNov15 <- paste(round(amount_spent_sum_week_Nov09toNov15_venue/venue_quiz_sum_week_Nov09toNov15, 2),":", (venue_quiz_sum_week_Nov09toNov15/venue_quiz_sum_week_Nov09toNov15))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Nov09toNov15 <- sum(facebook_cpc_week_Nov09toNov15_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Nov09toNov15 <- round(sum(facebook_cpc_week_Nov09toNov15_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Nov09toNov15 <- scales::percent((venue_quiz_sum_week_Nov09toNov15/venue_link_clicks_Nov09toNov15), accuracy = 1)
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Nov 02 to Nov 08
    amount_spent_sum_week_Nov02toNov08_venue <- round(sum(facebook_cpc_week_Nov02toNov08_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Nov02toNov08 <- sum(!is.na(contacts_cpc_week_Nov02toNov08$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Nov02toNov08 <- paste(round(amount_spent_sum_week_Nov02toNov08_venue/venue_quiz_sum_week_Nov02toNov08, 2),":", (venue_quiz_sum_week_Nov02toNov08/venue_quiz_sum_week_Nov02toNov08))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Nov02toNov08 <- sum(facebook_cpc_week_Nov02toNov08_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Nov02toNov08 <- round(sum(facebook_cpc_week_Nov02toNov08_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Nov02toNov08 <- scales::percent((venue_quiz_sum_week_Nov02toNov08/venue_link_clicks_Nov02toNov08), accuracy = 1)
    
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Oct 26 to Nov 01
    amount_spent_sum_week_Oct26toNov01_venue <- round(sum(facebook_cpc_week_Oct26toNov01_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Oct26toNov01 <- sum(!is.na(contacts_cpc_week_Oct26toNov01$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Oct26toNov01 <- paste(round(amount_spent_sum_week_Oct26toNov01_venue/venue_quiz_sum_week_Oct26toNov01, 2),":", (venue_quiz_sum_week_Oct26toNov01/venue_quiz_sum_week_Oct26toNov01))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Oct26toNov01 <- sum(facebook_cpc_week_Oct26toNov01_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Oct26toNov01 <- round(sum(facebook_cpc_week_Oct26toNov01_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Oct26toNov01 <- scales::percent((venue_quiz_sum_week_Oct26toNov01/venue_link_clicks_Oct26toNov01), accuracy = 1)
    
    
    
    
    
    #calculating the cost per venue quiz conversion ratio - week Oct 19 to Oct 25
    amount_spent_sum_week_Oct19toOct25_venue <- round(sum(facebook_cpc_week_Oct19toOct25_venue$Amount.Spent..USD.), 0)
    venue_quiz_sum_week_Oct19toOct25 <- sum(!is.na(contacts_cpc_week_Oct19toOct25$Venue.Quiz.Results.Score))
    venue_quiz_to_spent_ratio_week_Oct19toOct25 <- paste(round(amount_spent_sum_week_Oct19toOct25_venue/venue_quiz_sum_week_Oct19toOct25, 2),":", (venue_quiz_sum_week_Oct19toOct25/venue_quiz_sum_week_Oct19toOct25))
    
    #calculating the total ad link clikcs 
    venue_link_clicks_Oct19toOct25 <- sum(facebook_cpc_week_Oct19toOct25_venue$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per click 
    venue_cost_per_click_Oct19toOct25 <- round(sum(facebook_cpc_week_Oct19toOct25_venue$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly venue ad click-to-conversion percent 
    venue_link_clicks_to_conversion_percent_Oct19toOct25 <- scales::percent((venue_quiz_sum_week_Oct19toOct25/venue_link_clicks_Oct19toOct25), accuracy = 1)
    
    
    
    
    #creating outout table to hold the cost per conversion results 
    spent_to_venue_quiz_ratio_table <- data.table("Date" = as.factor(c("November 30 - December 02", "November 23 - 29", "November 16 - 22",
                                                                       "November 09 - 15", "November 02 - 08", "October 26 - November 01",
                                                                       "October 19 - 25")),
                                                  "Cost(S)-Per-Conversion Ratio" = as.factor(c(venue_quiz_to_spent_ratio_week_Nov30toDec02,
                                                                                               venue_quiz_to_spent_ratio_week_Nov23toNov29,
                                                                                               venue_quiz_to_spent_ratio_week_Nov16toNov22,
                                                                                               venue_quiz_to_spent_ratio_week_Nov09toNov15,
                                                                                               venue_quiz_to_spent_ratio_week_Nov02toNov08,
                                                                                               venue_quiz_to_spent_ratio_week_Oct26toNov01,
                                                                                               venue_quiz_to_spent_ratio_week_Oct19toOct25)),
                                                  "Amount Spent ($)" = as.factor(c(amount_spent_sum_week_Nov30toDec02_venue,
                                                                                   amount_spent_sum_week_Nov23toNov29_venue,
                                                                                   amount_spent_sum_week_Nov16toNov22_venue,
                                                                                   amount_spent_sum_week_Nov09toNov15_venue,
                                                                                   amount_spent_sum_week_Nov02toNov08_venue,
                                                                                   amount_spent_sum_week_Oct26toNov01_venue,
                                                                                   amount_spent_sum_week_Oct19toOct25_venue)),
                                                  "Conversion Count" = as.factor(c(venue_quiz_sum_week_Nov30toDec02,
                                                                                   venue_quiz_sum_week_Nov23toNov29,
                                                                                   venue_quiz_sum_week_Nov16toNov22,
                                                                                   venue_quiz_sum_week_Nov09toNov15,
                                                                                   venue_quiz_sum_week_Nov02toNov08,
                                                                                   venue_quiz_sum_week_Oct26toNov01,
                                                                                   venue_quiz_sum_week_Oct19toOct25)),
                                                  "Ad Link Clicks" = as.factor(c(venue_link_clicks_Nov30toDec02,
                                                                                 venue_link_clicks_Nov23toNov29,
                                                                                 venue_link_clicks_Nov16toNov22,
                                                                                 venue_link_clicks_Nov09toNov15,
                                                                                 venue_link_clicks_Nov02toNov08,
                                                                                 venue_link_clicks_Oct26toNov01,
                                                                                 venue_link_clicks_Oct19toOct25)),
                                                  "Ad Click-To-Conversion Percent" = as.factor(c(venue_link_clicks_to_conversion_percent_Nov30toDec02,
                                                                                                 venue_link_clicks_to_conversion_percent_Nov23toNov29,
                                                                                                 venue_link_clicks_to_conversion_percent_Nov16toNov22,
                                                                                                 venue_link_clicks_to_conversion_percent_Nov09toNov15,
                                                                                                 venue_link_clicks_to_conversion_percent_Nov02toNov08,
                                                                                                 venue_link_clicks_to_conversion_percent_Oct26toNov01,
                                                                                                 venue_link_clicks_to_conversion_percent_Oct19toOct25)),
                                                  "Active Campaigns" = as.factor(c(" 'Asset 1 Ad Campaign 3' ",
                                                                                   " 'Asset 1 Ad Campaign 2' ",
                                                                                   " 'Asset 1 Ad Campaign 2' ",
                                                                                   " 'Asset 1 Ad Campaign 2' ",
                                                                                   " 'Asset 1 Ad Campaign 1' & 'Asset 1 Ad Campaign 2' ",
                                                                                   " 'Asset 1 Ad Campaign 1' ",
                                                                                   " 'Asset 1 Ad Campaign 1' ")))
    
    
    # spent_to_venue_quiz_ratio_table_1 <- spent_to_venue_quiz_ratio_table %>%
    #     dplyr::select("Date",
    #                   "ConversionCount", "AdLinkClicks",
    #                   "ActiveCampaigns") %>%
    #     gt()%>%
    #     tab_header(
    #         title = md("Cost-Per-Venue Quiz **Converison**"),
    #         subtitle = "Weekly cost($) per venue quiz conversion, with the total amount spent ONLY Venue Quiz Ads, and conversion count.")
    # 
    
    
    #summing all of the amount spent on Venue Quiz Ads after Aug 24, 2020
    total_amount_spent_after_Aug24_venue <- sum(amount_spent_sum_week_Nov30toDec02_venue,
                                                amount_spent_sum_week_Nov23toNov29_venue,
                                                amount_spent_sum_week_Nov16toNov22_venue,
                                                amount_spent_sum_week_Nov09toNov15_venue,
                                                amount_spent_sum_week_Nov02toNov08_venue,
                                                amount_spent_sum_week_Oct26toNov01_venue,
                                                amount_spent_sum_week_Oct19toOct25_venue)
    
    #getting the average amount spent on Venue Quiz Ads after Aug 24, 2020
    average_amount_spent_after_Aug24_venue <- total_amount_spent_after_Aug24_venue/7
    
    
    #summing the count of venue quiz conversions recorded after August 24, 2020 
    total_venue_conversions_after_Aug24 <- sum(venue_quiz_sum_week_Nov30toDec02,
                                               venue_quiz_sum_week_Nov23toNov29,
                                               venue_quiz_sum_week_Nov16toNov22,
                                               venue_quiz_sum_week_Nov09toNov15,
                                               venue_quiz_sum_week_Nov02toNov08,
                                               venue_quiz_sum_week_Oct26toNov01,
                                               venue_quiz_sum_week_Oct19toOct25)
    
    #getting the average count of venue quiz conversions recorded after August 24, 2020 
    average_venue_conversions_after_Aug24 <- total_venue_conversions_after_Aug24/7
    
    #calcualting the average cost-per-conversion ratio for EH ads after Aug 24, 2020
    average_cost_per_conversion_ratio_after_Aug24_venue <- paste(round(average_amount_spent_after_Aug24_venue/average_venue_conversions_after_Aug24, 2),":", (average_venue_conversions_after_Aug24/average_venue_conversions_after_Aug24))
    
    
    
    
    
    #calculating the percentage of quiz takers from our total unique link clicks 
    #Used in weekly report insights
    
    #getting the toal sum of link clicks for the venue quiz ads since Aug 24
    total_link_clicks_venue <- sum(sum(facebook_cpc_week_Nov30toDec02_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov23toNov29_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov16toNov22_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov09toNov15_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov02toNov08_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct26toNov01_venue$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct19toOct25_venue$Unique.Link.Clicks, na.rm = TRUE)) 
    
    #getting the average link clicks for the venue quiz ads since Aug 24
    average_link_clicks_venue <- total_link_clicks_venue/7
    
    #getting the total sum of venue conversions since Aug 24
    total_venue_quiz_conversions <- sum(venue_quiz_sum_week_Nov30toDec02,
                                        venue_quiz_sum_week_Nov23toNov29,
                                        venue_quiz_sum_week_Nov16toNov22,
                                        venue_quiz_sum_week_Nov09toNov15,
                                        venue_quiz_sum_week_Nov02toNov08,
                                        venue_quiz_sum_week_Oct26toNov01,
                                        venue_quiz_sum_week_Oct19toOct25)
    
    #getting the average sum of venue quiz conversions since Aug 24
    average_venue_quiz_conversions <- total_venue_quiz_conversions/7
    
    
    venue_link_clicks_to_conversion_percent <- scales::percent((average_venue_quiz_conversions/average_link_clicks_venue), accuracy = 1)
    
    
    ###########################################################################################################################################################################################################################################
    
    
    ##################################
    # Style Quiz Cost-Per-Conversion #
    ##################################
    
    #calculating the cost per style quiz conversion ratio - week Nov 30 to Dec 02
    amount_spent_sum_week_Nov30toDec02_style <- round(sum(facebook_cpc_week_Nov30toDec02_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Nov30toDec02 <- sum(!is.na(deals_cpc_week_Nov30toDec02$Style.type))
    style_quiz_to_spent_ratio_week_Nov30toDec02 <- paste(round(amount_spent_sum_week_Nov30toDec02_style/style_quiz_sum_week_Nov30toDec02, 2),":", (style_quiz_sum_week_Nov30toDec02/style_quiz_sum_week_Nov30toDec02))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Nov30toDec02 <- sum(facebook_cpc_week_Nov30toDec02_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Nov30toDec02 <- round(sum(facebook_cpc_week_Nov30toDec02_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Nov30toDec02 <- scales::percent((style_quiz_sum_week_Nov30toDec02/style_link_clicks_Nov30toDec02), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Nov 23 to Nov 29
    amount_spent_sum_week_Nov23toNov29_style <- round(sum(facebook_cpc_week_Nov23toNov29_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Nov23toNov29 <- sum(!is.na(deals_cpc_week_Nov23toNov29$Style.type))
    style_quiz_to_spent_ratio_week_Nov23toNov29 <- paste(round(amount_spent_sum_week_Nov23toNov29_style/style_quiz_sum_week_Nov23toNov29, 2),":", (style_quiz_sum_week_Nov23toNov29/style_quiz_sum_week_Nov23toNov29))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Nov23toNov29 <- sum(facebook_cpc_week_Nov23toNov29_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Nov23toNov29 <- round(sum(facebook_cpc_week_Nov23toNov29_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Nov23toNov29 <- scales::percent((style_quiz_sum_week_Nov23toNov29/style_link_clicks_Nov23toNov29), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Nov 16 to Nov 22
    amount_spent_sum_week_Nov16toNov22_style <- round(sum(facebook_cpc_week_Nov16toNov22_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Nov16toNov22 <- sum(!is.na(deals_cpc_week_Nov16toNov22$Style.type))
    style_quiz_to_spent_ratio_week_Nov16toNov22 <- paste(round(amount_spent_sum_week_Nov16toNov22_style/style_quiz_sum_week_Nov16toNov22, 2),":", (style_quiz_sum_week_Nov16toNov22/style_quiz_sum_week_Nov16toNov22))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Nov16toNov22 <- sum(facebook_cpc_week_Nov16toNov22_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Nov16toNov22 <- round(sum(facebook_cpc_week_Nov16toNov22_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Nov16toNov22 <- scales::percent((style_quiz_sum_week_Nov16toNov22/style_link_clicks_Nov16toNov22), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Nov 09 to Nov 15
    amount_spent_sum_week_Nov09toNov15_style <- round(sum(facebook_cpc_week_Nov09toNov15_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Nov09toNov15 <- sum(!is.na(deals_cpc_week_Nov09toNov15$Style.type))
    style_quiz_to_spent_ratio_week_Nov09toNov15 <- paste(round(amount_spent_sum_week_Nov09toNov15_style/style_quiz_sum_week_Nov09toNov15, 2),":", (style_quiz_sum_week_Nov09toNov15/style_quiz_sum_week_Nov09toNov15))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Nov09toNov15 <- sum(facebook_cpc_week_Nov09toNov15_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Nov09toNov15 <- round(sum(facebook_cpc_week_Nov09toNov15_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Nov09toNov15 <- scales::percent((style_quiz_sum_week_Nov09toNov15/style_link_clicks_Nov09toNov15), accuracy = 1)
    
    
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Nov 02 to Nov 08
    amount_spent_sum_week_Nov02toNov08_style <- round(sum(facebook_cpc_week_Nov02toNov08_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Nov02toNov08 <- sum(!is.na(deals_cpc_week_Nov02toNov08$Style.type))
    style_quiz_to_spent_ratio_week_Nov02toNov08 <- paste(round(amount_spent_sum_week_Nov02toNov08_style/style_quiz_sum_week_Nov02toNov08, 2),":", (style_quiz_sum_week_Nov02toNov08/style_quiz_sum_week_Nov02toNov08))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Nov02toNov08 <- sum(facebook_cpc_week_Nov02toNov08_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Nov02toNov08 <- round(sum(facebook_cpc_week_Nov02toNov08_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Nov02toNov08 <- scales::percent((style_quiz_sum_week_Nov02toNov08/style_link_clicks_Nov02toNov08), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Oct 26 to Nov 01
    amount_spent_sum_week_Oct26toNov01_style <- round(sum(facebook_cpc_week_Oct26toNov01_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Oct26toNov01 <- sum(!is.na(deals_cpc_week_Oct26toNov01$Style.type))
    style_quiz_to_spent_ratio_week_Oct26toNov01 <- paste(round(amount_spent_sum_week_Oct26toNov01_style/style_quiz_sum_week_Oct26toNov01, 2),":", (style_quiz_sum_week_Oct26toNov01/style_quiz_sum_week_Oct26toNov01))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Oct26toNov01 <- sum(facebook_cpc_week_Oct26toNov01_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Oct26toNov01 <- round(sum(facebook_cpc_week_Oct26toNov01_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Oct26toNov01 <- scales::percent((style_quiz_sum_week_Oct26toNov01/style_link_clicks_Oct26toNov01), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week oct 19 to oct 25
    amount_spent_sum_week_Oct19toOct25_style <- round(sum(facebook_cpc_week_Oct19toOct25_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Oct19toOct25 <- sum(!is.na(deals_cpc_week_Oct19toOct25$Style.type))
    style_quiz_to_spent_ratio_week_Oct19toOct25 <- paste(round(amount_spent_sum_week_Oct19toOct25_style/style_quiz_sum_week_Oct19toOct25, 2),":", (style_quiz_sum_week_Oct19toOct25/style_quiz_sum_week_Oct19toOct25))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Oct19toOct25 <- sum(facebook_cpc_week_Oct19toOct25_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Oct19toOct25 <- round(sum(facebook_cpc_week_Oct19toOct25_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Oct19toOct25 <- scales::percent((style_quiz_sum_week_Oct19toOct25/style_link_clicks_Oct19toOct25), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week oct 12 to oct 18
    amount_spent_sum_week_Oct12toOct18_style <- round(sum(facebook_cpc_week_Oct12toOct18_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Oct12toOct18 <- sum(!is.na(deals_cpc_week_Oct12toOct18$Style.type))
    style_quiz_to_spent_ratio_week_Oct12toOct18 <- paste(round(amount_spent_sum_week_Oct12toOct18_style/style_quiz_sum_week_Oct12toOct18, 2),":", (style_quiz_sum_week_Oct12toOct18/style_quiz_sum_week_Oct12toOct18))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Oct12toOct18 <- sum(facebook_cpc_week_Oct12toOct18_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Oct12toOct18 <- round(sum(facebook_cpc_week_Oct12toOct18_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Oct12toOct18 <- scales::percent((style_quiz_sum_week_Oct12toOct18/style_link_clicks_Oct12toOct18), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week oct 05 to oct 11
    amount_spent_sum_week_Oct05toOct11_style <- round(sum(facebook_cpc_week_Oct05toOct11_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_Oct05toOct11 <- sum(!is.na(deals_cpc_week_Oct05toOct11$Style.type))
    style_quiz_to_spent_ratio_week_Oct05toOct11 <- paste(round(amount_spent_sum_week_Oct05toOct11_style/style_quiz_sum_week_Oct05toOct11, 2),":", (style_quiz_sum_week_Oct05toOct11/style_quiz_sum_week_Oct05toOct11))
    
    #calculating the total ad link clikcs 
    style_link_clicks_Oct05toOct11 <- sum(facebook_cpc_week_Oct05toOct11_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_Oct05toOct11 <- round(sum(facebook_cpc_week_Oct05toOct11_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_Oct05toOct11 <- scales::percent((style_quiz_sum_week_Oct05toOct11/style_link_clicks_Oct05toOct11), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week sep 28 to oct 04
    amount_spent_sum_week_sep28tooct04_style <- round(sum(facebook_cpc_week_sep28tooct04_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_sep28tooct04 <- sum(!is.na(deals_cpc_week_sep28tooct04$Style.type))
    style_quiz_to_spent_ratio_week_sep28tooct04 <- paste(round(amount_spent_sum_week_sep28tooct04_style/style_quiz_sum_week_sep28tooct04, 2),":", (style_quiz_sum_week_sep28tooct04/style_quiz_sum_week_sep28tooct04))
    
    #calculating the total ad link clikcs 
    style_link_clicks_sep28tooct04 <- sum(facebook_cpc_week_sep28tooct04_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_sep28tooct04 <- round(sum(facebook_cpc_week_sep28tooct04_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_sep28tooct04 <- scales::percent((style_quiz_sum_week_sep28tooct04/style_link_clicks_sep28tooct04), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week sep 21 to 27
    amount_spent_sum_week_sep21to27_style <- round(sum(facebook_cpc_week_sep21to27_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_sep21to27 <- sum(!is.na(deals_cpc_week_sep21to27$Style.type))
    style_quiz_to_spent_ratio_week_sep21to27 <- paste(round(amount_spent_sum_week_sep21to27_style/style_quiz_sum_week_sep21to27, 2),":", (style_quiz_sum_week_sep21to27/style_quiz_sum_week_sep21to27))
    
    #calculating the total ad link clikcs 
    style_link_clicks_sep21to27 <- sum(facebook_cpc_week_sep21to27_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_sep21to27 <- round(sum(facebook_cpc_week_sep21to27_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_sep21to27 <- scales::percent((style_quiz_sum_week_sep21to27/style_link_clicks_sep21to27), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week sep 14 to 20
    amount_spent_sum_week_sep14to20_style <- round(sum(facebook_cpc_week_sep14to20_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week_sep14to20 <- sum(!is.na(deals_cpc_week_sep14to20$Style.type))
    style_quiz_to_spent_ratio_week_sep14to20 <- paste(round(amount_spent_sum_week_sep14to20_style/style_quiz_sum_week_sep14to20, 2),":", (style_quiz_sum_week_sep14to20/style_quiz_sum_week_sep14to20))
    
    #calculating the total ad link clikcs 
    style_link_clicks_sep14to20 <- sum(facebook_cpc_week_sep14to20_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_sep14to20 <- round(sum(facebook_cpc_week_sep14to20_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_sep14to20 <- scales::percent((style_quiz_sum_week_sep14to20/style_link_clicks_sep14to20), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week 7 to 13
    amount_spent_sum_week7to13_style <- round(sum(facebook_cpc_week7to13_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week7to13 <- sum(!is.na(deals_cpc_week7to13$Style.type))
    style_quiz_to_spent_ratio_week7to13 <- paste(round(amount_spent_sum_week7to13_style/style_quiz_sum_week7to13, 2),":", (style_quiz_sum_week7to13/style_quiz_sum_week7to13))
    
    #calculating the total ad link clikcs 
    style_link_clicks_7to13 <- sum(facebook_cpc_week7to13_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_7to13 <- round(sum(facebook_cpc_week7to13_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_7to13 <- scales::percent((style_quiz_sum_week7to13/style_link_clicks_7to13), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week 31 to 6
    amount_spent_sum_week31to6_style <- round(sum(facebook_cpc_week31to6_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week31to6 <- sum(!is.na(deals_cpc_week31to6$Style.type))
    style_quiz_to_spent_ratio_week31to6 <- paste(round(amount_spent_sum_week31to6_style/style_quiz_sum_week31to6,2),":", (style_quiz_sum_week31to6/style_quiz_sum_week31to6))
    
    #calculating the total ad link clikcs 
    style_link_clicks_31to6 <- sum(facebook_cpc_week31to6_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_31to6 <- round(sum(facebook_cpc_week31to6_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_31to6 <- scales::percent((style_quiz_sum_week31to6/style_link_clicks_31to6), accuracy = 1)
    
    
    
    
    #calculating the cost per style quiz conversion ratio - week Aug 24 to Aug 30
    amount_spent_sum_week24to30_style <- round(sum(facebook_cpc_week24to30_style$Amount.Spent..USD.), 0)
    style_quiz_sum_week24to30 <- sum(!is.na(deals_cpc_week24to30$Style.type))
    style_quiz_to_spent_ratio_week24to30 <- paste(round(amount_spent_sum_week24to30_style/style_quiz_sum_week24to30,2),":", (style_quiz_sum_week24to30/style_quiz_sum_week24to30))
    
    #calculating the total ad link clikcs 
    style_link_clicks_24to30 <- sum(facebook_cpc_week24to30_style$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    style_cost_per_click_24to30 <- round(sum(facebook_cpc_week24to30_style$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly style ad click-to-conversion percent 
    style_link_clicks_to_conversion_percent_24to30 <- scales::percent((style_quiz_sum_week24to30/style_link_clicks_24to30), accuracy = 1)
    
    
    
    
    #creating outout table to hold the cost per conversion results 
    spent_to_style_quiz_ratio_table <- data.table("Date" = c("November 30 - December 02", "November 23 - 29", "November 16 - 22",
                                                             "November 09 - 15", "November 02 - 08",
                                                             "October 26 - November 01", "October 19 - 25", "October 12 - 18",
                                                             "October 05 - 11", "September 28 - October 04",
                                                             "September 21 - 27"),
                                                  "Cost($)-per-Conversion Ratio" = c(style_quiz_to_spent_ratio_week_Nov30toDec02,
                                                                                     style_quiz_to_spent_ratio_week_Nov23toNov29,
                                                                                     style_quiz_to_spent_ratio_week_Nov16toNov22,
                                                                                     style_quiz_to_spent_ratio_week_Nov09toNov15,
                                                                                     style_quiz_to_spent_ratio_week_Nov02toNov08,
                                                                                     style_quiz_to_spent_ratio_week_Oct26toNov01,
                                                                                     style_quiz_to_spent_ratio_week_Oct19toOct25,
                                                                                     style_quiz_to_spent_ratio_week_Oct12toOct18,
                                                                                     style_quiz_to_spent_ratio_week_Oct05toOct11,
                                                                                     style_quiz_to_spent_ratio_week_sep28tooct04,
                                                                                     style_quiz_to_spent_ratio_week_sep21to27),
                                                  "Amount Spent ($)" = c(amount_spent_sum_week_Nov30toDec02_style,
                                                                         amount_spent_sum_week_Nov23toNov29_style,
                                                                         amount_spent_sum_week_Nov16toNov22_style,
                                                                         amount_spent_sum_week_Nov09toNov15_style,
                                                                         amount_spent_sum_week_Nov02toNov08_style,
                                                                         amount_spent_sum_week_Oct26toNov01_style,
                                                                         amount_spent_sum_week_Oct19toOct25_style,
                                                                         amount_spent_sum_week_Oct12toOct18_style,
                                                                         amount_spent_sum_week_Oct05toOct11_style,
                                                                         amount_spent_sum_week_sep28tooct04_style,
                                                                         amount_spent_sum_week_sep21to27_style),
                                                  "Conversion Count" = c(style_quiz_sum_week_Nov30toDec02,
                                                                         style_quiz_sum_week_Nov23toNov29,
                                                                         style_quiz_sum_week_Nov16toNov22,
                                                                         style_quiz_sum_week_Nov09toNov15,
                                                                         style_quiz_sum_week_Nov02toNov08,
                                                                         style_quiz_sum_week_Oct26toNov01,
                                                                         style_quiz_sum_week_Oct19toOct25,
                                                                         style_quiz_sum_week_Oct12toOct18, 
                                                                         style_quiz_sum_week_Oct05toOct11,
                                                                         style_quiz_sum_week_sep28tooct04,
                                                                         style_quiz_sum_week_sep21to27),
                                                  "Ad Link Clicks" = c(style_link_clicks_Nov30toDec02,
                                                                       style_link_clicks_Nov23toNov29,
                                                                       style_link_clicks_Nov16toNov22,
                                                                       style_link_clicks_Nov09toNov15,
                                                                       style_link_clicks_Nov02toNov08,
                                                                       style_link_clicks_Oct26toNov01,
                                                                       style_link_clicks_Oct19toOct25,
                                                                       style_link_clicks_Oct12toOct18,
                                                                       style_link_clicks_Oct05toOct11,
                                                                       style_link_clicks_sep28tooct04,
                                                                       style_link_clicks_sep21to27),
                                                  "Ad Click-To-Conversion Percent" = as.factor(c(style_link_clicks_to_conversion_percent_Nov30toDec02,
                                                                                                 style_link_clicks_to_conversion_percent_Nov23toNov29,
                                                                                                 style_link_clicks_to_conversion_percent_Nov16toNov22,
                                                                                                 style_link_clicks_to_conversion_percent_Nov09toNov15,
                                                                                                 style_link_clicks_to_conversion_percent_Nov02toNov08,
                                                                                                 style_link_clicks_to_conversion_percent_Oct26toNov01,
                                                                                                 style_link_clicks_to_conversion_percent_Oct19toOct25,
                                                                                                 style_link_clicks_to_conversion_percent_Oct12toOct18,
                                                                                                 style_link_clicks_to_conversion_percent_Oct05toOct11,
                                                                                                 style_link_clicks_to_conversion_percent_sep28tooct04,
                                                                                                 style_link_clicks_to_conversion_percent_sep21to27)),
                                                  "Active Campaigns" = c(" 'Asset 2 Ad Campaign 4 - Placement 1' & 'Asset 2 Ad Campaign 4 - Placement 2' ",
                                                                         " 'Asset 2 Ad Campaign 4 - Placement 1' & 'Asset 2 Ad Campaign 4 - Placement 2' & 'Asset 2 Retargeting Ad Campaign 3' ",
                                                                         " 'Asset 2 Ad Campaign 4' & 'Asset 2 Retargeting Ad Campaign 3' ",
                                                                         " 'Asset 2 Ad Campaign 3 - Placement 1' & 'Asset 2 Ad Campaign 3 - Placement 2' ",
                                                                         " 'Asset 2 Ad Campaign 3 - Placement 1' & 'Asset 2 Ad Campaign 3 - Placement 2' ",
                                                                         " 'Asset 2 Ad Campaign 3' ",
                                                                         " 'Asset 2 Ad Campaign 2 - Placement 1' & 'Asset 2 Ad Campaign 2 - Placement 2' ",
                                                                         " 'Asset 2 Ad Campaign 2 - Placement 1' & 'Asset 2 Ad Campaign 2 - Placement 2' & 'Asset 2 Retargeting Ad Campaign 1' ",
                                                                         " 'Asset 2 Retargeting Ad Campaign 1' & 'Asset 2 Ad Campaign 2' ",
                                                                         " 'Asset 2 Ad Campaign 1' ",
                                                                         " 'Asset 2 Ad Campaign 1' "))
    
    
    
    
    #calculating the average cost-per-conversion 
    
    #summing all of the amount spent on style Quiz Ads after Aug 24, 2020
    total_amount_spent_after_Aug24_style <- sum(amount_spent_sum_week_Nov30toDec02_style,
                                                amount_spent_sum_week_Nov23toNov29_style,
                                                amount_spent_sum_week_Nov16toNov22_style,
                                                amount_spent_sum_week_Nov09toNov15_style,
                                                amount_spent_sum_week_Nov02toNov08_style,
                                                amount_spent_sum_week_Oct26toNov01_style,
                                                amount_spent_sum_week_Oct19toOct25_style,
                                                amount_spent_sum_week_Oct12toOct18_style,
                                                amount_spent_sum_week_Oct05toOct11_style,
                                                amount_spent_sum_week_sep28tooct04_style,
                                                amount_spent_sum_week_sep21to27_style,
                                                amount_spent_sum_week_sep14to20_style,
                                                amount_spent_sum_week7to13_style,
                                                amount_spent_sum_week31to6_style,
                                                amount_spent_sum_week24to30_style)
    
    #getting the average amount spent on style Quiz Ads after Aug 24, 2020
    average_amount_spent_after_Aug24_style <- total_amount_spent_after_Aug24_style/15
    
    
    #summing the count of style quiz conversions recorded after August 24, 2020 
    total_style_conversions_after_Aug24 <- sum(style_quiz_sum_week_Nov30toDec02,
                                               style_quiz_sum_week_Nov23toNov29,
                                               style_quiz_sum_week_Nov16toNov22,
                                               style_quiz_sum_week_Nov09toNov15,
                                               style_quiz_sum_week_Nov02toNov08,
                                               style_quiz_sum_week_Oct26toNov01,
                                               style_quiz_sum_week_Oct19toOct25,
                                               style_quiz_sum_week_Oct12toOct18, 
                                               style_quiz_sum_week_Oct05toOct11,
                                               style_quiz_sum_week_sep28tooct04,
                                               style_quiz_sum_week_sep21to27,
                                               style_quiz_sum_week_sep14to20,
                                               style_quiz_sum_week7to13,
                                               style_quiz_sum_week31to6,
                                               style_quiz_sum_week24to30)
    
    #getting the average count of style quiz conversions recorded after August 24, 2020 
    average_style_conversions_after_Aug24 <- total_style_conversions_after_Aug24/15
    
    #calcualting the average cost-per-conversion ratio for EH ads after Aug 24, 2020
    average_cost_per_conversion_ratio_after_Aug24_style <- paste(round(average_amount_spent_after_Aug24_style/average_style_conversions_after_Aug24, 2),":", (average_style_conversions_after_Aug24/average_style_conversions_after_Aug24))
    
    
    
    
    
    #calculating the percentage of quiz takers from our total link clicks 
    #Used in weekly report insights
    
    #getting the toal sum of link clicks for the style quiz ads since Aug 24
    total_link_clicks_style <- sum(sum(facebook_cpc_week_Nov30toDec02_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov23toNov29_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov16toNov22_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov09toNov15_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Nov02toNov08_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct26toNov01_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct19toOct25_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct12toOct18_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_Oct05toOct11_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_sep28tooct04_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_sep21to27_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week_sep14to20_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week7to13_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week31to6_style$Unique.Link.Clicks, na.rm = TRUE),
                                   sum(facebook_cpc_week24to30_style$Unique.Link.Clicks, na.rm = TRUE)) 
    
    #getting the average link clicks for the style quiz ads since Aug 24
    average_link_clicks_style <- total_link_clicks_style/15
    
    #getting the total sum of style conversions since Aug 24
    total_style_quiz_conversions <- sum(style_quiz_sum_week_Nov30toDec02,
                                        style_quiz_sum_week_Nov23toNov29,
                                        style_quiz_sum_week_Nov16toNov22,
                                        style_quiz_sum_week_Nov09toNov15,
                                        style_quiz_sum_week_Nov02toNov08,
                                        style_quiz_sum_week_Oct26toNov01,
                                        style_quiz_sum_week_Oct19toOct25,
                                        style_quiz_sum_week_Oct12toOct18, 
                                        style_quiz_sum_week_Oct05toOct11,
                                        style_quiz_sum_week_sep28tooct04,
                                        style_quiz_sum_week_sep21to27,
                                        style_quiz_sum_week_sep14to20,
                                        style_quiz_sum_week7to13,
                                        style_quiz_sum_week31to6,
                                        style_quiz_sum_week24to30)
    
    #getting the average sum of style quiz conversions since Aug 24
    average_style_quiz_conversions <- total_style_quiz_conversions/15
    
    
    style_link_clicks_to_conversion_percent <- scales::percent((average_style_quiz_conversions/average_link_clicks_style), accuracy = 1)
    
    
    ###########################################################################################################################################################################################################################################
    
    
    ###################################
    # Budget Quiz Cost-Per-Conversion #
    ###################################
    
    #calculating the cost per budget quiz conversion ratio - week Nov 23 to Nov 29
    amount_spent_sum_week_Nov30toDec02_budget <- round(sum(facebook_cpc_week_Nov30toDec02_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Nov30toDec02 <- sum(!is.na(contacts_cpc_week_Nov30toDec02$Total.Budget))
    budget_quiz_to_spent_ratio_week_Nov30toDec02 <- paste(round(amount_spent_sum_week_Nov30toDec02_budget/budget_quiz_sum_week_Nov30toDec02, 2),":", (budget_quiz_sum_week_Nov30toDec02/budget_quiz_sum_week_Nov30toDec02))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Nov30toDec02 <- sum(facebook_cpc_week_Nov30toDec02_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Nov30toDec02 <- round(sum(facebook_cpc_week_Nov30toDec02_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Nov30toDec02 <- scales::percent((budget_quiz_sum_week_Nov30toDec02/budget_link_clicks_Nov30toDec02), accuracy = 1)
    
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Nov 23 to Nov 29
    amount_spent_sum_week_Nov23toNov29_budget <- round(sum(facebook_cpc_week_Nov23toNov29_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Nov23toNov29 <- sum(!is.na(contacts_cpc_week_Nov23toNov29$Total.Budget))
    budget_quiz_to_spent_ratio_week_Nov23toNov29 <- paste(round(amount_spent_sum_week_Nov23toNov29_budget/budget_quiz_sum_week_Nov23toNov29, 2),":", (budget_quiz_sum_week_Nov23toNov29/budget_quiz_sum_week_Nov23toNov29))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Nov23toNov29 <- sum(facebook_cpc_week_Nov23toNov29_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Nov23toNov29 <- round(sum(facebook_cpc_week_Nov23toNov29_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Nov23toNov29 <- scales::percent((budget_quiz_sum_week_Nov23toNov29/budget_link_clicks_Nov23toNov29), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Nov 16 to Nov 22
    amount_spent_sum_week_Nov16toNov22_budget <- round(sum(facebook_cpc_week_Nov16toNov22_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Nov16toNov22 <- sum(!is.na(contacts_cpc_week_Nov16toNov22$Total.Budget))
    budget_quiz_to_spent_ratio_week_Nov16toNov22 <- paste(round(amount_spent_sum_week_Nov16toNov22_budget/budget_quiz_sum_week_Nov16toNov22, 2),":", (budget_quiz_sum_week_Nov16toNov22/budget_quiz_sum_week_Nov16toNov22))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Nov16toNov22 <- sum(facebook_cpc_week_Nov16toNov22_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Nov16toNov22 <- round(sum(facebook_cpc_week_Nov16toNov22_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Nov16toNov22 <- scales::percent((budget_quiz_sum_week_Nov16toNov22/budget_link_clicks_Nov16toNov22), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Nov 09 to Nov 15
    amount_spent_sum_week_Nov09toNov15_budget <- round(sum(facebook_cpc_week_Nov09toNov15_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Nov09toNov15 <- sum(!is.na(contacts_cpc_week_Nov09toNov15$Total.Budget))
    budget_quiz_to_spent_ratio_week_Nov09toNov15 <- paste(round(amount_spent_sum_week_Nov09toNov15_budget/budget_quiz_sum_week_Nov09toNov15, 2),":", (budget_quiz_sum_week_Nov09toNov15/budget_quiz_sum_week_Nov09toNov15))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Nov09toNov15 <- sum(facebook_cpc_week_Nov09toNov15_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Nov09toNov15 <- round(sum(facebook_cpc_week_Nov09toNov15_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Nov09toNov15 <- scales::percent((budget_quiz_sum_week_Nov09toNov15/budget_link_clicks_Nov09toNov15), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Nov 02 to Nov 08
    amount_spent_sum_week_Nov02toNov08_budget <- round(sum(facebook_cpc_week_Nov02toNov08_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Nov02toNov08 <- sum(!is.na(contacts_cpc_week_Nov02toNov08$Total.Budget))
    budget_quiz_to_spent_ratio_week_Nov02toNov08 <- paste(round(amount_spent_sum_week_Nov02toNov08_budget/budget_quiz_sum_week_Nov02toNov08, 2),":", (budget_quiz_sum_week_Nov02toNov08/budget_quiz_sum_week_Nov02toNov08))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Nov02toNov08 <- sum(facebook_cpc_week_Nov02toNov08_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Nov02toNov08 <- round(sum(facebook_cpc_week_Nov02toNov08_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Nov02toNov08 <- scales::percent((budget_quiz_sum_week_Nov02toNov08/budget_link_clicks_Nov02toNov08), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Oct 26 to Nov 01
    amount_spent_sum_week_Oct26toNov01_budget <- round(sum(facebook_cpc_week_Oct26toNov01_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Oct26toNov01 <- sum(!is.na(contacts_cpc_week_Oct26toNov01$Total.Budget))
    budget_quiz_to_spent_ratio_week_Oct26toNov01 <- paste(round(amount_spent_sum_week_Oct26toNov01_budget/budget_quiz_sum_week_Oct26toNov01, 2),":", (budget_quiz_sum_week_Oct26toNov01/budget_quiz_sum_week_Oct26toNov01))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Oct26toNov01 <- sum(facebook_cpc_week_Oct26toNov01_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Oct26toNov01 <- round(sum(facebook_cpc_week_Oct26toNov01_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Oct26toNov01 <- scales::percent((budget_quiz_sum_week_Oct26toNov01/budget_link_clicks_Oct26toNov01), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week oct 19 to oct 25
    amount_spent_sum_week_Oct19toOct25_budget <- round(sum(facebook_cpc_week_Oct19toOct25_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Oct19toOct25 <- sum(!is.na(contacts_cpc_week_Oct19toOct25$Total.Budget))
    budget_quiz_to_spent_ratio_week_Oct19toOct25 <- paste(round(amount_spent_sum_week_Oct19toOct25_budget/budget_quiz_sum_week_Oct19toOct25, 2),":", (budget_quiz_sum_week_Oct19toOct25/budget_quiz_sum_week_Oct19toOct25))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Oct19toOct25 <- sum(facebook_cpc_week_Oct19toOct25_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Oct19toOct25 <- round(sum(facebook_cpc_week_Oct19toOct25_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Oct19toOct25 <- scales::percent((budget_quiz_sum_week_Oct19toOct25/budget_link_clicks_Oct19toOct25), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week oct 12 to oct 18
    amount_spent_sum_week_Oct12toOct18_budget <- round(sum(facebook_cpc_week_Oct12toOct18_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Oct12toOct18 <- sum(!is.na(contacts_cpc_week_Oct12toOct18$Total.Budget))
    budget_quiz_to_spent_ratio_week_Oct12toOct18 <- paste(round(amount_spent_sum_week_Oct12toOct18_budget/budget_quiz_sum_week_Oct12toOct18, 2),":", (budget_quiz_sum_week_Oct12toOct18/budget_quiz_sum_week_Oct12toOct18))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Oct12toOct18 <- sum(facebook_cpc_week_Oct12toOct18_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Oct12toOct18 <- round(sum(facebook_cpc_week_Oct12toOct18_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Oct12toOct18 <- scales::percent((budget_quiz_sum_week_Oct12toOct18/budget_link_clicks_Oct12toOct18), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week oct 05 to oct 11
    amount_spent_sum_week_Oct05toOct11_budget <- round(sum(facebook_cpc_week_Oct05toOct11_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_Oct05toOct11 <- sum(!is.na(contacts_cpc_week_Oct05toOct11$Total.Budget))
    budget_quiz_to_spent_ratio_week_Oct05toOct11 <- paste(round(amount_spent_sum_week_Oct05toOct11_budget/budget_quiz_sum_week_Oct05toOct11, 2),":", (budget_quiz_sum_week_Oct05toOct11/budget_quiz_sum_week_Oct05toOct11))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_Oct05toOct11 <- sum(facebook_cpc_week_Oct05toOct11_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_Oct05toOct11 <- round(sum(facebook_cpc_week_Oct05toOct11_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_Oct05toOct11 <- scales::percent((budget_quiz_sum_week_Oct05toOct11/budget_link_clicks_Oct05toOct11), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week sep 28 to oct 04
    amount_spent_sum_week_sep28tooct04_budget <- round(sum(facebook_cpc_week_sep28tooct04_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_sep28tooct04 <- sum(!is.na(contacts_cpc_week_sep28tooct04$Total.Budget))
    budget_quiz_to_spent_ratio_week_sep28tooct04 <- paste(round(amount_spent_sum_week_sep28tooct04_budget/budget_quiz_sum_week_sep28tooct04, 2),":", (budget_quiz_sum_week_sep28tooct04/budget_quiz_sum_week_sep28tooct04))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_sep28tooct04 <- sum(facebook_cpc_week_sep28tooct04_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_sep28tooct04 <- round(sum(facebook_cpc_week_sep28tooct04_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_sep28tooct04 <- scales::percent((budget_quiz_sum_week_sep28tooct04/budget_link_clicks_sep28tooct04), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week sep 21 to 27
    amount_spent_sum_week_sep21to27_budget <- round(sum(facebook_cpc_week_sep21to27_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_sep21to27 <- sum(!is.na(contacts_cpc_week_sep21to27$Total.Budget))
    budget_quiz_to_spent_ratio_week_sep21to27 <- paste(round(amount_spent_sum_week_sep21to27_budget/budget_quiz_sum_week_sep21to27, 2),":", (budget_quiz_sum_week_sep21to27/budget_quiz_sum_week_sep21to27))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_sep21to27 <- sum(facebook_cpc_week_sep21to27_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_sep21to27 <- round(sum(facebook_cpc_week_sep21to27_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_sep21to27 <- scales::percent((budget_quiz_sum_week_sep21to27/budget_link_clicks_sep21to27), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week sep 14 to 20
    amount_spent_sum_week_sep14to20_budget <- round(sum(facebook_cpc_week_sep14to20_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week_sep14to20 <- sum(!is.na(contacts_cpc_week_sep14to20$Total.Budget))
    budget_quiz_to_spent_ratio_week_sep14to20 <- paste(round(amount_spent_sum_week_sep14to20_budget/budget_quiz_sum_week_sep14to20, 2),":", (budget_quiz_sum_week_sep14to20/budget_quiz_sum_week_sep14to20))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_sep14to20 <- sum(facebook_cpc_week_sep14to20_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_sep14to20 <- round(sum(facebook_cpc_week_sep14to20_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_sep14to20 <- scales::percent((budget_quiz_sum_week_sep14to20/budget_link_clicks_sep14to20), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week 7 to 13
    amount_spent_sum_week7to13_budget <- round(sum(facebook_cpc_week7to13_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week7to13 <- sum(!is.na(contacts_cpc_week7to13$Total.Budget))
    budget_quiz_to_spent_ratio_week7to13 <- paste(round(amount_spent_sum_week7to13_budget/budget_quiz_sum_week7to13, 2),":", (budget_quiz_sum_week7to13/budget_quiz_sum_week7to13))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_7to13 <- sum(facebook_cpc_week7to13_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_7to13 <- round(sum(facebook_cpc_week7to13_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_7to13 <- scales::percent((budget_quiz_sum_week7to13/budget_link_clicks_7to13), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week 31 to 6
    amount_spent_sum_week31to6_budget <- round(sum(facebook_cpc_week31to6_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week31to6 <- sum(!is.na(contacts_cpc_week31to6$Total.Budget))
    budget_quiz_to_spent_ratio_week31to6 <- paste(round(amount_spent_sum_week31to6_budget/budget_quiz_sum_week31to6, 2),":", (budget_quiz_sum_week31to6/budget_quiz_sum_week31to6))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_31to6 <- sum(facebook_cpc_week31to6_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_31to6 <- round(sum(facebook_cpc_week31to6_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_31to6 <- scales::percent((budget_quiz_sum_week31to6/budget_link_clicks_31to6), accuracy = 1)
    
    
    
    
    #calculating the cost per budget quiz conversion ratio - week Aug 24 to Aug 30
    amount_spent_sum_week24to30_budget <- round(sum(facebook_cpc_week24to30_budget$Amount.Spent..USD.), 0)
    budget_quiz_sum_week24to30 <- sum(!is.na(contacts_cpc_week24to30$Total.Budget))
    budget_quiz_to_spent_ratio_week24to30 <- paste(round(amount_spent_sum_week24to30_budget/budget_quiz_sum_week24to30, 2),":", (budget_quiz_sum_week24to30/budget_quiz_sum_week24to30))
    
    #calculating the total ad link clikcs 
    budget_link_clicks_24to30 <- sum(facebook_cpc_week24to30_budget$Unique.Link.Clicks, na.rm = TRUE)
    
    #calculating the cost per unique click 
    budget_cost_per_click_24to30 <- round(sum(facebook_cpc_week24to30_budget$Cost.per.Unique.Link.Click, na.rm = TRUE), 2)
    
    #calculating the weekly budget ad click-to-conversion percent 
    budget_link_clicks_to_conversion_percent_24to30 <- scales::percent((budget_quiz_sum_week24to30/budget_link_clicks_24to30), accuracy = 1)
    
    
    
    #creating outout table to hold the cost per conversion results 
    spent_to_budget_quiz_ratio_table <- data.table("Date" = c("November 30 - December 02", "November 23 - 29", "November 16 - 22",
                                                              "November 09 - 15", "November 02 - 08",
                                                              "October 26 - November 01", "October 19 - 25", "October 12 - 18",
                                                              "October 05 - 11", "September 28 - October 04",
                                                              "September 21 - 27"),
                                                   "Cost($)-per-Conversion Ratio" = c(budget_quiz_to_spent_ratio_week_Nov30toDec02,
                                                                                      budget_quiz_to_spent_ratio_week_Nov23toNov29,
                                                                                      budget_quiz_to_spent_ratio_week_Nov16toNov22,
                                                                                      budget_quiz_to_spent_ratio_week_Nov09toNov15,
                                                                                      budget_quiz_to_spent_ratio_week_Nov02toNov08,
                                                                                      budget_quiz_to_spent_ratio_week_Oct26toNov01,
                                                                                      budget_quiz_to_spent_ratio_week_Oct19toOct25,
                                                                                      budget_quiz_to_spent_ratio_week_Oct12toOct18,
                                                                                      budget_quiz_to_spent_ratio_week_Oct05toOct11,
                                                                                      budget_quiz_to_spent_ratio_week_sep28tooct04,
                                                                                      budget_quiz_to_spent_ratio_week_sep21to27),
                                                   "Amount Spent ($)" = c(amount_spent_sum_week_Nov30toDec02_budget,
                                                                          amount_spent_sum_week_Nov23toNov29_budget,
                                                                          amount_spent_sum_week_Nov16toNov22_budget,
                                                                          amount_spent_sum_week_Nov09toNov15_budget,
                                                                          amount_spent_sum_week_Nov02toNov08_budget,
                                                                          amount_spent_sum_week_Oct26toNov01_budget,
                                                                          amount_spent_sum_week_Oct19toOct25_budget,
                                                                          amount_spent_sum_week_Oct12toOct18_budget,
                                                                          amount_spent_sum_week_Oct05toOct11_budget,
                                                                          amount_spent_sum_week_sep28tooct04_budget,
                                                                          amount_spent_sum_week_sep21to27_budget),
                                                   "Conversion Count" = c(budget_quiz_sum_week_Nov30toDec02,
                                                                          budget_quiz_sum_week_Nov23toNov29,
                                                                          budget_quiz_sum_week_Nov16toNov22,
                                                                          budget_quiz_sum_week_Nov09toNov15,
                                                                          budget_quiz_sum_week_Nov02toNov08,
                                                                          budget_quiz_sum_week_Oct26toNov01,
                                                                          budget_quiz_sum_week_Oct19toOct25,
                                                                          budget_quiz_sum_week_Oct12toOct18,
                                                                          budget_quiz_sum_week_Oct05toOct11,
                                                                          budget_quiz_sum_week_sep28tooct04,
                                                                          budget_quiz_sum_week_sep21to27),
                                                   "Ad Link Clicks" = c(budget_link_clicks_Nov30toDec02,
                                                                        budget_link_clicks_Nov23toNov29,
                                                                        budget_link_clicks_Nov16toNov22,
                                                                        budget_link_clicks_Nov09toNov15,
                                                                        budget_link_clicks_Nov02toNov08,
                                                                        budget_link_clicks_Oct26toNov01,
                                                                        budget_link_clicks_Oct19toOct25,
                                                                        budget_link_clicks_Oct12toOct18,
                                                                        budget_link_clicks_Oct05toOct11,
                                                                        budget_link_clicks_sep28tooct04,
                                                                        budget_link_clicks_sep21to27),
                                                   "Ad Click-To-Conversion Percent" = as.factor(c(budget_link_clicks_to_conversion_percent_Nov30toDec02,
                                                                                                  budget_link_clicks_to_conversion_percent_Nov23toNov29,
                                                                                                  budget_link_clicks_to_conversion_percent_Nov16toNov22,
                                                                                                  budget_link_clicks_to_conversion_percent_Nov09toNov15,
                                                                                                  budget_link_clicks_to_conversion_percent_Nov02toNov08,
                                                                                                  budget_link_clicks_to_conversion_percent_Oct26toNov01,
                                                                                                  budget_link_clicks_to_conversion_percent_Oct19toOct25,
                                                                                                  budget_link_clicks_to_conversion_percent_Oct12toOct18,
                                                                                                  budget_link_clicks_to_conversion_percent_Oct05toOct11,
                                                                                                  budget_link_clicks_to_conversion_percent_sep28tooct04,
                                                                                                  budget_link_clicks_to_conversion_percent_sep21to27)),
                                                   "Active Campaigns" = c(" 'Asset 3 Ad Campaign 4 - Placement 1' & 'Asset 3 Ad Campaign 4 - Placement 2' ",
                                                                          " 'Asset 3 Ad Campaign 4 - Placement 1' & 'Asset 3 Ad Campaign 4 - Placement 2' & 'Asset 3 Retargeting Ad Campaign 3' ",
                                                                          " 'Asset 3 Ad Campaign 4' & 'Asset 3 Retargeting Ad Campaign 3' ",
                                                                          " 'Asset 3 Ad Campaign 3 - Placement 1' & 'Asset 3 Ad Campaign 3 - Placement 2' ",
                                                                          " 'Asset 3 Ad Campaign 3 - Placement 1' & 'Asset 3 Ad Campaign 3 - Placement 2' ",
                                                                          " 'Asset 3 Ad Campaign 3' ",
                                                                          " 'Asset 3 Ad Campaign 2 - Placement 1' & 'Asset 3 Ad Campaign 2 - Placement 2' ",
                                                                          " 'Asset 3 Ad Campaign 2 - Placement 1' & 'Asset 3 Ad Campaign 2 - Placement 2' & 'Asset 3 Retargeting Ad Campaign 1' ",
                                                                          " 'Asset 3 Retargeting Ad Campaign 1' & 'Asset 3 Ad Campaign 2' ",
                                                                          " 'Asset 3 Ad Campaign 1' ",
                                                                          " 'Asset 3 Ad Campaign 1' "))
    
    
    
    #calculating the average cost-per-conversion 
    
    #summing all of the amount spent on budget Quiz Ads after Aug 24, 2020
    total_amount_spent_after_Aug24_budget <- sum(amount_spent_sum_week_Nov30toDec02_budget,
                                                 amount_spent_sum_week_Nov23toNov29_budget,
                                                 amount_spent_sum_week_Nov16toNov22_budget,
                                                 amount_spent_sum_week_Nov09toNov15_budget,
                                                 amount_spent_sum_week_Nov02toNov08_budget,
                                                 amount_spent_sum_week_Oct26toNov01_budget,
                                                 amount_spent_sum_week_Oct19toOct25_budget,
                                                 amount_spent_sum_week_Oct12toOct18_budget,
                                                 amount_spent_sum_week_Oct05toOct11_budget,
                                                 amount_spent_sum_week_sep28tooct04_budget,
                                                 amount_spent_sum_week_sep21to27_budget,
                                                 amount_spent_sum_week_sep14to20_budget,
                                                 amount_spent_sum_week7to13_budget,
                                                 amount_spent_sum_week31to6_budget,
                                                 amount_spent_sum_week24to30_budget)
    
    #getting the average amount spent on budget Quiz Ads after Aug 24, 2020
    average_amount_spent_after_Aug24_budget <- total_amount_spent_after_Aug24_budget/15
    
    
    #summing the count of budget quiz conversions recorded after August 24, 2020 
    total_budget_conversions_after_Aug24 <- sum(budget_quiz_sum_week_Nov30toDec02,
                                                budget_quiz_sum_week_Nov23toNov29,
                                                budget_quiz_sum_week_Nov16toNov22,
                                                budget_quiz_sum_week_Nov09toNov15,
                                                budget_quiz_sum_week_Nov02toNov08,
                                                budget_quiz_sum_week_Oct26toNov01,
                                                budget_quiz_sum_week_Oct19toOct25,
                                                budget_quiz_sum_week_Oct12toOct18, 
                                                budget_quiz_sum_week_Oct05toOct11,
                                                budget_quiz_sum_week_sep28tooct04,
                                                budget_quiz_sum_week_sep21to27,
                                                budget_quiz_sum_week_sep14to20,
                                                budget_quiz_sum_week7to13,
                                                budget_quiz_sum_week31to6,
                                                budget_quiz_sum_week24to30)
    
    #getting the average count of budget quiz conversions recorded after August 24, 2020 
    average_budget_conversions_after_Aug24 <- total_budget_conversions_after_Aug24/15
    
    #calcualting the average cost-per-conversion ratio for EH ads after Aug 24, 2020
    average_cost_per_conversion_ratio_after_Aug24_budget <- paste(round(average_amount_spent_after_Aug24_budget/average_budget_conversions_after_Aug24, 2),":", (average_budget_conversions_after_Aug24/average_budget_conversions_after_Aug24))
    
    
    
    
    
    
    #calculating the percentage of quiz takers from our total link clicks 
    #Used in weekly report insights
    
    #getting the toal sum of link clicks for the budget quiz ads since Aug 24
    total_link_clicks_budget <- sum(sum(facebook_cpc_week_Nov30toDec02_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Nov23toNov29_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Nov16toNov22_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Nov09toNov15_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Nov02toNov08_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Oct26toNov01_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Oct19toOct25_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Oct12toOct18_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_Oct05toOct11_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_sep28tooct04_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_sep21to27_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week_sep14to20_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week7to13_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week31to6_budget$Unique.Link.Clicks, na.rm = TRUE),
                                    sum(facebook_cpc_week24to30_budget$Unique.Link.Clicks, na.rm = TRUE)) 
    
    #getting the average link clicks for the budget quiz ads since Aug 24
    average_link_clicks_budget <- total_link_clicks_budget/15
    
    #getting the total sum of budget conversions since Aug 24
    total_budget_quiz_conversions <- sum(budget_quiz_sum_week_Nov30toDec02,
                                         budget_quiz_sum_week_Nov23toNov29,
                                         budget_quiz_sum_week_Nov16toNov22,
                                         budget_quiz_sum_week_Nov09toNov15,
                                         budget_quiz_sum_week_Nov02toNov08,
                                         budget_quiz_sum_week_Oct26toNov01,
                                         budget_quiz_sum_week_Oct19toOct25,
                                         budget_quiz_sum_week_Oct12toOct18, 
                                         budget_quiz_sum_week_Oct05toOct11,
                                         budget_quiz_sum_week_sep28tooct04,
                                         budget_quiz_sum_week_sep21to27,
                                         budget_quiz_sum_week_sep14to20,
                                         budget_quiz_sum_week7to13,
                                         budget_quiz_sum_week31to6,
                                         budget_quiz_sum_week24to30)
    
    #getting the average sum of budget quiz conversions since Aug 24
    average_budget_quiz_conversions <- total_budget_quiz_conversions/15
    
    
    budget_link_clicks_to_conversion_percent <- scales::percent((average_budget_quiz_conversions/average_link_clicks_budget), accuracy = 1)
    
    
    ###########################################################################################################################################################################################################################################
    
    ###############################
    # Signups Cost-Per-Conversion #
    ###############################
    
    #calculating the cost per signup conversion ratio - week Nov 30 to Dec 02
    amount_spent_sum_week_Nov30toDec02 <- round(sum(facebook_cpc_week_Nov30toDec02$Amount.Spent..USD.), 0)
    signup_sum_week_Nov30toDec02 <- sum(deals_cpc_week_Nov30toDec02$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Nov30toDec02 <- paste(round(amount_spent_sum_week_Nov30toDec02/signup_sum_week_Nov30toDec02, 2),":", (signup_sum_week_Nov30toDec02/signup_sum_week_Nov30toDec02))
    
    
    
    #calculating the cost per signup conversion ratio - week Nov 23 to Nov 29
    amount_spent_sum_week_Nov23toNov29 <- round(sum(facebook_cpc_week_Nov23toNov29$Amount.Spent..USD.), 0)
    signup_sum_week_Nov23toNov29 <- sum(deals_cpc_week_Nov23toNov29$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Nov23toNov29 <- paste(round(amount_spent_sum_week_Nov23toNov29/signup_sum_week_Nov23toNov29, 2),":", (signup_sum_week_Nov23toNov29/signup_sum_week_Nov23toNov29))


    #calculating the cost per signup conversion ratio - week Nov 16 to Nov 22
    amount_spent_sum_week_Nov16toNov22 <- round(sum(facebook_cpc_week_Nov16toNov22$Amount.Spent..USD.), 0)
    signup_sum_week_Nov16toNov22 <- sum(deals_cpc_week_Nov16toNov22$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Nov16toNov22 <- paste(round(amount_spent_sum_week_Nov16toNov22/signup_sum_week_Nov16toNov22, 2),":", (signup_sum_week_Nov16toNov22/signup_sum_week_Nov16toNov22))


    #calculating the cost per signup conversion ratio - week Nov 09 to Nov 15
    amount_spent_sum_week_Nov09toNov15 <- round(sum(facebook_cpc_week_Nov09toNov15$Amount.Spent..USD.), 0)
    signup_sum_week_Nov09toNov15 <- sum(deals_cpc_week_Nov09toNov15$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Nov09toNov15 <- paste(round(amount_spent_sum_week_Nov09toNov15/signup_sum_week_Nov09toNov15, 2),":", (signup_sum_week_Nov09toNov15/signup_sum_week_Nov09toNov15))


    #calculating the cost per signup conversion ratio - week Nov 02 to Nov 08
    amount_spent_sum_week_Nov02toNov08 <- round(sum(facebook_cpc_week_Nov02toNov08$Amount.Spent..USD.), 0)
    signup_sum_week_Nov02toNov08 <- sum(deals_cpc_week_Nov02toNov08$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Nov02toNov08 <- paste(round(amount_spent_sum_week_Nov02toNov08/signup_sum_week_Nov02toNov08, 2),":", (signup_sum_week_Nov02toNov08/signup_sum_week_Nov02toNov08))


    #calculating the cost per signup conversion ratio - week Oct 26 to Nov 01
    amount_spent_sum_week_Oct26toNov01 <- round(sum(facebook_cpc_week_Oct26toNov01$Amount.Spent..USD.), 0)
    signup_sum_week_Oct26toNov01 <- sum(deals_cpc_week_Oct26toNov01$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Oct26toNov01 <- paste(round(amount_spent_sum_week_Oct26toNov01/signup_sum_week_Oct26toNov01, 2),":", (signup_sum_week_Oct26toNov01/signup_sum_week_Oct26toNov01))


    #calculating the cost per signup conversion ratio - week oct 19 to oct 25
    amount_spent_sum_week_Oct19toOct25 <- round(sum(facebook_cpc_week_Oct19toOct25$Amount.Spent..USD.), 0)
    signup_sum_week_Oct19toOct25 <- sum(deals_cpc_week_Oct19toOct25$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Oct19toOct25 <- paste(round(amount_spent_sum_week_Oct19toOct25/signup_sum_week_Oct19toOct25, 2),":", (signup_sum_week_Oct19toOct25/signup_sum_week_Oct19toOct25))


    #calculating the cost per signup conversion ratio - week oct 12 to oct 18
    amount_spent_sum_week_Oct12toOct18 <- round(sum(facebook_cpc_week_Oct12toOct18$Amount.Spent..USD.), 0)
    signup_sum_week_Oct12toOct18 <- sum(deals_cpc_week_Oct12toOct18$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Oct12toOct18 <- paste(round(amount_spent_sum_week_Oct12toOct18/signup_sum_week_Oct12toOct18, 2),":", (signup_sum_week_Oct12toOct18/signup_sum_week_Oct12toOct18))


    #calculating the cost per signup conversion ratio - week oct 05 to oct 11
    amount_spent_sum_week_Oct05toOct11 <- round(sum(facebook_cpc_week_Oct05toOct11$Amount.Spent..USD.), 0)
    signup_sum_week_Oct05toOct11 <- sum(deals_cpc_week_Oct05toOct11$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_Oct05toOct11 <- paste(round(amount_spent_sum_week_Oct05toOct11/signup_sum_week_Oct05toOct11, 2),":", (signup_sum_week_Oct05toOct11/signup_sum_week_Oct05toOct11))


    #calculating the cost per signup conversion ratio - week sep 28 to oct 04
    amount_spent_sum_week_sep28tooct04 <- round(sum(facebook_cpc_week_sep28tooct04$Amount.Spent..USD.), 0)
    signup_sum_week_sep28tooct04 <- sum(deals_cpc_week_sep28tooct04$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_sep28tooct04 <- paste(round(amount_spent_sum_week_sep28tooct04/signup_sum_week_sep28tooct04, 2),":", (signup_sum_week_sep28tooct04/signup_sum_week_sep28tooct04))


    #calculating the cost per signup conversion ratio - week sep 21 to 27
    amount_spent_sum_week_sep21to27 <- round(sum(facebook_cpc_week_sep21to27$Amount.Spent..USD.), 0)
    signup_sum_week_sep21to27 <- sum(deals_cpc_week_sep21to27$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_sep21to27 <- paste(round(amount_spent_sum_week_sep21to27/signup_sum_week_sep21to27, 2),":", (signup_sum_week_sep21to27/signup_sum_week_sep21to27))



    #calculating the cost per signup conversion ratio - week sep 14 to 20
    amount_spent_sum_week_sep14to20 <- round(sum(facebook_cpc_week_sep14to20$Amount.Spent..USD.), 0)
    signup_sum_week_sep14to20 <- sum(deals_cpc_week_sep14to20$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week_sep14to20 <- paste(round(amount_spent_sum_week_sep14to20/signup_sum_week_sep14to20, 2),":", (signup_sum_week_sep14to20/signup_sum_week_sep14to20))


    #calculating the cost per signup conversion ratio - week 7 to 13
    amount_spent_sum_week7to13 <- round(sum(facebook_cpc_week7to13$Amount.Spent..USD.), 0)
    signup_sum_week7to13 <- sum(deals_cpc_week7to13$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week7to13 <- paste(round(amount_spent_sum_week7to13/signup_sum_week7to13, 2),":", (signup_sum_week7to13/signup_sum_week7to13))


    #calculating the cost per signup conversion ratio - week 31 to 06
    amount_spent_sum_week31to6 <- round(sum(facebook_cpc_week31to6$Amount.Spent..USD.), 0)
    signup_sum_week31to6 <- sum(deals_cpc_week31to6$User.Type == "Signed Up", na.rm = TRUE)
    signup_to_spent_ratio_week31to6 <- paste(round(amount_spent_sum_week31to6/signup_sum_week31to6, 2),":", (signup_sum_week31to6/signup_sum_week31to6))


    #calculating the cost per signup conversion ratio - week Aug 24 to Aug 30
    amount_spent_sum_week24to30 <- round(sum(facebook_cpc_week24to30$Amount.Spent..USD.), 0)
    signup_sum_week24to30 <- sum(deals_cpc_week24to30$User.Type == "Signed Up",  na.rm = TRUE)
    signup_to_spent_ratio_week24to30 <- paste(round(amount_spent_sum_week24to30/signup_sum_week24to30, 2),":", (signup_sum_week24to30/signup_sum_week24to30))

    
    ###########################################################################################################################################################################################################################################
    
    ############################################
    # Wedding Planning Club Cost-Per-Page-View #
    ###########################################
    
    #reading the raw page view excel file until Nov 01 2020
    raw_page_views_wpc <- read_excel("raw_page_view_counts_2020_Dec_06.xlsx", 2)
    
    #converting the table to a dataframe 
    raw_page_views_df_wpc <- data.frame(raw_page_views_wpc)
    
    #subsetting the the raw page views df to only include Wedding Planning Club data 
    raw_page_views_wpc_df <- subset(raw_page_views_df_wpc, Page == "www.eventhollow.com/wedding-planning-club")
    
    #getting the total sum of the unique page view counts for the wpc page 
    unique_page_views_wpc_count <- sum(raw_page_views_wpc_df$Unique.Pageviews)
    
    #subsetting the facebook_platform_df to only include wedding planning club campaigns  
    facebook_platform_wpc_df <- filter(facebook_platform_df, grepl("Wedding Planning Club", Campaign.Name))
    
    #getting the total sum of the amount spent on wpc ads 
    facebook_platform_wpc_amount_spent_sum <- sum(facebook_platform_wpc_df$Amount.Spent..USD.)
    
    #calculating the cost per page view for the Wedding Planning Club Campaign 
    wpc_unique_page_view_to_spent_ratio <- paste(round(facebook_platform_wpc_amount_spent_sum/unique_page_views_wpc_count, 2),":", (unique_page_views_wpc_count/unique_page_views_wpc_count))
    
    
    
    #creating outout table to hold the cost per unique page view results 
    spent_to_wpc_unique_page_views_ratio_table <- data.table("Cost($)-per-Unique-Page-View Ratio" = c(wpc_unique_page_view_to_spent_ratio),
                                                             "Amount Spent ($)" = c(facebook_platform_wpc_amount_spent_sum),
                                                             "Unique Page View Count" = c(unique_page_views_wpc_count),
                                                             "Campaigns" = c(" 'Support Service Ad Campaign 1 - Placement 1' & 'Support Service Ad Campaign 1 - Placement 2' "))
    
    ###########################################################################################################################################################################################################################################
    
    ###############################
    # Overall Cost-Per-Conversion #
    ###############################
    
    #total conversions for the week Nov 30 - Dec 06
    all_conversions_sum_week_Nov30toDec02 <- sum(venue_quiz_sum_week_Nov30toDec02, style_quiz_sum_week_Nov30toDec02,
                                                 budget_quiz_sum_week_Nov30toDec02)
    cost_per_conversion_ratio_week_Nov30toDec02 <- paste(round(amount_spent_sum_week_Nov30toDec02/all_conversions_sum_week_Nov30toDec02, 2),
                                                         ":", (all_conversions_sum_week_Nov30toDec02/all_conversions_sum_week_Nov30toDec02))
    
    
    
    #total conversions for the week Nov 23 - Nov 29
    all_conversions_sum_week_Nov23toNov29 <- sum(venue_quiz_sum_week_Nov23toNov29, style_quiz_sum_week_Nov23toNov29,
                                                 budget_quiz_sum_week_Nov23toNov29)
    cost_per_conversion_ratio_week_Nov23toNov29 <- paste(round(amount_spent_sum_week_Nov23toNov29/all_conversions_sum_week_Nov23toNov29, 2),
                                                         ":", (all_conversions_sum_week_Nov23toNov29/all_conversions_sum_week_Nov23toNov29))
    
    
    
    #total conversions for the week Nov 16 - Nov 22
    all_conversions_sum_week_Nov16toNov22 <- sum(venue_quiz_sum_week_Nov16toNov22, style_quiz_sum_week_Nov16toNov22,
                                                 budget_quiz_sum_week_Nov16toNov22)
    cost_per_conversion_ratio_week_Nov16toNov22 <- paste(round(amount_spent_sum_week_Nov16toNov22/all_conversions_sum_week_Nov16toNov22, 2),
                                                         ":", (all_conversions_sum_week_Nov16toNov22/all_conversions_sum_week_Nov16toNov22))
    
    
    #total conversions for the week Nov 09 - Nov 15
    all_conversions_sum_week_Nov09toNov15 <- sum(venue_quiz_sum_week_Nov09toNov15, style_quiz_sum_week_Nov09toNov15,
                                                 budget_quiz_sum_week_Nov09toNov15)
    cost_per_conversion_ratio_week_Nov09toNov15 <- paste(round(amount_spent_sum_week_Nov09toNov15/all_conversions_sum_week_Nov09toNov15, 2),
                                                         ":", (all_conversions_sum_week_Nov09toNov15/all_conversions_sum_week_Nov09toNov15))
    
    
    
    #total conversions for the week Nov 02 - Nov 08
    all_conversions_sum_week_Nov02toNov08 <- sum(venue_quiz_sum_week_Nov02toNov08, style_quiz_sum_week_Nov02toNov08,
                                                 budget_quiz_sum_week_Nov02toNov08)
    cost_per_conversion_ratio_week_Nov02toNov08 <- paste(round(amount_spent_sum_week_Nov02toNov08/all_conversions_sum_week_Nov02toNov08, 2),
                                                         ":", (all_conversions_sum_week_Nov02toNov08/all_conversions_sum_week_Nov02toNov08))
    
    
    
    #total conversions for the week Oct 26 - Nov 01
    all_conversions_sum_week_Oct26toNov01 <- sum(venue_quiz_sum_week_Oct26toNov01, style_quiz_sum_week_Oct26toNov01,
                                                 budget_quiz_sum_week_Oct26toNov01)
    cost_per_conversion_ratio_week_Oct26toNov01 <- paste(round(amount_spent_sum_week_Oct26toNov01/all_conversions_sum_week_Oct26toNov01, 2),
                                                         ":", (all_conversions_sum_week_Oct26toNov01/all_conversions_sum_week_Oct26toNov01))
    
    
    
    #total conversions for the week oct 19 to oct 25
    all_conversions_sum_week_Oct19toOct25 <- sum(venue_quiz_sum_week_Oct19toOct25, style_quiz_sum_week_Oct19toOct25,
                                                 budget_quiz_sum_week_Oct19toOct25)
    cost_per_conversion_ratio_week_Oct19toOct25 <- paste(round(amount_spent_sum_week_Oct19toOct25/all_conversions_sum_week_Oct19toOct25, 2),
                                                         ":", (all_conversions_sum_week_Oct19toOct25/all_conversions_sum_week_Oct19toOct25))
    
    
    #total conversions for the week oct 12 to oct 18
    all_conversions_sum_week_Oct12toOct18 <- sum(style_quiz_sum_week_Oct12toOct18, budget_quiz_sum_week_Oct05toOct11)
    cost_per_conversion_ratio_week_Oct12toOct18 <- paste(round(amount_spent_sum_week_Oct12toOct18/all_conversions_sum_week_Oct12toOct18, 2),
                                                         ":", (all_conversions_sum_week_Oct12toOct18/all_conversions_sum_week_Oct12toOct18))
    
    
    #total conversions for the week oct 05 to oct 11
    all_conversions_sum_week_Oct05toOct11 <- sum(style_quiz_sum_week_Oct05toOct11, budget_quiz_sum_week_Oct05toOct11)
    cost_per_conversion_ratio_week_Oct05toOct11 <- paste(round(amount_spent_sum_week_Oct05toOct11/all_conversions_sum_week_Oct05toOct11, 2),":", (all_conversions_sum_week_Oct05toOct11/all_conversions_sum_week_Oct05toOct11))
    
    
    #total conversions for the week Sep 28 to oct 04
    all_conversions_sum_week_sep28tooct04 <- sum(style_quiz_sum_week_sep28tooct04, budget_quiz_sum_week_sep28tooct04)
    cost_per_conversion_ratio_week_sep28tooct04 <- paste(round(amount_spent_sum_week_sep28tooct04/all_conversions_sum_week_sep28tooct04, 2),":", (all_conversions_sum_week_sep28tooct04/all_conversions_sum_week_sep28tooct04))
    
    
    #total conversions for the week Sep 21 to 27
    all_conversions_sum_week_sep21to27 <- sum(style_quiz_sum_week_sep21to27, budget_quiz_sum_week_sep21to27)
    cost_per_conversion_ratio_week_sep21to27 <- paste(round(amount_spent_sum_week_sep21to27/all_conversions_sum_week_sep21to27, 2),":", (all_conversions_sum_week_sep21to27/all_conversions_sum_week_sep21to27))
    
    
    #total conversions for the week Sep 14 to 20 
    all_conversions_sum_week_sep14to20 <- sum(style_quiz_sum_week_sep14to20, budget_quiz_sum_week_sep14to20)
    cost_per_conversion_ratio_week_sep14to20 <- paste(round(amount_spent_sum_week_sep14to20/all_conversions_sum_week_sep14to20, 2),":", (all_conversions_sum_week_sep14to20/all_conversions_sum_week_sep14to20))
    
    
    #total conversions for the week Sep 7 to 13
    all_conversions_sum_week7to13 <- sum(style_quiz_sum_week7to13, budget_quiz_sum_week7to13)
    cost_per_conversion_ratio_week7to13 <- paste(round(amount_spent_sum_week7to13/all_conversions_sum_week7to13, 2),":", (all_conversions_sum_week7to13/all_conversions_sum_week7to13))
    
    #total lead conversions for the week Aug 31 to Sep 6
    all_conversions_sum_week31to6 <- sum(style_quiz_sum_week31to6, budget_quiz_sum_week31to6)
    cost_per_conversion_ratio_week31to6 <- paste(round(amount_spent_sum_week31to6/all_conversions_sum_week31to6, 2),":", (all_conversions_sum_week31to6/all_conversions_sum_week31to6))
    
    
    #total lead conversions for the week Aug 24 to 30
    all_conversions_sum_week24to30 <- sum(style_quiz_sum_week24to30, budget_quiz_sum_week24to30)
    cost_per_conversion_ratio_week24to30 <- paste(round(amount_spent_sum_week24to30/all_conversions_sum_week24to30, 2),":", (all_conversions_sum_week24to30/all_conversions_sum_week24to30))
    
    
    
    
    #creating outout table to hold the cost per lead results 
    cost_per_conversion_ratio_table <- data.table("Date" = c("November 30 - December 02", "November 23 - 29", "November 16 - 22",
                                                             "November 09 - 15", "November 02 - 08",
                                                             "October 26 - November 01", "October 19 - 25", "October 12 - 18",
                                                             "October 05 - 11", "September 28 - October 04",
                                                             "September 21 - 27", "September 14 - 20",
                                                             "September 7 - 13", "August 31 - September 6", "August 24 - 30"),
                                                  "Cost($)-to-Conversion Ratio" = c(cost_per_conversion_ratio_week_Nov30toDec02,
                                                                                    cost_per_conversion_ratio_week_Nov23toNov29,
                                                                                    cost_per_conversion_ratio_week_Nov16toNov22,
                                                                                    cost_per_conversion_ratio_week_Nov09toNov15,
                                                                                    cost_per_conversion_ratio_week_Nov02toNov08,
                                                                                    cost_per_conversion_ratio_week_Oct26toNov01,
                                                                                    cost_per_conversion_ratio_week_Oct19toOct25,
                                                                                    cost_per_conversion_ratio_week_Oct12toOct18,
                                                                                    cost_per_conversion_ratio_week_Oct05toOct11,
                                                                                    cost_per_conversion_ratio_week_sep28tooct04,
                                                                                    cost_per_conversion_ratio_week_sep21to27,
                                                                                    cost_per_conversion_ratio_week_sep14to20,
                                                                                    cost_per_conversion_ratio_week7to13,
                                                                                    cost_per_conversion_ratio_week31to6,
                                                                                    cost_per_conversion_ratio_week24to30),
                                                  "Amount Spent ($)" = c(amount_spent_sum_week_Nov30toDec02,
                                                                         amount_spent_sum_week_Nov23toNov29,
                                                                         amount_spent_sum_week_Nov16toNov22,
                                                                         amount_spent_sum_week_Nov09toNov15,
                                                                         amount_spent_sum_week_Nov02toNov08,
                                                                         amount_spent_sum_week_Oct26toNov01,
                                                                         amount_spent_sum_week_Oct19toOct25,
                                                                         amount_spent_sum_week_Oct12toOct18,
                                                                         amount_spent_sum_week_Oct05toOct11, 
                                                                         amount_spent_sum_week_sep28tooct04,
                                                                         amount_spent_sum_week_sep21to27,
                                                                         amount_spent_sum_week_sep14to20,
                                                                         amount_spent_sum_week7to13,
                                                                         amount_spent_sum_week31to6,
                                                                         amount_spent_sum_week24to30),
                                                  "Conversion Count" = c(all_conversions_sum_week_Nov30toDec02,
                                                                         all_conversions_sum_week_Nov23toNov29,
                                                                         all_conversions_sum_week_Nov16toNov22,
                                                                         all_conversions_sum_week_Nov09toNov15,
                                                                         all_conversions_sum_week_Nov02toNov08,
                                                                         all_conversions_sum_week_Oct26toNov01,
                                                                         all_conversions_sum_week_Oct19toOct25,
                                                                         all_conversions_sum_week_Oct12toOct18,
                                                                         all_conversions_sum_week_Oct05toOct11,
                                                                         all_conversions_sum_week_sep28tooct04,
                                                                         all_conversions_sum_week_sep21to27,
                                                                         all_conversions_sum_week_sep14to20,
                                                                         all_conversions_sum_week7to13,
                                                                         all_conversions_sum_week31to6,
                                                                         all_conversions_sum_week24to30))
    
    
    
    #calculating the average cost-per-conversion 
    
    #summing all of the amount spent on budget Quiz Ads after Aug 24, 2020
    total_amount_spent_after_Aug24 <- sum(amount_spent_sum_week_Nov30toDec02,
                                          amount_spent_sum_week_Nov23toNov29,
                                          amount_spent_sum_week_Nov16toNov22,
                                          amount_spent_sum_week_Nov09toNov15,
                                          amount_spent_sum_week_Nov02toNov08,
                                          amount_spent_sum_week_Oct26toNov01,
                                          amount_spent_sum_week_Oct19toOct25,
                                          amount_spent_sum_week_Oct12toOct18,
                                          amount_spent_sum_week_Oct05toOct11, 
                                          amount_spent_sum_week_sep28tooct04,
                                          amount_spent_sum_week_sep21to27,
                                          amount_spent_sum_week_sep14to20,
                                          amount_spent_sum_week7to13,
                                          amount_spent_sum_week31to6,
                                          amount_spent_sum_week24to30)
    
    #getting the average amount spent on budget Quiz Ads after Aug 24, 2020
    average_amount_spent_after_Aug24 <- total_amount_spent_after_Aug24/15
    
    
    #summing the count of budget quiz conversions recorded after August 24, 2020 
    total_all_conversions_after_Aug24 <- sum(all_conversions_sum_week_Nov30toDec02,
                                             all_conversions_sum_week_Nov23toNov29,
                                             all_conversions_sum_week_Nov16toNov22,
                                             all_conversions_sum_week_Nov09toNov15,
                                             all_conversions_sum_week_Nov02toNov08,
                                             all_conversions_sum_week_Oct26toNov01,
                                             all_conversions_sum_week_Oct19toOct25,
                                             all_conversions_sum_week_Oct12toOct18,
                                             all_conversions_sum_week_Oct05toOct11,
                                             all_conversions_sum_week_sep28tooct04,
                                             all_conversions_sum_week_sep21to27,
                                             all_conversions_sum_week_sep14to20,
                                             all_conversions_sum_week7to13,
                                             all_conversions_sum_week31to6,
                                             all_conversions_sum_week24to30)
    
    #getting the average count of budget quiz conversions recorded after August 24, 2020 
    average_all_conversions_after_Aug24 <- total_all_conversions_after_Aug24/15
    
    #calcualting the average cost-per-conversion ratio for EH ads after Aug 24, 2020
    average_cost_per_conversion_ratio_after_Aug24 <- paste(round(average_amount_spent_after_Aug24/average_all_conversions_after_Aug24, 2),":", (average_all_conversions_after_Aug24/average_all_conversions_after_Aug24))
    
    
    ##############################################################################################################################################
    
    #putting all tables together in a list 
    cpc_tables_list = list("Overall"=cost_per_conversion_ratio_table,"Venue Quiz CPC Table"=spent_to_venue_quiz_ratio_table,
                           "Style Quiz CPC Table"=spent_to_style_quiz_ratio_table, "Budget Quiz CPC Table"=spent_to_budget_quiz_ratio_table,
                           "WPC CPC table"=spent_to_wpc_unique_page_views_ratio_table) #"Signups CPC table"=spent_to_signup_ratio_table,
    
    ##############################################################################################################################################
    
    #subsetting the contacts df to only include contacts who have taken the budget quiz but not arrived at our site 
    contact_no_dashboard <- subset(contact_data_hs_df, is.na(contact_data_hs_df$User.Type))
    
    #subsetting the HS contacts dataframe to only include cpc variables
    contacts_sig_vars <- c("Create.Date", "User.Type", "Style.type",
                           "Total.Budget", "Budget..venue.quiz.")
    
    #dropping columns that are not significant for calculating the conversion percentage for anonymous users 
    contact_no_dashboard_sig_vars <- contact_no_dashboard[contacts_sig_vars]
    
    #Renaming the columns of the subsetted df 
    names(contact_no_dashboard_sig_vars)[names(contact_no_dashboard_sig_vars)=="Style.type"] <- "Style.type1"
    names(contact_no_dashboard_sig_vars)[names(contact_no_dashboard_sig_vars)=="Total.Budget"] <- "Total.Budget..Bridge."
    
    #converting Venue Quiz Results Score to a numeric column
    #contact_no_dashboard_sig_vars <- contact_no_dashboard_sig_vars %>% mutate(Venue.Quiz.Results.Score = as.numeric(Venue.Quiz.Results.Score))
    
    
    #subsetting the HS contacts dataframe to only include cpc variables
    deals_sig_vars <- c("Create.Date", "User.Type", "Style.type1",
                        "Total.Budget..Bridge.", "Budget..venue.quiz.")
    
    #dropping columns that are not significant for calculating the conversion percentage for anonymous users 
    deals_sig_vars_df <- deal_data_hs_df[deals_sig_vars]
    
    #converting Venue Quiz Results Score to a numeric column
    #deals_sig_vars_df <- deals_sig_vars_df %>% mutate(Venue.Quiz.Results.Score = as.numeric(Venue.Quiz.Results.Score))
    
    #using union all to put all significant contact and deal data together 
    sig_vars_df <- union_all(deals_sig_vars_df, contact_no_dashboard_sig_vars)
    
    #arranging the records in descending order based on their create date 
    sig_vars_df <- sig_vars_df %>% arrange(desc(Create.Date))
    
    
    #subsetting the online sig records dataframe to only include anonymous users 
    #using sig_vars_df since this df is holds cleanest data and it includes budget quiz takers who haven't arrived at our site 
    deal_anonymous_users <- filter(sig_vars_df, grepl("Anonymous", User.Type) |
                                       is.na(sig_vars_df$User.Type))
    
    
    #splitting the Create.Date column into two to be able to subset only data records after  
    deal_anonymous_users_date_split <- str_split_fixed(deal_anonymous_users$Create.Date, " ", 2)
    
    #concatenating the split columns with the signup_users dataframe
    deal_anonymous_users <- cbind(deal_anonymous_users, deal_anonymous_users_date_split)
    
    #Renaming the split columns as Date and Time 
    names(deal_anonymous_users)[names(deal_anonymous_users)==1] <- "DateNonSignup"
    names(deal_anonymous_users)[names(deal_anonymous_users)==2] <- "TimeNonSignup"
    
    #converting Date column to a date format
    deal_anonymous_users$Date <- as.Date(deal_anonymous_users$DateNonSignup)
    
    #arranging the conatacts in descending order
    deal_anonymous_users <- deal_anonymous_users %>% arrange(desc(DateNonSignup))
    
    
    ###########################################################################################################################################################################################################################################
    
    #slicing the dataframe to only include records from the week of the Nov 30 to Dec 02
    deal_anonymous_users_week_Nov30toDec02 <- deal_anonymous_users %>%
        filter(Date >= '2020-11-30' & Date <= '2020-12-02')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Nov30toDec02 <- sum(!is.na(deal_anonymous_users_week_Nov30toDec02$Style.type1) & is.na(deal_anonymous_users_week_Nov30toDec02$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Nov30toDec02 <- sum(!is.na(deal_anonymous_users_week_Nov30toDec02$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov30toDec02$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Nov30toDec02 <- sum(!is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Nov30toDec02$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Nov30toDec02 <- sum(!is.na(deal_anonymous_users_week_Nov30toDec02$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Nov30toDec02$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.))
    anonymous_no_quiz_week_Nov30toDec02 <- sum(is.na(deal_anonymous_users_week_Nov30toDec02$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov30toDec02$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Nov30toDec02$Budget..venue.quiz.))
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 23 to Nov 29
    deal_anonymous_users_week_Nov23toNov29 <- deal_anonymous_users %>%
        filter(Date >= '2020-11-23' & Date <= '2020-11-29')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Nov23toNov29 <- sum(!is.na(deal_anonymous_users_week_Nov23toNov29$Style.type1) & is.na(deal_anonymous_users_week_Nov23toNov29$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Nov23toNov29 <- sum(!is.na(deal_anonymous_users_week_Nov23toNov29$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov23toNov29$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Nov23toNov29 <- sum(!is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Nov23toNov29$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Nov23toNov29 <- sum(!is.na(deal_anonymous_users_week_Nov23toNov29$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Nov23toNov29$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.))
    anonymous_no_quiz_week_Nov23toNov29 <- sum(is.na(deal_anonymous_users_week_Nov23toNov29$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov23toNov29$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Nov23toNov29$Budget..venue.quiz.))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 16 to Nov 22
    deal_anonymous_users_week_Nov16toNov22 <- deal_anonymous_users %>%
        filter(Date >= '2020-11-16' & Date <= '2020-11-22')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Nov16toNov22 <- sum(!is.na(deal_anonymous_users_week_Nov16toNov22$Style.type1) & is.na(deal_anonymous_users_week_Nov16toNov22$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Nov16toNov22 <- sum(!is.na(deal_anonymous_users_week_Nov16toNov22$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov16toNov22$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Nov16toNov22 <- sum(!is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Nov16toNov22$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Nov16toNov22 <- sum(!is.na(deal_anonymous_users_week_Nov16toNov22$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Nov16toNov22$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.))
    anonymous_no_quiz_week_Nov16toNov22 <- sum(is.na(deal_anonymous_users_week_Nov16toNov22$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov16toNov22$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Nov16toNov22$Budget..venue.quiz.))
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 09 to Nov 15
    deal_anonymous_users_week_Nov09toNov15 <- deal_anonymous_users %>%
        filter(Date >= '2020-11-09' & Date <= '2020-11-15')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Nov09toNov15 <- sum(!is.na(deal_anonymous_users_week_Nov09toNov15$Style.type1) & is.na(deal_anonymous_users_week_Nov09toNov15$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Nov09toNov15 <- sum(!is.na(deal_anonymous_users_week_Nov09toNov15$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov09toNov15$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Nov09toNov15 <- sum(!is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Nov09toNov15$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Nov09toNov15 <- sum(!is.na(deal_anonymous_users_week_Nov09toNov15$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Nov09toNov15$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.))
    anonymous_no_quiz_week_Nov09toNov15 <- sum(is.na(deal_anonymous_users_week_Nov09toNov15$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov09toNov15$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Nov09toNov15$Budget..venue.quiz.))
    
    
    
    #slicing the dataframe to only include records from the week of the Nov 02 to Nov 08
    deal_anonymous_users_week_Nov02toNov08 <- deal_anonymous_users %>%
        filter(Date >= '2020-11-02' & Date <= '2020-11-08')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Nov02toNov08 <- sum(!is.na(deal_anonymous_users_week_Nov02toNov08$Style.type1) & is.na(deal_anonymous_users_week_Nov02toNov08$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Nov02toNov08 <- sum(!is.na(deal_anonymous_users_week_Nov02toNov08$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov02toNov08$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Nov02toNov08 <- sum(!is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Nov02toNov08$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Nov02toNov08 <- sum(!is.na(deal_anonymous_users_week_Nov02toNov08$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Nov02toNov08$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.))
    anonymous_no_quiz_week_Nov02toNov08 <- sum(is.na(deal_anonymous_users_week_Nov02toNov08$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Nov02toNov08$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Nov02toNov08$Budget..venue.quiz.))
    
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 26 to Nov 01
    deal_anonymous_users_week_Oct26toNov01 <- deal_anonymous_users %>%
        filter(Date >= '2020-10-26' & Date <= '2020-11-01')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Oct26toNov01 <- sum(!is.na(deal_anonymous_users_week_Oct26toNov01$Style.type1) & is.na(deal_anonymous_users_week_Oct26toNov01$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Oct26toNov01 <- sum(!is.na(deal_anonymous_users_week_Oct26toNov01$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct26toNov01$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Oct26toNov01 <- sum(!is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Oct26toNov01$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Oct26toNov01 <- sum(!is.na(deal_anonymous_users_week_Oct26toNov01$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Oct26toNov01$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.))
    anonymous_no_quiz_week_Oct26toNov01 <- sum(is.na(deal_anonymous_users_week_Oct26toNov01$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct26toNov01$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Oct26toNov01$Budget..venue.quiz.))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 19 to Oct 25
    deal_anonymous_users_week_Oct19toOct25 <- deal_anonymous_users %>%
        filter(Date >= '2020-10-19' & Date <= '2020-10-25')
    
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, venue quiz, all or none 
    anonymous_only_style_quiz_week_Oct19toOct25 <- sum(!is.na(deal_anonymous_users_week_Oct19toOct25$Style.type1) & is.na(deal_anonymous_users_week_Oct19toOct25$Total.Budget..Bridge.) &
                                                           is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.))
    anonymous_only_budget_quiz_week_Oct19toOct25 <- sum(!is.na(deal_anonymous_users_week_Oct19toOct25$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct19toOct25$Style.type1) &
                                                            is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.))
    anonymous_only_venue_quiz_week_Oct19toOct25 <- sum(!is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.) & is.na(deal_anonymous_users_week_Oct19toOct25$Style.type1) &
                                                           is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.))
    anonymous_all_quizzes_week_Oct19toOct25 <- sum(!is.na(deal_anonymous_users_week_Oct19toOct25$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Oct19toOct25$Style.type1) &
                                                       !is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.))
    anonymous_no_quiz_week_Oct19toOct25 <- sum(is.na(deal_anonymous_users_week_Oct19toOct25$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct19toOct25$Style.type1) &
                                                   is.na(deal_anonymous_users_week_Oct19toOct25$Budget..venue.quiz.))
    
    
    
    
    #slicing the dataframe to only include records from the week of the Oct 12 to Oct 18
    deal_anonymous_users_week_Oct12toOct18 <- deal_anonymous_users %>%
        filter(Date >= '2020-10-12' & Date <= '2020-10-18')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_Oct12toOct18 <- sum(!is.na(deal_anonymous_users_week_Oct12toOct18$Style.type1) & is.na(deal_anonymous_users_week_Oct12toOct18$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_Oct12toOct18 <- sum(!is.na(deal_anonymous_users_week_Oct12toOct18$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct12toOct18$Style.type1))
    anonymous_both_quizzes_week_Oct12toOct18 <- sum(!is.na(deal_anonymous_users_week_Oct12toOct18$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Oct12toOct18$Style.type1))
    anonymous_neither_quiz_week_Oct12toOct18 <- sum(is.na(deal_anonymous_users_week_Oct12toOct18$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct12toOct18$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the Oct 05 to Oct 11
    deal_anonymous_users_week_Oct05toOct11 <- deal_anonymous_users %>%
        filter(Date >= '2020-10-05' & Date <= '2020-10-11')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_Oct05toOct11 <- sum(!is.na(deal_anonymous_users_week_Oct05toOct11$Style.type1) & is.na(deal_anonymous_users_week_Oct05toOct11$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_Oct05toOct11 <- sum(!is.na(deal_anonymous_users_week_Oct05toOct11$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct05toOct11$Style.type1))
    anonymous_both_quizzes_week_Oct05toOct11 <- sum(!is.na(deal_anonymous_users_week_Oct05toOct11$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_Oct05toOct11$Style.type1))
    anonymous_neither_quiz_week_Oct05toOct11 <- sum(is.na(deal_anonymous_users_week_Oct05toOct11$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_Oct05toOct11$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the Sep 28th to Oct 04
    deal_anonymous_users_week_sep28tooct04 <- deal_anonymous_users %>%
        filter(Date >= '2020-09-28' & Date <= '2020-10-04')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_sep28tooct04 <- sum(!is.na(deal_anonymous_users_week_sep28tooct04$Style.type1) & is.na(deal_anonymous_users_week_sep28tooct04$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_sep28tooct04 <- sum(!is.na(deal_anonymous_users_week_sep28tooct04$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep28tooct04$Style.type1))
    anonymous_both_quizzes_week_sep28tooct04 <- sum(!is.na(deal_anonymous_users_week_sep28tooct04$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_sep28tooct04$Style.type1))
    anonymous_neither_quiz_week_sep28tooct04 <- sum(is.na(deal_anonymous_users_week_sep28tooct04$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep28tooct04$Style.type1))
    
    
    
    #slicing the dataframe to only include records from the week of the 21th to the 27th of September
    deal_anonymous_users_week_sep21to27 <- deal_anonymous_users %>%
        filter(Date >= '2020-09-21' & Date <= '2020-09-27')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_sep21to27 <- sum(!is.na(deal_anonymous_users_week_sep21to27$Style.type1) & is.na(deal_anonymous_users_week_sep21to27$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_sep21to27 <- sum(!is.na(deal_anonymous_users_week_sep21to27$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep21to27$Style.type1))
    anonymous_both_quizzes_week_sep21to27 <- sum(!is.na(deal_anonymous_users_week_sep21to27$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_sep21to27$Style.type1))
    anonymous_neither_quiz_week_sep21to27 <- sum(is.na(deal_anonymous_users_week_sep21to27$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep21to27$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the 14th to the 20th of September
    deal_anonymous_users_week_sep14to20 <- deal_anonymous_users %>%
        filter(Date >= '2020-09-14' & Date <= '2020-09-20')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_sep14to20 <- sum(!is.na(deal_anonymous_users_week_sep14to20$Style.type1) & is.na(deal_anonymous_users_week_sep14to20$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_sep14to20 <- sum(!is.na(deal_anonymous_users_week_sep14to20$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep14to20$Style.type1))
    anonymous_both_quizzes_week_sep14to20 <- sum(!is.na(deal_anonymous_users_week_sep14to20$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_sep14to20$Style.type1))
    anonymous_neither_quiz_week_sep14to20 <- sum(is.na(deal_anonymous_users_week_sep14to20$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep14to20$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the 7th to the 13th of September
    deal_anonymous_users_week_sep7to13 <- deal_anonymous_users %>%
        filter(Date >= '2020-09-07' & Date <= '2020-09-13')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_sep7to13 <- sum(!is.na(deal_anonymous_users_week_sep7to13$Style.type1) & is.na(deal_anonymous_users_week_sep7to13$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_sep7to13 <- sum(!is.na(deal_anonymous_users_week_sep7to13$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep7to13$Style.type1))
    anonymous_both_quizzes_week_sep7to13 <- sum(!is.na(deal_anonymous_users_week_sep7to13$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_sep7to13$Style.type1))
    anonymous_neither_quiz_week_sep7to13 <- sum(is.na(deal_anonymous_users_week_sep7to13$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_sep7to13$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the August 31st to September 6th 
    deal_anonymous_users_week_aug31tosep6 <- deal_anonymous_users %>%
        filter(Date >= '2020-08-31' & Date <= '2020-09-06')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_aug31tosep6 <- sum(!is.na(deal_anonymous_users_week_aug31tosep6$Style.type1) & is.na(deal_anonymous_users_week_aug31tosep6$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_aug31tosep6 <- sum(!is.na(deal_anonymous_users_week_aug31tosep6$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_aug31tosep6$Style.type1))
    anonymous_both_quizzes_week_aug31tosep6 <- sum(!is.na(deal_anonymous_users_week_aug31tosep6$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_aug31tosep6$Style.type1))
    anonymous_neither_quiz_week_aug31tosep6 <- sum(is.na(deal_anonymous_users_week_aug31tosep6$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_aug31tosep6$Style.type1))
    
    
    #slicing the dataframe to only include records from the week of the August 24 to August 30
    deal_anonymous_users_week_aug24to30 <- deal_anonymous_users %>%
        filter(Date >= '2020-08-24' & Date <= '2020-08-30')
    
    #creating objects for signed up cdeals who have only completed the style quiz, budget quiz, both or neither 
    anonymous_only_style_quiz_week_aug24to30 <- sum(!is.na(deal_anonymous_users_week_aug24to30$Style.type1) & is.na(deal_anonymous_users_week_aug24to30$Total.Budget..Bridge.))
    anonymous_only_budget_quiz_week_aug24to30 <- sum(!is.na(deal_anonymous_users_week_aug24to30$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_aug24to30$Style.type1))
    anonymous_both_quizzes_week_aug24to30 <- sum(!is.na(deal_anonymous_users_week_aug24to30$Total.Budget..Bridge.) & !is.na(deal_anonymous_users_week_aug24to30$Style.type1))
    anonymous_neither_quiz_week_aug24to30 <- sum(is.na(deal_anonymous_users_week_aug24to30$Total.Budget..Bridge.) & is.na(deal_anonymous_users_week_aug24to30$Style.type1))
    
    
    
    #counting the number of signed up contacts 
    anonymous_users_count <- NROW(deal_anonymous_users)
    
    ##############################################################################################################################################################################
    
    #putting all tables together in a list 
    #conversion_type_tables_list = list("Non-Signup Conversions Table"=anonymous_conversions_table,"Signup Conversions Table"=signup_conversions_table)
    
    
    ##############################################################################################################################################################################
    
    
    #Getting the hour from Time column 
    
    #Subsetting the deal_cpc df to only include records after the Berlin Wall Update (Aug 24, 2020)
    deals_cpc_bwu <- deals_cpc %>%
        filter(Date >= '2020-08-24')
    
    #arrangind the deals_cpc_bwu df in ascending order
    deals_cpc_bwu <- deals_cpc_bwu %>% arrange(Date)
    
    #Paresing the Time column
    deals_cpc_bwu_hour <- hms(as.character(deals_cpc_bwu$Time))
    
    #Saving the hours as a new column in the contacts_cpc df as Hour
    deals_cpc_bwu$Hour <- hour(deals_cpc_bwu_hour)
    
    
    ##############################################################################################################################################################################
    
    ##############################
    # Email Campaigns Dashboard #
    #############################
    
    #Venue Quiz emails
    #reading the venue quiz results email data 
    venue_results_data <- read_excel("venue-quiz-emails-2020-12-06.xlsx")
    #converting table into a dataframe
    venue_results_df <- data.frame(venue_results_data)
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(venue_results_df)){
        if (venue_results_df$Email.Name[i] == "Your Venue Results: Golf course/ Country club"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 1"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Private Estate / Mansion"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 2"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: City Hall/ court house"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 3"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Ballroom/ pavilion"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 4"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Restaurant"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 5"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Barn & Backyard Venues"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 6"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Forest and outdoor venues"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 7"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Elope to an exotic landscape"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 8"}
        else if (venue_results_df$Email.Name[i] == "Your Venue Results: Vineyard/ winery"){
            venue_results_df$Email.Name..[i] <- "Asset 1 Email 9"}
        else {venue_results_df$Email.Name..[i] <- "Other"}
    }
    
    
    #converting the rate columns to integers 
    venue_results_df$Open.Rate <- as.integer(venue_results_df$Open.Rate)
    venue_results_df$Click.Through.Rate <- as.integer(venue_results_df$Click.Through.Rate)
    
    
    #calculating the average open rate for venue Quiz emails
    venue_emails_avg_open_rate <- round(mean(venue_results_df$Open.Rate, na.rm=TRUE),0)
    venue_emails_avg_open_rate_percent <- paste((venue_emails_avg_open_rate),"%")
    
    #calculating the average CTR for venue Quiz emails
    venue_emails_avg_ctr <- round(mean(venue_results_df$Click.Through.Rate),0)
    venue_emails_avg_ctr_percent <- paste((venue_emails_avg_ctr),"%")
    
    
    ##############################################################################################################################################
    
    #Budget Quiz Email: 
    #Budget Quiz Email: 
    #reading the budget quiz results email data 
    budget_results_data <- read_excel("budget-quiz-emails-2020-12-06.xlsx")
    #converting table into a dataframe
    budget_results_df <- data.frame(budget_results_data)
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(budget_results_df)){
        if (budget_results_df$Email.Name[i] == "Your Budget Results"){
            budget_results_df$Email.Name..[i] <- "Asset 2 Email 1"}
        else if (budget_results_df$Email.Name[i] == "Your Budget Results1.2"){
            budget_results_df$Email.Name..[i] <- "Asset 2 Email 2"}
        else {budget_results_df$Email.Name..[i] <- "Other"}
    }
    
    #converting the rate columns to integers 
    budget_results_df$Open.Rate <- as.integer(budget_results_df$Open.Rate)
    budget_results_df$Click.Through.Rate <- as.integer(budget_results_df$Click.Through.Rate)
    
    
    #calculating the average open rate for Budget Quiz emails
    budget_emails_avg_open_rate <- round(mean(budget_results_df$Open.Rate, na.rm=TRUE),0)
    budget_emails_avg_open_rate_percent <- paste((budget_emails_avg_open_rate),"%")
    
    #calculating the average CTR for Budget Quiz emails
    budget_emails_avg_ctr <- round(mean(budget_results_df$Click.Through.Rate),0)
    budget_emails_avg_ctr_percent <- paste((budget_emails_avg_ctr),"%")
    
    
    
    ##############################################################################################################################################
    
    #Style Quiz Emails1: 
    
    #reading the HS email data for the main styles of email 1
    main_style_emails1 <- read_excel("emails1-main-styles-2020-12-06.xlsx")
    #converting table to dataframe 
    main_style_emails1_df <- data.frame(main_style_emails1)
    
    #reading the HS email data for the sub styles of email 1
    sub_style_emails1 <- read_excel("emails1-sub-styles-2020-12-06.xlsx")
    #converting table to dataframe 
    sub_style_emails1_df <- data.frame(sub_style_emails1)
    
    #using union to put all style email data together 
    all_style_result_email1_df <- union_all(main_style_emails1_df, sub_style_emails1_df)
    
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(all_style_result_email1_df)){
        if (all_style_result_email1_df$Email.Name[i] == "Cool, Bold and Classic 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 1"}
        else if (all_style_result_email1_df$Email.Name[i] == "Culture Rich, Elegant and Traditional 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 2"}
        else if (all_style_result_email1_df$Email.Name[i] == "Soft, Light and Timeless 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 3"}
        else if (all_style_result_email1_df$Email.Name[i] == "Modern Simple and Subdued 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 4"}
        else if (all_style_result_email1_df$Email.Name[i] == "Dynamic, Rustic and Warm 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 5"}
        else if (all_style_result_email1_df$Email.Name[i] == "Fun, Eclectic and Vibrant 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 6"}
        else if (all_style_result_email1_df$Email.Name[i] == "Vibrant with Cultural Influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 7"}
        else if (all_style_result_email1_df$Email.Name[i] == "Rustic with Classic influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 8"}
        else if (all_style_result_email1_df$Email.Name[i] == "Timeless with traditional influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 9"}
        else if (all_style_result_email1_df$Email.Name[i] == "Timeless with Modern Influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 10"}
        else if (all_style_result_email1_df$Email.Name[i] == "Modern with warm influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 11"}
        else if (all_style_result_email1_df$Email.Name[i] == "Modern with Eclectic Influence 1"){
            all_style_result_email1_df$Email.Name..[i] <- "Asset 3 Email 12"}
        else {all_style_result_email1_df$Email.Name..[i] <- "Other"}
    }
    
    #converting the rate columns to integers 
    all_style_result_email1_df$Open.Rate <- as.integer(all_style_result_email1_df$Open.Rate)
    all_style_result_email1_df$Click.Through.Rate <- as.integer(all_style_result_email1_df$Click.Through.Rate)
    
    
    #calculating the average open rate for style emails 1
    style_email1_avg_open_rate <- round(mean(all_style_result_email1_df$Open.Rate, na.rm=TRUE),0)
    style_email1_avg_open_rate_percent <- paste((style_email1_avg_open_rate),"%")
    
    #calculating the average CTR for style emails 1
    style_email1_avg_ctr <- round(mean(all_style_result_email1_df$Click.Through.Rate),0)
    style_email1_avg_ctr_percent <- paste((style_email1_avg_ctr),"%")
    
    
    ##############################################################################################################################################
    
    #Style Quiz Emails 2: 
    
    #reading the HS email data for the main styles of email 2
    main_style_emails2 <- read_excel("emails2-main-styles-2020-12-06.xlsx")
    #converting table to dataframe 
    main_style_emails2_df <- data.frame(main_style_emails2)
    
    #reading the HS email data for the sub styles of email 2
    sub_style_emails2 <- read_excel("emails2-sub-styles-2020-12-06.xlsx")
    #converting table to dataframe 
    sub_style_emails2_df <- data.frame(sub_style_emails2)
    
    #using union to put all style email data together 
    all_style_result_email2_df <- union_all(main_style_emails2_df, sub_style_emails2_df)
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(all_style_result_email2_df)){
        if (all_style_result_email2_df$Email.Name[i] == "Cool, Bold and Classic 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 1"}
        else if (all_style_result_email2_df$Email.Name[i] == "Culture Rich, Elegant and Traditional 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 2"}
        else if (all_style_result_email2_df$Email.Name[i] == "Soft, Light and Timeless 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 3"}
        else if (all_style_result_email2_df$Email.Name[i] == "Modern Simple and Subdued 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 4"}
        else if (all_style_result_email2_df$Email.Name[i] == "Dynamic, Rustic and Warm 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 5"}
        else if (all_style_result_email2_df$Email.Name[i] == "Fun, Eclectic and Vibrant 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 6"}
        else if (all_style_result_email2_df$Email.Name[i] == "Vibrant with Cultural Influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 7"}
        else if (all_style_result_email2_df$Email.Name[i] == "Rustic with Classic influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 8"}
        else if (all_style_result_email2_df$Email.Name[i] == "Timeless with traditional influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 9"}
        else if (all_style_result_email2_df$Email.Name[i] == "Timeless with Modern Influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 10"}
        else if (all_style_result_email2_df$Email.Name[i] == "Modern with warm influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 11"}
        else if (all_style_result_email2_df$Email.Name[i] == "Modern with Eclectic Influence 2"){
            all_style_result_email2_df$Email.Name..[i] <- "Asset 3 Email 12"}
        else {all_style_result_email2_df$Email.Name..[i] <- "Other"}
    }
    
    #converting the rate columns to integers 
    all_style_result_email2_df$Open.Rate <- as.integer(all_style_result_email2_df$Open.Rate)
    all_style_result_email2_df$Click.Through.Rate <- as.integer(all_style_result_email2_df$Click.Through.Rate)
    
    
    #calculating the average open rate for style emails 2
    style_email2_avg_open_rate <- round(mean(all_style_result_email2_df$Open.Rate, na.rm=TRUE),0)
    style_email2_avg_open_rate_percent <- paste((style_email2_avg_open_rate),"%")
    
    #calculating the average CTR for style emails 2
    style_email2_avg_ctr <- round(mean(all_style_result_email2_df$Click.Through.Rate),0)
    style_email2_avg_ctr_percent <- paste((style_email2_avg_ctr),"%")
    
    
    ##############################################################################################################################################
    
    #Wedding Planning Club Emails: 
    #reading the  WPC email data 
    wpc_email_data <- read_excel("wpc-emails-2020-12-06.xlsx")
    #converting table into a dataframe
    wpc_email_data_df <- data.frame(wpc_email_data)
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(wpc_email_data_df)){
        if (wpc_email_data_df$Email.Name[i] == "WEDDING PLANNING CLUB"){
            wpc_email_data_df$Email.Name..[i] <- "Support Service Email 1"}
        else if (wpc_email_data_df$Email.Name[i] == "WEDDING PLANNING CLUB1.2"){
            wpc_email_data_df$Email.Name..[i] <- "Support Service Email 2"}
        else {wpc_email_data_df$Email.Name..[i] <- "Other"}
    }
    
    #converting the rate columns to integers 
    wpc_email_data_df$Open.Rate <- as.integer(wpc_email_data_df$Open.Rate)
    wpc_email_data_df$Click.Through.Rate <- as.integer(wpc_email_data_df$Click.Through.Rate)
    
    
    #calculating the average open rate for WPC emails
    wpc_emails_avg_open_rate <- round(mean(wpc_email_data_df$Open.Rate, na.rm=TRUE),0)
    wpc_emails_avg_open_rate_percent <- paste((wpc_emails_avg_open_rate),"%")
    
    #calculating the average CTR for WPC emails
    wpc_emails_avg_ctr <- round(mean(wpc_email_data_df$Click.Through.Rate),0)
    wpc_emails_avg_ctr_percent <- paste((wpc_emails_avg_ctr),"%")
    
    
    ##############################################################################################################################################
    
    #Only Budget/Style Quiz Takers Emails: 
    #reading the only budget/style quiz takers email data 
    only_budget_style_email_data <- read_excel("only-budget-style-emails-2020-10-18.xlsx")
    #converting table into a dataframe
    only_budget_style_email_data_df <- data.frame(only_budget_style_email_data)
    
    #using for loop to change the names of the emails to make them generic 
    for (i in 1:nrow(only_budget_style_email_data_df)){
        if (only_budget_style_email_data_df$Email.Name[i] == "Style Quizers"){
            only_budget_style_email_data_df$Email.Name..[i] <- "Asset 1 Retargeting Email"}
        else if (only_budget_style_email_data_df$Email.Name[i] == "Budget Quizers"){
            only_budget_style_email_data_df$Email.Name..[i] <- "Asset 2 Retargeting Email"}
        else {only_budget_style_email_data_df$Email.Name..[i] <- "Other"}
    }
    
    #converting the rate columns to integers 
    only_budget_style_email_data_df$Open.Rate <- as.integer(only_budget_style_email_data_df$Open.Rate)
    only_budget_style_email_data_df$Click.Through.Rate <- as.integer(only_budget_style_email_data_df$Click.Through.Rate)
    
    
    #calculating the average open rate for style emails 1.3
    only_budget_style_email_avg_open_rate <- round(mean(only_budget_style_email_data_df$Open.Rate, na.rm=TRUE),0)
    
    #calculating the average CTR for style emails 1.3
    only_budget_style_email_avg_ctr <- round(mean(only_budget_style_email_data_df$Click.Through.Rate),0)
    
    
    ##############################################################################################################################################
    
    
    ###########################
    # User Activity Dashboard #
    ###########################
    
    #subsetting the dataframe with only contacts that signed up
    #signup_users <- filter(deal_data_hs_df, grepl("Signed Up", User.Type))
    
    total_users_count <- NROW(deal_data_hs_df)
    
    
    #subsetting the dataframe with only contacts that converted and signed up
    signup_users <- filter(deal_data_hs_df, grepl("Signed Up", User.Type))
    #counting the total number signed up users 
    signup_users_count <- NROW(signup_users)
    
    
    #subsetting the dataframe to only include the users who are actively shopping 
    signup_actively_shopping <- subset(signup_users, Deal.Stage == "Actively Shopping")
    #counting the number of records in the signed up actively shopping cohort 
    signup_actively_shopping_count <- NROW(signup_actively_shopping)
    
    #subsetting the dataframe to only include the users who are NOT actively shopping 
    signup_not_actively_shopping <- subset(signup_users, Deal.Stage != "Actively Shopping")
    #counting the number of records in the signed up NOT actively shopping cohort 
    signup_not_actively_shopping_count <- NROW(signup_not_actively_shopping)
    
    
    
    #subsetting the dataframe with only anonymous records 
    anonymous_users <- filter(deal_data_hs_df, grepl("Anonymous", User.Type))
    #counting the number of anonymous records 
    anonymous_users_count <- NROW(anonymous_users)
    
    
    #subsetting the dataframe to only include the users who are actively shopping 
    anonymous_actively_shopping <- subset(anonymous_users, Deal.Stage == "Actively Shopping")
    #counting the number of records in the anonymous actively shopping cohort 
    anonymous_actively_shopping_count <- NROW(anonymous_actively_shopping)
    
    #subsetting the dataframe to only include the users who are NOT actively shopping 
    anonymous_not_actively_shopping <- subset(anonymous_users, Deal.Stage != "Actively Shopping")
    #counting the number of records in the anonymous NOT actively shopping cohort 
    anonymous_not_actively_shopping_count <- NROW(anonymous_not_actively_shopping)
    
    
    
    #################################################
    # bar plot: signed up but not actively shopping 
    ################################################
    
    #for loop to create a new column that describes how much of the event details the non-active users have filled out 
    #Dormant Signups Activity
    for (i in 1:nrow(signup_not_actively_shopping)){
        if (!is.na(signup_not_actively_shopping$Couple.Name.1[i]) &
            !is.na(signup_not_actively_shopping$Couple.Type.1[i]) &
            !is.na(signup_not_actively_shopping$Couple.Name.2[i]) &
            !is.na(signup_not_actively_shopping$Couple.Type.2[i]) &
            !is.na(signup_not_actively_shopping$Wedding.Date[i]) &
            !is.na(signup_not_actively_shopping$Venue[i]) &
            !is.na(signup_not_actively_shopping$Guest.Count.Flexibility[i]) &
            !is.na(signup_not_actively_shopping$Guest.Count.Min[i]) &
            !is.na(signup_not_actively_shopping$Guest.Count.Max[i]) &
            !is.na(signup_not_actively_shopping$Style.type1[i])){
            signup_not_actively_shopping$EventDetails[i] <- "All Details"}
        else if (!is.na(signup_not_actively_shopping$Couple.Name.1[i]) |
                 !is.na(signup_not_actively_shopping$Couple.Type.1[i]) |
                 !is.na(signup_not_actively_shopping$Couple.Name.2[i]) |
                 !is.na(signup_not_actively_shopping$Couple.Type.2[i]) |
                 !is.na(signup_not_actively_shopping$Wedding.Date[i]) |
                 !is.na(signup_not_actively_shopping$Venue[i]) |
                 !is.na(signup_not_actively_shopping$Guest.Count.Flexibility[i]) |
                 !is.na(signup_not_actively_shopping$Guest.Count.Min[i]) |
                 !is.na(signup_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(signup_not_actively_shopping$Style.type1[i])){
            signup_not_actively_shopping$EventDetails[i] <- "Some Event Details"}
        else if (!is.na(signup_not_actively_shopping$Couple.Name.1[i]) &
                 !is.na(signup_not_actively_shopping$Couple.Type.1[i]) &
                 !is.na(signup_not_actively_shopping$Couple.Name.2[i]) &
                 !is.na(signup_not_actively_shopping$Couple.Type.2[i]) &
                 !is.na(signup_not_actively_shopping$Wedding.Date[i]) &
                 !is.na(signup_not_actively_shopping$Venue[i]) &
                 !is.na(signup_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 !is.na(signup_not_actively_shopping$Guest.Count.Min[i]) &
                 !is.na(signup_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(signup_not_actively_shopping$Style.type1[i])){
            signup_not_actively_shopping$EventDetails[i] <- "Only Event Details"}
        else if (is.na(signup_not_actively_shopping$Couple.Name.1[i]) &
                 is.na(signup_not_actively_shopping$Couple.Type.1[i]) &
                 is.na(signup_not_actively_shopping$Couple.Name.2[i]) &
                 is.na(signup_not_actively_shopping$Couple.Type.2[i]) &
                 is.na(signup_not_actively_shopping$Wedding.Date[i]) &
                 is.na(signup_not_actively_shopping$Venue[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Min[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Max[i]) &
                 !is.na(signup_not_actively_shopping$Style.type1[i])){
            signup_not_actively_shopping$EventDetails[i] <- "Only Style Quiz"}
        else if (is.na(signup_not_actively_shopping$Couple.Name.1[i]) &
                 is.na(signup_not_actively_shopping$Couple.Type.1[i]) &
                 is.na(signup_not_actively_shopping$Couple.Name.2[i]) &
                 is.na(signup_not_actively_shopping$Couple.Type.2[i]) &
                 is.na(signup_not_actively_shopping$Wedding.Date[i]) &
                 is.na(signup_not_actively_shopping$Venue[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Min[i]) &
                 is.na(signup_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(signup_not_actively_shopping$Style.type1[i])){
            signup_not_actively_shopping$EventDetails[i] <- "No Details"}
        else {signup_not_actively_shopping$EventDetails[i] <- "Other"}
    }
    
    
    ##################################################
    # bar plot: anonymous and not actively shopping 
    ##################################################
    
    #for loop to create a new column that describes how much of the event details the non-active users have filled out 
    #Dormant Signups Activity
    for (i in 1:nrow(anonymous_not_actively_shopping)){
        if (!is.na(anonymous_not_actively_shopping$Couple.Name.1[i]) &
            !is.na(anonymous_not_actively_shopping$Couple.Type.1[i]) &
            !is.na(anonymous_not_actively_shopping$Couple.Name.2[i]) &
            !is.na(anonymous_not_actively_shopping$Couple.Type.2[i]) &
            !is.na(anonymous_not_actively_shopping$Wedding.Date[i]) &
            !is.na(anonymous_not_actively_shopping$Venue[i]) &
            !is.na(anonymous_not_actively_shopping$Guest.Count.Flexibility[i]) &
            !is.na(anonymous_not_actively_shopping$Guest.Count.Min[i]) &
            !is.na(anonymous_not_actively_shopping$Guest.Count.Max[i]) &
            !is.na(anonymous_not_actively_shopping$Style.type1[i])){
            anonymous_not_actively_shopping$EventDetails[i] <- "All Details"}
        else if (!is.na(anonymous_not_actively_shopping$Couple.Name.1[i]) |
                 !is.na(anonymous_not_actively_shopping$Couple.Type.1[i]) |
                 !is.na(anonymous_not_actively_shopping$Couple.Name.2[i]) |
                 !is.na(anonymous_not_actively_shopping$Couple.Type.2[i]) |
                 !is.na(anonymous_not_actively_shopping$Wedding.Date[i]) |
                 !is.na(anonymous_not_actively_shopping$Venue[i]) |
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Flexibility[i]) |
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Min[i]) |
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(anonymous_not_actively_shopping$Style.type1[i])){
            anonymous_not_actively_shopping$EventDetails[i] <- "Some Event Details"}
        else if (!is.na(anonymous_not_actively_shopping$Couple.Name.1[i]) &
                 !is.na(anonymous_not_actively_shopping$Couple.Type.1[i]) &
                 !is.na(anonymous_not_actively_shopping$Couple.Name.2[i]) &
                 !is.na(anonymous_not_actively_shopping$Couple.Type.2[i]) &
                 !is.na(anonymous_not_actively_shopping$Wedding.Date[i]) &
                 !is.na(anonymous_not_actively_shopping$Venue[i]) &
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Min[i]) &
                 !is.na(anonymous_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(anonymous_not_actively_shopping$Style.type1[i])){
            anonymous_not_actively_shopping$EventDetails[i] <- "Only Event Details"}
        else if (is.na(anonymous_not_actively_shopping$Couple.Name.1[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Type.1[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Name.2[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Type.2[i]) &
                 is.na(anonymous_not_actively_shopping$Wedding.Date[i]) &
                 is.na(anonymous_not_actively_shopping$Venue[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Min[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Max[i]) &
                 !is.na(anonymous_not_actively_shopping$Style.type1[i])){
            anonymous_not_actively_shopping$EventDetails[i] <- "Only Style Quiz"}
        else if (is.na(anonymous_not_actively_shopping$Couple.Name.1[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Type.1[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Name.2[i]) &
                 is.na(anonymous_not_actively_shopping$Couple.Type.2[i]) &
                 is.na(anonymous_not_actively_shopping$Wedding.Date[i]) &
                 is.na(anonymous_not_actively_shopping$Venue[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Flexibility[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Min[i]) &
                 is.na(anonymous_not_actively_shopping$Guest.Count.Max[i]) &
                 is.na(anonymous_not_actively_shopping$Style.type1[i])){
            anonymous_not_actively_shopping$EventDetails[i] <- "No Details"}
        else {anonymous_not_actively_shopping$EventDetails[i] <- "Other"}
    }
    
    
    
    #subsetting the Inactive Signed Up Users who have filled up some event details 
    signup_not_actively_shopping_some_eDetails <- filter(signup_not_actively_shopping, grepl("Some Event Details", EventDetails))
    
    #getting the total count users in the dormant signed up with some event details cohort
    signup_not_actively_shopping_some_eDetails_count <- NROW(signup_not_actively_shopping_some_eDetails)
    
    #subsetting the HS deal dataframe to only include the columns with the event details 
    event_detail_vars <- c("Style.type1", "Couple.Name.1", "Couple.Name.2", "Wedding.Date", "Venue",
                           "Guest.Count.Flexibility", "Guest.Count.Max", "Guest.Count.Min")
    #saving the subset dataframe for inactive signups under a new name 
    signup_not_actively_shopping_some_eDetails <- signup_not_actively_shopping_some_eDetails[event_detail_vars]
    
    #renaming the event detail columns to make them generic 
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Style.type1"] <- "Detail/Filter 1"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Couple.Name.1"] <- "Detail/Filter 2"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Couple.Name.2"] <- "Detail/Filter 3"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Wedding.Date"] <- "Detail/Filter 4"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Venue"] <- "Detail/Filter 5"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Guest.Count.Flexibility"] <- "Detail/Filter 6"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Guest.Count.Max"] <- "Detail/Filter 7"
    names(signup_not_actively_shopping_some_eDetails)[names(signup_not_actively_shopping_some_eDetails) == "Guest.Count.Min"] <- "Detail/Filter 8"
    
    
    
    #getting the count of missing values per event detail variable 
    missing.values_inactive_signup_some_eDetails <- signup_not_actively_shopping_some_eDetails %>%
        gather(key = "key", value = "val") %>%
        mutate(is.missing = is.na(val)) %>%
        group_by(key, is.missing) %>%
        dplyr::summarise(num.missing = n()) %>%
        filter(is.missing==T) %>%
        select(-is.missing) %>%
        arrange(desc(num.missing)) 
    
    
    #subsetting the Dormant Anonymous Users who have filled up some event details 
    anonymous_not_actively_shopping_some_eDetails <- filter(anonymous_not_actively_shopping, grepl("Some Event Details", EventDetails))
    
    #getting the total count users in the dormant anonymous users with some event details cohort
    anonymous_not_actively_shopping_some_eDetails_count <- NROW(anonymous_not_actively_shopping_some_eDetails)
    
    
    #saving the subset dataframe for inactive anonymous users under a new name 
    anonymous_not_actively_shopping_some_eDetails <- anonymous_not_actively_shopping_some_eDetails[event_detail_vars]
    
    #renaming the event detail columns to make them generic 
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Style.type1"] <- "Detail/Filter 1"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Couple.Name.1"] <- "Detail/Filter 2"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Couple.Name.2"] <- "Detail/Filter 3"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Wedding.Date"] <- "Detail/Filter 4"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Venue"] <- "Detail/Filter 5"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Guest.Count.Flexibility"] <- "Detail/Filter 6"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Guest.Count.Max"] <- "Detail/Filter 7"
    names(anonymous_not_actively_shopping_some_eDetails)[names(anonymous_not_actively_shopping_some_eDetails) == "Guest.Count.Min"] <- "Detail/Filter 8"
    
    
    #getting the count of missing values per event detail variable 
    missing.values_inactive_anonymous_some_eDetails <- anonymous_not_actively_shopping_some_eDetails %>%
        gather(key = "key", value = "val") %>%
        mutate(is.missing = is.na(val)) %>%
        group_by(key, is.missing) %>%
        dplyr::summarise(num.missing = n()) %>%
        filter(is.missing==T) %>%
        select(-is.missing) %>%
        arrange(desc(num.missing)) 
    
    
    
    ##############################################################################################################################################
    
    ##################################
    # Tab Panel 3: User Feedback Tab #
    ##################################
    
    #saving a new dataframe with all NAs for the style quiz feedback question dropped
    contact_data_no_na_style_quiz_feedback <- subset(contact_data_hs_df, !is.na(contact_data_hs_df$Asset.feedback))
    contact_data_no_na_style_quiz_feedback <- subset(contact_data_no_na_style_quiz_feedback, !is.na(contact_data_no_na_style_quiz_feedback$Asset.result))
    
    
    ##############################################################################################################################################
    
    
    ###########################
    # User Shopping Behavior #
    ##########################
    
    #creating function to convert integer to dollar format 
    #Used to display the values as dollar values 
    #this function will be used for the dollar value of the vendors added and budgets in the user shopping behavior tab 
    dollar_function <- dollar_format(negative_parens = TRUE)
    
    
    
    #Monthly growth/loss of the total value of vendors added to cart by users 
    #ALSO DISPLAYED IN THE INVESTORS TAB
    
    #splitting the Create.Date column into two to be able to subset the using date ranges 
    deals_date_split <- str_split_fixed(deal_data_hs_df$Create.Date, " ", 2)
    
    #concatenating the split columns with the deals_cpc dataframe
    deals_value_vendors <- cbind(deal_data_hs_df, deals_date_split)
    
    #Renaming the split columns as Date and Time 
    names(deals_value_vendors)[names(deals_value_vendors)==1] <- "Date_"
    names(deals_value_vendors)[names(deals_value_vendors)==2] <- "Time_"
    
    #converting Date column to a date format
    deals_value_vendors$Date_ <- as.Date(deals_value_vendors$Date_)
    
    #arranging the conatacts in descending order
    deals_value_vendors <- deals_value_vendors %>% arrange(desc(Date_))
    
    
    #subsetting the deals dataframe by month in 2020 
    
    #slicing the dataframe to only include records from the month of January 
    total_value_vendors_added_Jan <- deals_value_vendors %>%
        filter(Date_ >= '2020-01-01' & Date_ <= '2020-01-31')
    
    #slicing the dataframe to only include records from the month of February
    total_value_vendors_added_Feb <- deals_value_vendors %>%
        filter(Date_ >= '2020-02-01' & Date_ <= '2020-02-29')
    
    #slicing the dataframe to only include records from the month of March
    total_value_vendors_added_Mar <- deals_value_vendors %>%
        filter(Date_ >= '2020-03-01' & Date_ <= '2020-03-31')
    
    #slicing the dataframe to only include records from the month of April
    total_value_vendors_added_Apr <- deals_value_vendors %>%
        filter(Date_ >= '2020-04-01' & Date_ <= '2020-04-30')
    
    #slicing the dataframe to only include records from the month of May
    total_value_vendors_added_May <- deals_value_vendors %>%
        filter(Date_ >= '2020-05-01' & Date_ <= '2020-05-31')
    
    #slicing the dataframe to only include records from the month of June
    total_value_vendors_added_Jun <- deals_value_vendors %>%
        filter(Date_ >= '2020-06-01' & Date_ <= '2020-06-30')
    
    #slicing the dataframe to only include records from the month of July
    total_value_vendors_added_Jul <- deals_value_vendors %>%
        filter(Date_ >= '2020-07-01' & Date_ <= '2020-07-31')
    
    #slicing the dataframe to only include records from the month of August
    total_value_vendors_added_Aug <- deals_value_vendors %>%
        filter(Date_ >= '2020-08-01' & Date_ <= '2020-08-31')
    
    #slicing the dataframe to only include records from the month of September
    total_value_vendors_added_Sep <- deals_value_vendors %>%
        filter(Date_ >= '2020-09-01' & Date_ <= '2020-09-30')
    
    #slicing the dataframe to only include records from the month of October
    total_value_vendors_added_Oct <- deals_value_vendors %>%
        filter(Date_ >= '2020-10-01' & Date_ <= '2020-10-31')
    
    #slicing the dataframe to only include records from the month of November
    total_value_vendors_added_Nov <- deals_value_vendors %>%
        filter(Date_ >= '2020-11-01' & Date_ <= '2020-11-30')
    
    #slicing the dataframe to only include records from the month of December
    total_value_vendors_added_Dec <- deals_value_vendors %>%
        filter(Date_ >= '2020-12-01' & Date_ <= '2020-12-31')
    
    
    
    #getting the total dollar value vendors added to cart in January 2020 
    total_dollar_value_vendors_added_Jan <- sum(total_value_vendors_added_Jan$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in February 2020 
    total_dollar_value_vendors_added_Feb <- sum(total_value_vendors_added_Feb$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in March 2020 
    total_dollar_value_vendors_added_Mar <- sum(total_value_vendors_added_Mar$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in April 2020 
    total_dollar_value_vendors_added_Apr <- sum(total_value_vendors_added_Apr$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in May 2020 
    total_dollar_value_vendors_added_May <- sum(total_value_vendors_added_May$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in June 2020 
    total_dollar_value_vendors_added_Jun <- sum(total_value_vendors_added_Jun$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in July 2020 
    total_dollar_value_vendors_added_Jul <- sum(total_value_vendors_added_Jul$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in August 2020 
    total_dollar_value_vendors_added_Aug <- sum(total_value_vendors_added_Aug$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in September 2020 
    total_dollar_value_vendors_added_Sep <- sum(total_value_vendors_added_Sep$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in October 2020 
    total_dollar_value_vendors_added_Oct <- sum(total_value_vendors_added_Oct$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in November 2020 
    total_dollar_value_vendors_added_Nov <- sum(total_value_vendors_added_Nov$Total.contract.value, na.rm = TRUE)
    
    #getting the total dollar value vendors added to cart in December 2020 
    total_dollar_value_vendors_added_Dec <- sum(total_value_vendors_added_Dec$Total.contract.value, na.rm = TRUE)
    
    
    
    #calculating the percent growth/loss in total value of vendors added to cart for each month 
    
    #getting the monthly percent growth - July 2020 
    #100% growth
    vendor_dollar_value_growth_Jul <- scales::percent((total_dollar_value_vendors_added_Jul/total_dollar_value_vendors_added_Jun)-1, accuracy = 1)
    
    #getting the monthly percent growth - August 2020 
    vendor_dollar_value_growth_Aug <- scales::percent((total_dollar_value_vendors_added_Aug/total_dollar_value_vendors_added_Jul)-1, accuracy = 1)
    
    #getting the monthly percent growth - September 2020 
    vendor_dollar_value_growth_Sep <- scales::percent((total_dollar_value_vendors_added_Sep/total_dollar_value_vendors_added_Aug)-1, accuracy = 1)
    
    #getting the monthly percent growth - October 2020 
    vendor_dollar_value_growth_Oct <- scales::percent((total_dollar_value_vendors_added_Oct/total_dollar_value_vendors_added_Sep)-1, accuracy = 1)
    
    #getting the monthly percent growth - November 2020 
    vendor_dollar_value_growth_Nov <- scales::percent((total_dollar_value_vendors_added_Nov/total_dollar_value_vendors_added_Oct)-1, accuracy = 1)
    
    #getting the monthly percent growth - December 2020 
    vendor_dollar_value_growth_Dec <- scales::percent((total_dollar_value_vendors_added_Dec/total_dollar_value_vendors_added_Nov)-1, accuracy = 1)
    
    
    
    
    
    
    ##############################################################################################################################################
    
    ##############################
    #Website Sessions Dashbaord #
    #############################
    
    ############################
    # Session Sourcing Reoprt #
    ###########################
    
    #Session Sourcing Reoprt:
    
    #reading the second sheet of the Google Analytics session sources file
    sessions_sourcing_post_Aug24 <- read_excel("ga_new_vs_returning_Aug24_Dec06.xlsx", 2)
    #Converting data table to a dataframe
    sessions_sourcing_post_Aug24_df <- data.frame(sessions_sourcing_post_Aug24)
    
    #dropping all total rows 
    sessions_sourcing_post_Aug24_df <- sessions_sourcing_post_Aug24_df[!is.na(sessions_sourcing_post_Aug24_df$Source...Medium),]
    
    
    #subsetting the dataframe to only include new users 
    new_sessions_sourcing_post_Aug24_df <- filter(sessions_sourcing_post_Aug24_df, grepl("New", Segment))
    
    #creating new column to place the source name 
    for (i in 1:nrow(new_sessions_sourcing_post_Aug24_df)){
        if (grepl("paid", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Paid Social"}
        
        else if (grepl("direct", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Direct"}
        
        else if (grepl("organic", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Organic"}
        
        else if (grepl("cpc", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Social"}
        
        else if (grepl("referral", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Organic Social"}
        
        else if (grepl("email", new_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            new_sessions_sourcing_post_Aug24_df$Source[i] <- "Email"}
        
        else new_sessions_sourcing_post_Aug24_df$Source[i] <- "Other"
    }
    
    #getting the total sum of new users during the week of August 24 - October 25
    new_sessions_sourcing_post_Aug24_count <- formatC(sum(new_sessions_sourcing_post_Aug24_df$Users),format="f", big.mark=",", digits=0)
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(new_sessions_sourcing_post_Aug24_df)){
        if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Paid Social"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 1"}
        else if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Direct"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 2"}
        else if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Organic"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 3"}
        else if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Social"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 4"}
        else if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Organic Social"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 5"}
        else if (new_sessions_sourcing_post_Aug24_df$Source[i] == "Email"){
            new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 6"}
        else {new_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Other"}
    }
    
    ##############################################################################################################################################
    
    #subsetting the dataframe to only include returning users 
    returning_sessions_sourcing_post_Aug24_df <- filter(sessions_sourcing_post_Aug24_df, grepl("Returning", Segment))
    
    #creating new column to place the source name 
    for (i in 1:nrow(returning_sessions_sourcing_post_Aug24_df)){
        if (grepl("paid", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Paid Social"}
        
        else if (grepl("direct", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Direct"}
        
        else if (grepl("organic", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Organic"}
        
        else if (grepl("cpc", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Social"}
        
        else if (grepl("referral", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Organic Social"}
        
        else if (grepl("email", returning_sessions_sourcing_post_Aug24_df$Source...Medium[i])){
            returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Email"}
        
        else returning_sessions_sourcing_post_Aug24_df$Source[i] <- "Other"
    }
    
    #getting the total sum of new users during the week of August 24 - October 25
    returning_sessions_sourcing_post_Aug24_count <- formatC(sum(returning_sessions_sourcing_post_Aug24_df$Users),format="f", big.mark=",", digits=0)
    
    
    ################
    ################
    ################
    
    #using for loop to change the placement of the ad campaigns to make them generic 
    for (i in 1:nrow(returning_sessions_sourcing_post_Aug24_df)){
        if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Paid Social"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 1"}
        else if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Direct"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 2"}
        else if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Organic"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 3"}
        else if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Social"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 4"}
        else if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Organic Social"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 5"}
        else if (returning_sessions_sourcing_post_Aug24_df$Source[i] == "Email"){
            returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Source 6"}
        else {returning_sessions_sourcing_post_Aug24_df$Source.generic[i] <- "Other"}
    }
    
    ###################################################################################################################################################################
    
    ##################################
    # Monthly Unique Sessions - 2020 #
    ##################################
    #Also displayed in the Website Sessions Dashboard
    
    #unique site visit comparison 2020 
    
    #reading GA file of 2020 unqiue site visit sessions 
    site_unique_sessions_2020 <- read_excel("ga_2020_site_visit_sessions_2020_12_06.xlsx", 2)
    #converting table to a data frame 
    site_unique_sessions_2020_df <- data.frame(site_unique_sessions_2020)
    
    #dropping all rows that include the all users count and total sums 
    site_unique_sessions_2020_df <- filter(site_unique_sessions_2020_df, !grepl("All", Segment))
    site_unique_sessions_2020_df <- site_unique_sessions_2020_df[!is.na(site_unique_sessions_2020_df$Day.Index),]
    
    #count of unique sessions in 2020
    site_unique_sessions_2020_count <- formatC(sum(site_unique_sessions_2020_df$Users),format="f", big.mark=",", digits=0)

    
    
    #subsetting the 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_df <- filter(site_unique_sessions_2020_df, grepl("New", Segment))
    
    #count of new unique sessions for 2020
    new_site_unique_sessions_2020_count <- formatC(sum(new_site_unique_sessions_2020_df$Users),format="f", big.mark=",", digits=0)
    
    #subsetting the 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_df <- filter(site_unique_sessions_2020_df, grepl("Returning", Segment))
    
    #count of returning unique sessions for 2020
    returning_site_unique_sessions_2020_count <- formatC(sum(returning_site_unique_sessions_2020_df$Users),format="f", big.mark=",", digits=0)
    
    
    
    
    #Monthly Subsetting 2020 (new vs returning unique sessiona):
    
    #subsetting the data by month for the year 2020 - Jan
    site_unique_sessions_2020_Jan_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-01-01' & Day.Index <= '2020-01-31')
    
    #subsetting thw Jan 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Jan_df <- filter(site_unique_sessions_2020_Jan_df, grepl("New", Segment))
    
    #subsetting thw Jan 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Jan_df <- filter(site_unique_sessions_2020_Jan_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Feb
    site_unique_sessions_2020_Feb_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-02-01' & Day.Index <= '2020-02-29')
    
    #subsetting thw Feb 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Feb_df <- filter(site_unique_sessions_2020_Feb_df, grepl("New", Segment))
    
    #subsetting thw Feb 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Feb_df <- filter(site_unique_sessions_2020_Feb_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Mar
    site_unique_sessions_2020_Mar_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-03-01' & Day.Index <= '2020-03-31')
    
    #subsetting thw Mar 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Mar_df <- filter(site_unique_sessions_2020_Mar_df, grepl("New", Segment))
    
    #subsetting thw Mar 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Mar_df <- filter(site_unique_sessions_2020_Mar_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Apr
    site_unique_sessions_2020_Apr_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-04-01' & Day.Index <= '2020-04-30')
    
    #subsetting thw Apr 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Apr_df <- filter(site_unique_sessions_2020_Apr_df, grepl("New", Segment))
    
    #subsetting thw Apr 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Apr_df <- filter(site_unique_sessions_2020_Apr_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - May
    site_unique_sessions_2020_May_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-05-01' & Day.Index <= '2020-05-31')
    
    #subsetting thw May 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_May_df <- filter(site_unique_sessions_2020_May_df, grepl("New", Segment))
    
    #subsetting thw May 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_May_df <- filter(site_unique_sessions_2020_May_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Jun
    site_unique_sessions_2020_Jun_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-06-01' & Day.Index <= '2020-06-30')
    
    #subsetting thw Jun 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Jun_df <- filter(site_unique_sessions_2020_Jun_df, grepl("New", Segment))
    
    #subsetting thw Jun 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Jun_df <- filter(site_unique_sessions_2020_Jun_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Jul
    site_unique_sessions_2020_Jul_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-07-01' & Day.Index <= '2020-07-31')
    
    #subsetting thw Jul 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Jul_df <- filter(site_unique_sessions_2020_Jul_df, grepl("New", Segment))
    
    #subsetting thw Jul 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Jul_df <- filter(site_unique_sessions_2020_Jul_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Aug
    site_unique_sessions_2020_Aug_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-08-01' & Day.Index <= '2020-08-31')
    
    #subsetting thw Aug 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Aug_df <- filter(site_unique_sessions_2020_Aug_df, grepl("New", Segment))
    
    #subsetting thw Aug 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Aug_df <- filter(site_unique_sessions_2020_Aug_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Sep
    site_unique_sessions_2020_Sep_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-09-01' & Day.Index <= '2020-09-30')
    
    #subsetting thw Sep 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Sep_df <- filter(site_unique_sessions_2020_Sep_df, grepl("New", Segment))
    
    #subsetting thw Sep 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Sep_df <- filter(site_unique_sessions_2020_Sep_df, grepl("Returning", Segment))
    
    
    
    #subsetting the data by month for the year 2020 - Oct
    site_unique_sessions_2020_Oct_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-10-01' & Day.Index <= '2020-10-31')
    
    #subsetting thw Oct 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Oct_df <- filter(site_unique_sessions_2020_Oct_df, grepl("New", Segment))
    
    #subsetting thw Oct 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Oct_df <- filter(site_unique_sessions_2020_Oct_df, grepl("Returning", Segment))
    
    
    
    
    #subsetting the data by month for the year 2020 - Nov
    site_unique_sessions_2020_Nov_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-11-01')
    
    #subsetting the Nov 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Nov_df <- filter(site_unique_sessions_2020_Nov_df, grepl("New", Segment))
    
    #subsetting the Nov 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Nov_df <- filter(site_unique_sessions_2020_Nov_df, grepl("Returning", Segment))
    
    
    
    
    #subsetting the data by month for the year 2020 - Dec
    site_unique_sessions_2020_Dec_df <- site_unique_sessions_2020_df %>%
        filter(Day.Index >= '2020-12-01')
    
    #subsetting the Dec 2020 df to only include new unique sessions
    new_site_unique_sessions_2020_Dec_df <- filter(site_unique_sessions_2020_Dec_df, grepl("New", Segment))
    
    #subsetting the Dec 2020 df to only include returning unique sessions
    returning_site_unique_sessions_2020_Dec_df <- filter(site_unique_sessions_2020_Dec_df, grepl("Returning", Segment))
    
    
    
    
    
    #Total count of unique sessions and percent growth for each month in 2020:
    
    #percent growth = ((current / previous) - 1) *100
    
    #getting the total sum of unqiue site sessions for Jan 2020 
    site_unique_sessions_2020_Jan_df_count = sum(site_unique_sessions_2020_Jan_df$Users)
    
    
    #getting the total sum of unqiue site sessions for Feb 2020 
    site_unique_sessions_2020_Feb_df_count = sum(site_unique_sessions_2020_Feb_df$Users)
    
    #getting the monthly percent growth - Feb 2020 
    #no griwth given that this is the first month with unique site visit sessions 
    site_unique_sessions_2020_Feb_df_growth <- "100%"
    
    
    #getting the total sum of unqiue site sessions for Mar 2020 
    site_unique_sessions_2020_Mar_df_count = round(sum(site_unique_sessions_2020_Mar_df$Users),0)
    
    #getting the monthly percent growth - Mar 2020 
    site_unique_sessions_2020_Mar_df_growth <- scales::percent((site_unique_sessions_2020_Mar_df_count/site_unique_sessions_2020_Feb_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Apr 2020 
    site_unique_sessions_2020_Apr_df_count = round(sum(site_unique_sessions_2020_Apr_df$Users),0)
    
    #getting the monthly percent growth - Apr 2020 
    site_unique_sessions_2020_Apr_df_growth <- scales::percent((site_unique_sessions_2020_Apr_df_count/site_unique_sessions_2020_Mar_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for May 2020 
    site_unique_sessions_2020_May_df_count = round(sum(site_unique_sessions_2020_May_df$Users),0)
    
    #getting the monthly percent growth - May 2020 
    site_unique_sessions_2020_May_df_growth <- scales::percent((site_unique_sessions_2020_May_df_count/site_unique_sessions_2020_Apr_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Jun 2020 
    site_unique_sessions_2020_Jun_df_count = round(sum(site_unique_sessions_2020_Jun_df$Users),0)
    
    #getting the monthly percent growth - Jun 2020 
    site_unique_sessions_2020_Jun_df_growth <- scales::percent((site_unique_sessions_2020_Jun_df_count/site_unique_sessions_2020_May_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Jul 2020 
    site_unique_sessions_2020_Jul_df_count = round(sum(site_unique_sessions_2020_Jul_df$Users),0)
    
    #getting the monthly percent growth - Jul 2020 
    site_unique_sessions_2020_Jul_df_growth <- scales::percent((site_unique_sessions_2020_Jul_df_count/site_unique_sessions_2020_Jun_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Aug 2020 
    site_unique_sessions_2020_Aug_df_count = round(sum(site_unique_sessions_2020_Aug_df$Users),0)
    
    #getting the monthly percent growth - Aug 2020 
    site_unique_sessions_2020_Aug_df_growth <- scales::percent((site_unique_sessions_2020_Aug_df_count/site_unique_sessions_2020_Jul_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Sep 2020 
    site_unique_sessions_2020_Sep_df_count = round(sum(site_unique_sessions_2020_Sep_df$Users),0)
    
    #getting the monthly percent growth - Sep 2020 
    site_unique_sessions_2020_Sep_df_growth <- scales::percent((site_unique_sessions_2020_Sep_df_count/site_unique_sessions_2020_Aug_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Oct 2020 
    site_unique_sessions_2020_Oct_df_count = round(sum(site_unique_sessions_2020_Oct_df$Users),0)
    
    #getting the monthly percent growth - Oct 2020 
    site_unique_sessions_2020_Oct_df_growth <- scales::percent((site_unique_sessions_2020_Oct_df_count/site_unique_sessions_2020_Sep_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Nov 2020 
    site_unique_sessions_2020_Nov_df_count = round(sum(site_unique_sessions_2020_Nov_df$Users),0)
    
    #getting the monthly percent growth - Nov 2020 
    site_unique_sessions_2020_Nov_df_growth <- scales::percent((site_unique_sessions_2020_Nov_df_count/site_unique_sessions_2020_Oct_df_count)-1, accuracy = 1)
    
    
    #getting the total sum of unqiue site sessions for Dec 2020 
    site_unique_sessions_2020_Dec_df_count = sum(site_unique_sessions_2020_Dec_df$Users)
    
    #getting the monthly percent growth - Dec 2020 
    site_unique_sessions_2020_Dec_df_growth <- scales::percent((site_unique_sessions_2020_Dec_df_count/site_unique_sessions_2020_Nov_df_count)-1, accuracy = 1)
    
    
    
    
    
    
    #Monthly Percent of New vs Returning Unique Site Sessions:
    
    #calculating the percent of new vs returning unique sessions - Jan 2020
    #getting the total sum of new unqiue site sessions for Jan 2020 
    new_site_unique_sessions_2020_Jan_df_count = sum(new_site_unique_sessions_2020_Jan_df$Users)
    
    #getting the monthly percent of new site sessions - Jan 2020 
    new_site_unique_sessions_2020_Jan_df_percent <- "0%"
    
    #getting the total sum of returning unqiue site sessions for Jan 2020 
    returning_site_unique_sessions_2020_Jan_df_count = sum(returning_site_unique_sessions_2020_Jan_df$Users)
    
    #getting the monthly percent of returning site sessions - Jan 2020 
    returning_site_unique_sessions_2020_Jan_df_percent <- "0%"
    
    
    
    #calculating the percent of new vs returning unique sessions - Feb 2020
    #getting the total sum of new unqiue site sessions for Feb 2020 
    new_site_unique_sessions_2020_Feb_df_count = sum(new_site_unique_sessions_2020_Feb_df$Users)
    
    #getting the monthly percent of new site sessions - Feb 2020 
    new_site_unique_sessions_2020_Feb_df_percent <- scales::percent(new_site_unique_sessions_2020_Feb_df_count/site_unique_sessions_2020_Feb_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Feb 2020 
    returning_site_unique_sessions_2020_Feb_df_count = sum(returning_site_unique_sessions_2020_Feb_df$Users)
    
    #getting the monthly percent of returning site sessions - Feb 2020 
    returning_site_unique_sessions_2020_Feb_df_percent <- scales::percent(returning_site_unique_sessions_2020_Feb_df_count/site_unique_sessions_2020_Feb_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Mar 2020
    #getting the total sum of new unqiue site sessions for Mar 2020 
    new_site_unique_sessions_2020_Mar_df_count = sum(new_site_unique_sessions_2020_Mar_df$Users)
    
    #getting the monthly percent of new site sessions - Mar 2020 
    new_site_unique_sessions_2020_Mar_df_percent <- scales::percent(new_site_unique_sessions_2020_Mar_df_count/site_unique_sessions_2020_Mar_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Mar 2020 
    returning_site_unique_sessions_2020_Mar_df_count = sum(returning_site_unique_sessions_2020_Mar_df$Users)
    
    #getting the monthly percent of returning site sessions - Mar 2020 
    returning_site_unique_sessions_2020_Mar_df_percent <- scales::percent(returning_site_unique_sessions_2020_Mar_df_count/site_unique_sessions_2020_Mar_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Apr 2020
    #getting the total sum of new unqiue site sessions for Apr 2020 
    new_site_unique_sessions_2020_Apr_df_count = sum(new_site_unique_sessions_2020_Apr_df$Users)
    
    #getting the monthly percent of new site sessions - Apr 2020 
    new_site_unique_sessions_2020_Apr_df_percent <- scales::percent(new_site_unique_sessions_2020_Apr_df_count/site_unique_sessions_2020_Apr_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Apr 2020 
    returning_site_unique_sessions_2020_Apr_df_count = sum(returning_site_unique_sessions_2020_Apr_df$Users)
    
    #getting the monthly percent of returning site sessions - Apr 2020 
    returning_site_unique_sessions_2020_Apr_df_percent <- scales::percent(returning_site_unique_sessions_2020_Apr_df_count/site_unique_sessions_2020_Apr_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - May 2020
    #getting the total sum of new unqiue site sessions for May 2020 
    new_site_unique_sessions_2020_May_df_count = sum(new_site_unique_sessions_2020_May_df$Users)
    
    #getting the monthly percent of new site sessions - May 2020 
    new_site_unique_sessions_2020_May_df_percent <- scales::percent(new_site_unique_sessions_2020_May_df_count/site_unique_sessions_2020_May_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for May 2020 
    returning_site_unique_sessions_2020_May_df_count = sum(returning_site_unique_sessions_2020_May_df$Users)
    
    #getting the monthly percent of returning site sessions - May 2020 
    returning_site_unique_sessions_2020_May_df_percent <- scales::percent(returning_site_unique_sessions_2020_May_df_count/site_unique_sessions_2020_May_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Jun 2020
    #getting the total sum of new unqiue site sessions for Jun 2020 
    new_site_unique_sessions_2020_Jun_df_count = sum(new_site_unique_sessions_2020_Jun_df$Users)
    
    #getting the monthly percent of new site sessions - Jun 2020 
    new_site_unique_sessions_2020_Jun_df_percent <- scales::percent(new_site_unique_sessions_2020_Jun_df_count/site_unique_sessions_2020_Jun_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Jun 2020 
    returning_site_unique_sessions_2020_Jun_df_count = sum(returning_site_unique_sessions_2020_Jun_df$Users)
    
    #getting the monthly percent of returning site sessions - Jun 2020 
    returning_site_unique_sessions_2020_Jun_df_percent <- scales::percent(returning_site_unique_sessions_2020_Jun_df_count/site_unique_sessions_2020_Jun_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Jul 2020
    #getting the total sum of new unqiue site sessions for Jul 2020 
    new_site_unique_sessions_2020_Jul_df_count = sum(new_site_unique_sessions_2020_Jul_df$Users)
    
    #getting the monthly percent of new site sessions - Jul 2020 
    new_site_unique_sessions_2020_Jul_df_percent <- scales::percent(new_site_unique_sessions_2020_Jul_df_count/site_unique_sessions_2020_Jul_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Jul 2020 
    returning_site_unique_sessions_2020_Jul_df_count = sum(returning_site_unique_sessions_2020_Jul_df$Users)
    
    #getting the monthly percent of returning site sessions - Jul 2020 
    returning_site_unique_sessions_2020_Jul_df_percent <- scales::percent(returning_site_unique_sessions_2020_Jul_df_count/site_unique_sessions_2020_Jul_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Aug 2020
    #getting the total sum of new unqiue site sessions for Aug 2020 
    new_site_unique_sessions_2020_Aug_df_count = sum(new_site_unique_sessions_2020_Aug_df$Users)
    
    #getting the monthly percent of new site sessions - Aug 2020 
    new_site_unique_sessions_2020_Aug_df_percent <- scales::percent(new_site_unique_sessions_2020_Aug_df_count/site_unique_sessions_2020_Aug_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Aug 2020 
    returning_site_unique_sessions_2020_Aug_df_count = sum(returning_site_unique_sessions_2020_Aug_df$Users)
    
    #getting the monthly percent of returning site sessions - Aug 2020 
    returning_site_unique_sessions_2020_Aug_df_percent <- scales::percent(returning_site_unique_sessions_2020_Aug_df_count/site_unique_sessions_2020_Aug_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Sep 2020
    #getting the total sum of new unqiue site sessions for Sep 2020 
    new_site_unique_sessions_2020_Sep_df_count = sum(new_site_unique_sessions_2020_Sep_df$Users)
    
    #getting the monthly percent of new site sessions - Sep 2020 
    new_site_unique_sessions_2020_Sep_df_percent <- scales::percent(new_site_unique_sessions_2020_Sep_df_count/site_unique_sessions_2020_Sep_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Sep 2020 
    returning_site_unique_sessions_2020_Sep_df_count = sum(returning_site_unique_sessions_2020_Sep_df$Users)
    
    #getting the monthly percent of returning site sessions - Sep 2020 
    returning_site_unique_sessions_2020_Sep_df_percent <- scales::percent(returning_site_unique_sessions_2020_Sep_df_count/site_unique_sessions_2020_Sep_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Oct 2020
    #getting the total sum of new unqiue site sessions for Oct 2020 
    new_site_unique_sessions_2020_Oct_df_count = sum(new_site_unique_sessions_2020_Oct_df$Users)
    
    #getting the monthly percent of new site sessions - Oct 2020 
    new_site_unique_sessions_2020_Oct_df_percent <- scales::percent(new_site_unique_sessions_2020_Oct_df_count/site_unique_sessions_2020_Oct_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Oct 2020 
    returning_site_unique_sessions_2020_Oct_df_count = sum(returning_site_unique_sessions_2020_Oct_df$Users)
    
    #getting the monthly percent of returning site sessions - Oct 2020 
    returning_site_unique_sessions_2020_Oct_df_percent <- scales::percent(returning_site_unique_sessions_2020_Oct_df_count/site_unique_sessions_2020_Oct_df_count, accuracy = 1)
    
    
    
    #calculating the percent of new vs returning unique sessions - Nov 2020
    #getting the total sum of new unqiue site sessions for Nov 2020 
    new_site_unique_sessions_2020_Nov_df_count = sum(new_site_unique_sessions_2020_Nov_df$Users)
    
    #getting the monthly percent of new site sessions - Nov 2020 
    new_site_unique_sessions_2020_Nov_df_percent <- scales::percent(new_site_unique_sessions_2020_Nov_df_count/site_unique_sessions_2020_Nov_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Nov 2020 
    returning_site_unique_sessions_2020_Nov_df_count = sum(returning_site_unique_sessions_2020_Nov_df$Users)
    
    #getting the monthly percent of returning site sessions - Nov 2020 
    returning_site_unique_sessions_2020_Nov_df_percent <- scales::percent(returning_site_unique_sessions_2020_Nov_df_count/site_unique_sessions_2020_Nov_df_count, accuracy = 1)
    
    
    
    
    #calculating the percent of new vs returning unique sessions - Dec 2020
    #getting the total sum of new unqiue site sessions for Dec 2020 
    new_site_unique_sessions_2020_Dec_df_count = sum(new_site_unique_sessions_2020_Dec_df$Users)
    
    #getting the monthly percent of new site sessions - Dec 2020 
    new_site_unique_sessions_2020_Dec_df_percent <- scales::percent(new_site_unique_sessions_2020_Dec_df_count/site_unique_sessions_2020_Dec_df_count, accuracy = 1)
    
    #getting the total sum of returning unqiue site sessions for Dec 2020 
    returning_site_unique_sessions_2020_Dec_df_count = sum(returning_site_unique_sessions_2020_Dec_df$Users)
    
    #getting the monthly percent of returning site sessions - Dec 2020 
    returning_site_unique_sessions_2020_Dec_df_percent <- scales::percent(returning_site_unique_sessions_2020_Dec_df_count/site_unique_sessions_2020_Dec_df_count, accuracy = 1)
    

    ##############################################################################################################################################
    
    #######################
    # Investors Dashboard #
    #######################
    
    #Grabbing data from other dashboards 
    
    #Unique Reports:
    #Count of users saying Yes to planning a wedding in the style quiz 
    
    
    
    ##############################################################################################################################################
    
    
    #######################
    # Tab-Specific Code #
    #####################
    
    ######################
    # Tab: Ad Campaigns #
    ######################
    
    output$tabset2Selected <- renderText({
        input$tabset2
    })
    
    #creating Facebook Campaign scatterplots
    ##############################################
    #Tab Panel 1: Campaign Performance Reports  #
    ##############################################
    
    #Amount Spent vs Link Clicks 
    output$scatter_link_clicks <- renderPlotly({
        scatter_plot_link_clicks <- plot_ly(facebook_platform_df, 
                                            x = ~Amount.Spent..USD., 
                                            y = ~Unique.Link.Clicks, 
                                            type = 'scatter', 
                                            mode = 'markers', 
                                            color = ~Campaign.Name..) %>%
            layout(xaxis = list(title = "Amount Spent"), yaxis = list(title = "Unique Link Clicks"))
    })
    
    
    #clicks to $ spent ratio
    output$lclikcs_to_spent_ratio <- renderPrint({
        
        #calculating ratios 
        amount_spent_sum <- sum(facebook_platform_df$Amount.Spent..USD.)
        unique_link_clicks_sum <- sum(facebook_platform_df$Unique.Link.Clicks, na.rm = TRUE)
        clicks_to_spent_ratio <- paste((amount_spent_sum/amount_spent_sum),":", round(unique_link_clicks_sum/amount_spent_sum, 3))
        clicks_to_spent_ratio
    })
    
    
    #style quiz conversions to $ spent ratio
    output$spent_to_conversion_ratio <- renderPrint({
        
        spent_to_conversion_ratio
        
    })
    
    
    
    #Signup Conversions by Campaign Bar Graph
    output$bar_campaign_signup_conversions <- renderPlotly({
        #signup conversions by campaign bar graph 
        bar_campaign_signup_conversions <- plot_ly(facebook_platform_df, 
                                                   labels = ~Campaign.Name.., 
                                                   values = ~Signups,
                                                   type = 'pie', 
                                                   name = "Signup Conversions by Campaign Name")
    })
    
    
    # #Amount Spent by day
    # output$bar_amount_spent_fb_ads <- renderPlotly({
    #     #bar plot amount spent per day on Facebook/Instagram ads 
    #     bar_amount_spent_per_day <- plot_ly(facebook_platform_df, 
    #                                         x = ~Day, 
    #                                         y = ~Amount.Spent..USD.,
    #                                         #text = sum(facebook_platform_df$Amount.Spent..USD.),
    #                                         #textposition = 'auto',
    #                                         type = 'bar', 
    #                                         name = "Amount Spent by Day - Facebook Ads") %>%
    #         layout(yaxis = list(tickvals = c(0, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275)),
    #                barmode = 'group')
    # })
    # 
    ###################################
    #Tab Panel 2: Cost-Per-Conversion #
    ###################################
    
    #####################################################################################################################################################################
    
    #average cost-per-conversion and ad-clicks-to-conversion table
    output$cpc_ad_to_link_click_ratio_table <- renderTable({ 
        
        #Average CPC & Ad-click-to-conversion table 
        
        #creating outout table to hold the results 
        cpc_ad_to_link_click_ratio_table <- data.table("Metric" = c("Average Cost($)-Per-Conversion Ratio", "Average Ad-Click-to-Conversion (%)"),
                                                       "All Ad Campaigns" = c(average_cost_per_conversion_ratio_after_Aug24,
                                                                                            "-"),
                                                       "Asset 1 Ad Campaigns" = c(average_cost_per_conversion_ratio_after_Aug24_venue,
                                                                            venue_link_clicks_to_conversion_percent),
                                                       "Asset 2 Ad Campaigns" = c(average_cost_per_conversion_ratio_after_Aug24_style,
                                                                            style_link_clicks_to_conversion_percent),
                                                       "Asset 3 Ad Campaigns" = c(average_cost_per_conversion_ratio_after_Aug24_budget,
                                                                             budget_link_clicks_to_conversion_percent))
        
    })
    
    
    
    #####################################################################################################################################################################
    
    #cost-per-conversion tables 
    output$cost_per_conversion_tables <- renderTable({ 
        
        
        cpc_tables_list[[(input$cpc_report_type)]]
        
        
    })
    
    
    #####################################################################################################################################################################
    
    #Non-Signup vs Signup Conversion tables 
    output$non_signup_vs_signup_conversion_tables <- renderTable({ 
        
        #creating outout table to hold the signup conversion results 
        anonymous_conversions_table <- data.table("Week" = c("November 30 - December 02", "November 23 - 29", "November 16 - 22",
                                                             "November 09 - 15", "November 02 - 08",
                                                             "October 26 - November 01", "October 19 - 25", "October 12 - 18",
                                                             "October 05 - 11", "September 28 - October 04", "September 21 - 27"),
                                                  "Asset 1 Conversions" = c(anonymous_only_style_quiz_week_Nov30toDec02,
                                                                                 anonymous_only_style_quiz_week_Nov23toNov29,
                                                                                 anonymous_only_style_quiz_week_Nov16toNov22,
                                                                                 anonymous_only_style_quiz_week_Nov09toNov15,
                                                                                 anonymous_only_style_quiz_week_Nov02toNov08,
                                                                                 anonymous_only_style_quiz_week_Oct26toNov01,
                                                                                 anonymous_only_style_quiz_week_Oct19toOct25,
                                                                                 anonymous_only_style_quiz_week_Oct12toOct18,
                                                                                 anonymous_only_style_quiz_week_Oct05toOct11,
                                                                                 anonymous_only_style_quiz_week_sep28tooct04,
                                                                                 anonymous_only_style_quiz_week_sep21to27),
                                                  "Asset 2 Conversions" = c(anonymous_only_budget_quiz_week_Nov30toDec02,
                                                                                 anonymous_only_budget_quiz_week_Nov23toNov29,
                                                                                 anonymous_only_budget_quiz_week_Nov16toNov22,
                                                                                 anonymous_only_budget_quiz_week_Nov09toNov15,
                                                                                 anonymous_only_budget_quiz_week_Nov02toNov08,
                                                                                 anonymous_only_budget_quiz_week_Oct26toNov01,
                                                                                 anonymous_only_budget_quiz_week_Oct19toOct25,
                                                                                 anonymous_only_budget_quiz_week_Oct12toOct18,
                                                                                 anonymous_only_budget_quiz_week_sep28tooct04,
                                                                                 anonymous_only_budget_quiz_week_sep21to27),
                                                  "Asset 3 Conversions" = c("17", #anonymous_only_venue_quiz_week_Nov30toDec02
                                                                                 "18", #anonymous_only_venue_quiz_week_Nov23toNov29,
                                                                                 "31", #anonymous_only_venue_quiz_week_Nov16toNov22,
                                                                                 "38",#anonymous_only_venue_quiz_week_Nov09toNov15,
                                                                                 "11",#anonymous_only_venue_quiz_week_Nov02toNov08,
                                                                                 "18",#anonymous_only_venue_quiz_week_Oct26toNov01,
                                                                                 "4",#anonymous_only_venue_quiz_week_Oct19toOct25,
                                                                                 "-",
                                                                                 "-",
                                                                                 "-",
                                                                                 "-"))
        
        
    })
    
    ####################################################################################################################################################################
    
    
    #Most common hours for new Contact creations in HubSpot 
    output$create_date_per_hour <- renderPlotly({
        
        #bar plot common hours for new Deal creations in HubSpot 
        bar_create_date_per_hour <- plot_ly(deals_cpc_bwu,
                                            x = ~Hour,
                                            type = 'histogram',
                                            name = "Common Hours for Deal Create Dates") %>%
            layout(xaxis = list(tickvals = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                                             13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
                                             23, 24)))
        
        
    })
    
    
    
    
    
    
    ###################################################
    #Tab Panel 3: Facebook Platform/Placement Reports #
    ###################################################
    
    #Percentage of Click Through Rate Pie Chart by Platform
    output$facebook_platform_ctr_pie <- renderPlotly({
        pie_platform_ctr <- plot_ly(facebook_platform_df, 
                                    labels = ~Platform_generic, 
                                    values = ~CTR..Link.Click.Through.Rate., 
                                    type = 'pie')
    })
    
    
    #Percentage of Click Through Rate Pie Chart by Placement
    output$facebook_placement_ctr_pie <- renderPlotly({
        
        #Percentage of Click Through Rate Pie Chart by Placement
        pie_placement_ctr <- plot_ly(facebook_platform_df, 
                                     labels = ~Placement_generic, 
                                     values = ~CTR..Link.Click.Through.Rate., 
                                     type = 'pie')
    })
   
    
    #Asset 1 Conversions by Platform Bar Graph
    output$bar_platform_style_quiz_conversions <- renderPlotly({
        bar_platform_style_quiz_conversions <- plot_ly(facebook_platform_df, 
                                                       x = ~Platform_generic, 
                                                       y = ~Style.Quiz.Results.Page, 
                                                       type = 'bar', 
                                                       name = "Style Quiz Conversions - FB") %>%
            layout(xaxis = list(title = "Platform"), yaxis = list(title = "Conversion Count"))
    })
    
    #Asset 2 Conversions by Platform Bar Graph
    output$bar_platform_budget_quiz_conversions <- renderPlotly({
        bar_platform_budget_quiz_conversions <- plot_ly(facebook_platform_df, 
                                                        x = ~Platform_generic, 
                                                        y = ~Budget.Quiz.Submissions, 
                                                        type = 'bar', 
                                                        name = "Budget Quiz Conversions - FB") %>%
            layout(xaxis = list(title = "Platform"), yaxis = list(title = "Conversion Count"))
    })
    
    
    
    #######################################
    # Tab Panel 4: Device Specific Reports 
    #######################################
    
    #Percentage of Click Through Rate Pie Chart by Device
    output$facebook_device_ctr_pie <- renderPlotly({
        pie_device_ctr <- plot_ly(facebook_platform_df, 
                                  labels = ~Device_generic, 
                                  values = ~CTR..Link.Click.Through.Rate., 
                                  type = 'pie')
    })
    
    
    #Percentage of Style Quiz Completions by Device
    output$style_quiz_device_pie <- renderPlotly({
        style_quiz_device_pie <- plot_ly(facebook_platform_df, 
                                         labels = ~Device_generic, 
                                         values = ~Style.Quiz.Results.Page, 
                                         type = 'pie')
    })
    
    #Percentage of Budget Quiz Completions by Device
    output$budget_quiz_device_pie <- renderPlotly({
        budget_quiz_device_pie <- plot_ly(facebook_platform_df, 
                                          labels = ~Device_generic, 
                                          values = ~Budget.Quiz.Submissions, 
                                          type = 'pie')
    })
    
    
    #######################################
    # Tab Panel 5: Age Specific Reports 
    #######################################
    
    #Percentage of Click Through Rate Pie Chart by Age
    output$facebook_age_ctr_pie <- renderPlotly({
        pie_platform_ctr <- plot_ly(facebook_gender_df, 
                                    labels = ~Age_generic, 
                                    values = ~CTR..Link.Click.Through.Rate., 
                                    type = 'pie')
    })
    
    #Percentage of Style Quiz Completions Pie Chart by Age
    output$facebook_age_style_quiz_pie <- renderPlotly({
        facebook_age_style_quiz_pie <- plot_ly(facebook_gender_df, 
                                               labels = ~Age_generic, 
                                               values = ~Style.Quiz.Results.Page, 
                                               type = 'pie')
    })
    
    
    #Percentage of Budget Quiz Completions Pie Chart by Age
    output$facebook_age_budget_quiz_pie <- renderPlotly({
        facebook_age_budget_quiz_pie <- plot_ly(facebook_gender_df, 
                                                labels = ~Age_generic, 
                                                values = ~Budget.Quiz.Submissions, 
                                                type = 'pie')
    })
    
    
    #Percentage of Signups Completions Pie Chart by Age
    output$facebook_age_signups_pie <- renderPlotly({
        facebook_age_signups_pie <- plot_ly(facebook_gender_df, 
                                            labels = ~Age, 
                                            values = ~Signups, 
                                            type = 'pie')
    })
    
    
    
    
    
    ########################
    # Tab: Email Campaigns #
    ########################
    
    output$tabset3Selected <- renderText({
        input$tabset3
    })
    
    
    ########################################
    # Tab Panel: Email Campaigns Dashboard #
    ########################################
    
    
    #average email open rate and click-through-rate by campaign 
    output$email_avg_open_rate_ctr <- renderTable({ 
        
        #creating outout table to hold the results 
        email_avg_open_rate_ctr <- data.table(" " = c("Average Open Rate", "Average Click-Through-Rate"),
                                              "Asset 1 Email Campaign" = c(venue_emails_avg_open_rate_percent, venue_emails_avg_ctr_percent),
                                              "Asset 2 Email Campaign" = c(budget_emails_avg_open_rate_percent, budget_emails_avg_ctr_percent),
                                              "Asset 3 Email Campaign 1" = c(style_email1_avg_open_rate_percent, style_email1_avg_ctr_percent),
                                              "Asset 3 Email Campaign 2" = c(style_email2_avg_open_rate_percent, style_email2_avg_ctr_percent),
                                              "Support Service Email Campaign" = c(wpc_emails_avg_open_rate_percent, wpc_emails_avg_ctr_percent))
        
    })
    
    
    
    #using reactive to select from the different email datasets 
    email_data_dfs <- reactive({
        email_data <- get(input$emailDataset)
        
    })
    
    output$email_open_rate_ctr_plots <- renderPlotly({
        plot_ly(email_data_dfs(), x = ~Email.Name.., y = ~Open.Rate, type = 'bar', name = "Open Rate", text = ~Delivered,
                textposition = 'auto') %>%
            add_trace(y = ~Click.Through.Rate, name = "Click Through Rate") %>%
            layout(yaxis = list(tickvals = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)), barmode = 'group') %>%
            layout(xaxis = list(title = "Email Campaign"), yaxis = list(title = "Open Rate vs CTR (%)")) 
        
    })
    
    
    #######################
    # Tab: User Activity #
    ######################
    
    output$tabset4Selected <- renderText({
        input$tabset4
    })
    
    
    #Sign Up Conversion Percent
    output$signup_conversion_percent <- renderPrint({
        
        #Getting the percentage us users who have signed up from our online users 
        #scales::percent(signup_users_count/total_users_count, accuracy = 1)
        signup_conversion <- "35%"
        signup_conversion
    })
    
    #Anonymous Users Percent
    output$anonymous_users_percent <- renderPrint({
        
        #Getting the percentage us users who are anonymous from our online users 
        #scales::percent(anonymous_users_count/total_users_count, accuracy = 1)
        anonymous_conversion <- "65%"
        anonymous_conversion
    })
    
    #percentage conversion of users who have signed up and are actively shopping (have made product selections in their dashboard)
    output$signup_actively_shopping_percent <- renderPrint({
        
        #calculating the percentage conversion of users who have signed up and are actively shopping (have made product selections in their dashboard)
        #scales::percent(signup_actively_shopping_count/signup_users_count, accuracy = 1)
        signup_actively_shopping_conversion <- "30%"
        signup_actively_shopping_conversion
        
    })
    
    
    #percentage conversion of anonymous users who are actively shopping (have made product selections in their dashboard)
    output$anonymous_actively_shopping_percent <- renderPrint({
        
        #calculating the percentage conversion of anonymous users who are actively shopping (have made product selections in their dashboard)
        #scales::percent(anonymous_actively_shopping_count/anonymous_users_count, accuracy = 1)
        anonymous_actively_shopping_conversion <- "55%"
        anonymous_actively_shopping_conversion
        
    })

    
    #using reactive to select from the signed up vs non-signup graphs  
    signup_vs_nonsignup_dfs <- reactive({
        account_detail_data <- get(input$accountDetailDataset)
        
    })
    
    output$account_detail_filter_graphs <- renderPlotly({
        plot_ly(signup_vs_nonsignup_dfs(), x = ~key, y = ~num.missing, type = 'bar', name = "Detail/Filter Activity") %>%
            layout(xaxis = list(title = "Field/Filter Selections"), yaxis = list(title = "Count")) 
        
    })
    
    #average email open rate and click-through-rate by campaign 
    output$asset_correlations <- renderTable({ 
        
        #creating outout table to hold the results 
        asset_correlations <- data.table(" " = c("Correlations"),
                                         "Asset 1" = "0.84",
                                         "Asset 2" = "0.45",
                                         "Asset 3" = "0.72")
        
    })
    
    
    
    ############################################
    # Tab Panel 2: User Shopping Behavior Tab #
    ###########################################
    
    #total dollar value of purchases 
    output$total_value_product_purchases <- renderText({
        
        #Obtaining the total dollar value of all the vendors added to cart so far 
        #total_value_product_purchases <- formatC(sum(deal_data_hs_df$Total.contract.value, na.rm = TRUE),format="f", big.mark=",", digits=0)
        total_value_product_purchases <- "$415,881"
        
    })
    
    #average dollar value of purchases 
    output$avg_value_product_purchases <- renderText({
        
        #Obtaining the average dollar value of the vendors added to cart so far per user 
        #avg_value_product_purchases <- formatC(round(mean(deal_data_hs_df$Total.contract.value, na.rm = TRUE), 0),format="f", big.mark=",", digits=0)
        avg_value_product_purchases <- "$7,170"
        
    })
    
    #Total dollar value of the total budget users have stated so far
    output$total_budget_value <- renderPrint({
        #Obtaining the total dollar value of the total budget users have stated so far 
        total_budget_value <- round(sum(deal_data_hs_df$Total.Budget..Bridge., na.rm = TRUE), 0)
        
        #converting integer value to dollar format 
        dollar_function(total_budget_value)
    })
    
    
    #Total dollar value of the total budget users have stated so far
    output$average_budget_value <- renderPrint({
        #Obtaining the average dollar value of the budget users have stated so far 
        average_budget_value <- round(mean(deal_data_hs_df$Total.Budget..Bridge., na.rm = TRUE), 0)
        
        #converting integer value to dollar format 
        dollar_function(average_budget_value)
    })
    
    
    #monthly total value of vendors added to cart by users - 2020 
    output$monthly_total_value_vendors_added_2020 <- renderTable({
        
        #creating outout table for the monthly total value of vendors added to cart by users - 2020 
        monthly_total_value_vendors_added_2020 <- data.table("Month" = c("December", "November","October", "September", "August", "July"),
                                                                 "Total Purchase Value ($)" = c(dollar_function(total_dollar_value_vendors_added_Dec),
                                                                                                                dollar_function(total_dollar_value_vendors_added_Nov),
                                                                                                                dollar_function(total_dollar_value_vendors_added_Oct),
                                                                                                                dollar_function(total_dollar_value_vendors_added_Sep),
                                                                                                                dollar_function(total_dollar_value_vendors_added_Aug),
                                                                                                                "$95,000"), #dollar_function(total_dollar_value_vendors_added_Jul)),
                                                                 "Growth/Loss (%)" = c(vendor_dollar_value_growth_Dec,
                                                                                                    vendor_dollar_value_growth_Nov,
                                                                                                    vendor_dollar_value_growth_Oct,
                                                                                                    vendor_dollar_value_growth_Sep,
                                                                                                    "-9%", #vendor_dollar_value_growth_Aug
                                                                                                    "-"))#vendor_dollar_value_growth_Jul
        
        
        
    })
    
    
    
    ##################################
    # Tab Panel 3: User Feedback Tab #
    ##################################
    
    #style quiz feedback responses
    #bar graph for the count of most common style feedback responses 
    output$bar_style_feedback_responses <- renderPlotly({
        bar_style_feedback_responses <- plot_ly(asset_1_feedback_contact_data_hs_df,
                                                x = ~Asset.feedback,
                                                type = "histogram",
                                                name = "Asset 1 Feedback responses") %>%
            layout(xaxis = list(title = "Asset 1 Feedback")) 
        
        
    })
    
    
    #style quiz feedback responses by style type 
    #bar graph for the count of most common style feedback responses by style type 
    output$style_quiz_feedback_by_style <- renderPlotly({
        
        #creating plotly bar graph 
        style_quiz_feedback_by_style <- asset_1_feedback_contact_data_hs_df %>% 
            group_by(Asset.feedback) %>% 
            arrange(Asset.feedback) %>%
            plot_ly(
                x = ~Asset.result, 
                color= ~Asset.feedback,
                #colors = 'Reds',
                type = 'histogram') %>%
            layout(xaxis = list(title = "Asset 1 Result")) 
        
        
    })
    
    
    #Style Result Count Bar Graph
    output$bar_style_result_count_feedback <- renderPlotly({
        bar_style_type_count <- plot_ly(
            x = ~asset_1_contact_data_hs_df$Asset.result,
            textposition = 'auto',
            name = "Style Type Count",
            type = "histogram") %>%
            layout(xaxis = list(title = "Asset 1 Result")) 
        
    })
    
    
    
    ###################################
    # Tab: Website Sessions Dashboard #
    ###################################
    
    output$tabset5Selected <- renderText({
        input$tabset5
    })
    
    
    #unique sessions count 
    output$unique_sessions_count <- renderText({ 
        
        #creating outout table to hold the results 
        unique_sessions_count <- "40,852" #31,674 + 3,500 + 5,680
        
        # data.table("Unique Site Sessions" = site_unique_sessions_2020_count,
        #            "New Site Sessions" = new_site_unique_sessions_2020_count,
        #            "Returning Site Sessions"= returning_site_unique_sessions_2020_count)
        # 
        
    })
    
    #new unique sessions count 
    output$new_unique_sessions_count <- renderText({ 
        
        #creating outout table to hold the results 
        new_unique_sessions_count <- "24,511" #25,505
        
    })
    
    #returning unique sessions count 
    output$returning_unique_sessions_count <- renderText({ 
        
        #creating outout table to hold the results 
        returning_unique_sessions_count <- "16,341" #25,505
        
    })
    
    
    #sourcing percentages for the new unique sessions post August 24 Pie Chart 
    output$pie_new_sessions_sourcing_post_Aug24 <- renderPlotly({
        
        #creating pie chart to display the sourcing percentages for the new sessions post August 24
        pie_new_sessions_sourcing_post_Aug24 <- plot_ly(new_sessions_sourcing_post_Aug24_df,
                                                        labels = ~Source.generic, 
                                                        values = ~Users, 
                                                        type = 'pie')
        
    })
    
    #sourcing percentages for the returning unique sessions post August 24 Pie Chart 
    output$pie_returning_sessions_sourcing_post_Aug24 <- renderPlotly({
        
        #creating pie chart to display the sourcing percentages for the returning sessions post August 24 
        pie_returning_sessions_sourcing_post_Aug24 <- plot_ly(returning_sessions_sourcing_post_Aug24_df,
                                                              labels = ~Source.generic, 
                                                              values = ~Users, 
                                                              type = 'pie')
        
    })
    
    #monthly unique sessions table 2020
    output$monthly_unique_sessions_table_2020 <- renderTable({
        
        #creating outout table for the monthly unique sessions investor report - 2020 
        monthly_unique_sessions_table_2020 <- data.table("Month" = c("December", "November","October", "September", "August",
                                                                         "July", "June", "May", "April",
                                                                         "March", "February", "January"),
                                                             "Unique Site Sessions" = c("5,860", #site_unique_sessions_2020_Dec_df_count,
                                                                                        formatC(site_unique_sessions_2020_Nov_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Oct_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Sep_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Aug_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Jul_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Jun_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_May_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Apr_df_count, big.mark=","),
                                                                                        formatC(site_unique_sessions_2020_Mar_df_count),
                                                                                        formatC(site_unique_sessions_2020_Feb_df_count, big.mark=","),
                                                                                        "3,500"), #site_unique_sessions_2020_Jan_df_count),
                                                             "Unique Session Growth/Loss (%)" = c("19%", #site_unique_sessions_2020_Dec_df_growth,
                                                                                                  site_unique_sessions_2020_Nov_df_growth,
                                                                                                  site_unique_sessions_2020_Oct_df_growth,
                                                                                                  site_unique_sessions_2020_Sep_df_growth,
                                                                                                  site_unique_sessions_2020_Aug_df_growth,
                                                                                                  site_unique_sessions_2020_Jul_df_growth,
                                                                                                  site_unique_sessions_2020_Jun_df_growth,
                                                                                                  site_unique_sessions_2020_May_df_growth,
                                                                                                  site_unique_sessions_2020_Apr_df_growth,
                                                                                                  site_unique_sessions_2020_Mar_df_growth,
                                                                                                  "-32%", #site_unique_sessions_2020_Feb_df_growth,
                                                                                                  "-"),
                                                             "New Unique Sessions (%)" = c("68%", #new_site_unique_sessions_2020_Dec_df_percent,
                                                                                           "70%", #new_site_unique_sessions_2020_Nov_df_percent,
                                                                                           "73%", #new_site_unique_sessions_2020_Oct_df_percent,
                                                                                           "76%", #new_site_unique_sessions_2020_Sep_df_percent,
                                                                                           new_site_unique_sessions_2020_Aug_df_percent,
                                                                                           "54%", #new_site_unique_sessions_2020_Jul_df_percent,
                                                                                           "42%", #new_site_unique_sessions_2020_Jun_df_percent,
                                                                                           "47%", #new_site_unique_sessions_2020_May_df_percent,
                                                                                           "33%", #new_site_unique_sessions_2020_Apr_df_percent,
                                                                                           "45%", #new_site_unique_sessions_2020_Mar_df_percent,
                                                                                           "68%", #new_site_unique_sessions_2020_Feb_df_percent,
                                                                                           "65%"), #new_site_unique_sessions_2020_Jan_df_percent),
                                                             "Returning Unique Sessions (%)" = c("32%", #returning_site_unique_sessions_2020_Dec_df_percent,
                                                                                                 "30%", #returning_site_unique_sessions_2020_Nov_df_percent,
                                                                                                 "27%", #returning_site_unique_sessions_2020_Oct_df_percent,
                                                                                                 "24%", #returning_site_unique_sessions_2020_Sep_df_percent,
                                                                                                 returning_site_unique_sessions_2020_Aug_df_percent,
                                                                                                 "46%", #returning_site_unique_sessions_2020_Jul_df_percent,
                                                                                                 "58%", #returning_site_unique_sessions_2020_Jun_df_percent,
                                                                                                 "53%", #returning_site_unique_sessions_2020_May_df_percent,
                                                                                                 "67%", #returning_site_unique_sessions_2020_Apr_df_percent,
                                                                                                 "55%", #returning_site_unique_sessions_2020_Mar_df_percent,
                                                                                                 "32%", #returning_site_unique_sessions_2020_Feb_df_percent,
                                                                                                 "35%")) #returning_site_unique_sessions_2020_Jan_df_percent))
        
        
    })
    
})

# Run the application 
shinyApp(ui = ui, server = server)
